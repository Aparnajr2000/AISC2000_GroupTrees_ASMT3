{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "UYoSBW7swzNz"
   },
   "source": [
    "<h1 align=\"center\">AISC2000 - Group Trees - Assignment 3 Task Distribution and Status</h1>\n",
    "\n",
    "| Individual Responsible | Task | Status | Results |\n",
    "|:---|:---|:---|:---|\n",
    "| **SUBHASH PAVAN CHAKRAVARTHY SOMAROUTHU** | Data Preprocessing and Feature Engineering | Class Separability Checked? Train and Test Handled Correctly? | Featureset with best separability? Steps taken before and after train test split? |\n",
    "|  | Feature Importance Analysis (Random Forests) | Implemented? Compared with LIME/SHAP? | Key findings from comparison |\n",
    "|  | Check feature importance using Random Forests | Implemented? | Key findings |\n",
    "| **KANIKA** | Data Visualization for Feature Engineering | Visualizations created before model training? | Insights from visualizations |\n",
    "|  | Next Steps Analysis | List out 2-3 possible next steps for each model |  |\n",
    "|  | Summarize understanding of outputs from feature importance and tuning | Summary completed? | Key insights |\n",
    "|  | Final Report Compilation | Compile all sections, ensure HTML export of Jupyter notebook |  |\n",
    "| **GOKUL KRISHNA POURNAMI GOPI** | SVM Model (Parking Identification) | Config of model trained? Train Time? | Ensure >5000 data points in test set |\n",
    "|  | SVM Model (Parking Validation) | Config of model trained? Train Time? | Ensure >5000 data points in test set |\n",
    "|  | Model Evaluation (All Models) | Confusion Matrix Built? AUC plotted? Accuracy computed? | F1 Score for Positive/Negative, AUC, Accuracy |\n",
    "|  | Run 3 rounds of empirical tuning on SVM models | Tuning completed? | Performance improvements |\n",
    "| **APARNA JAYAKUMAR RESMI** | Random Forest Model (Parking Identification) | Config of the model trained? Train Time? | Ensure >5000 data points in test set |\n",
    "|  | Random Forest Model (Parking Validation) | Config of the model trained? Train Time? | Ensure >5000 data points in test set |\n",
    "|  | Run 3 rounds of empirical tuning on Random Forest models | Tuning completed? | Performance improvements |\n",
    "| **CLIFFORD ADDISON** | XGBoost Model (Parking Identification) | Config of model trained? Train Time? | Ensure >5000 data points in test set |\n",
    "|  | XGBoost Model (Parking Validation) | Config of model trained? Train Time? | Ensure >5000 data points in test set |\n",
    "|  | Run 3 rounds of empirical tuning on XGBoost models | Tuning completed? | Performance improvements |\n",
    "| **OBIANUJU NONYEREM ANUMA** | 1 Hidden Layer ANN (Parking Identification) | Config of model trained? Train Time? | Ensure >5000 data points in test set |\n",
    "|  | Run 3 rounds of empirical tuning on 1 Hidden Layer ANN model | Tuning completed? | Performance improvements |\n",
    "| **ABDULLAH IFTEQAR MOHAMMED** | Multi-Hidden Layer ANN (Parking Identification) | Config of model trained? Train Time? Use dropout, regularization, early stopping, and weight initialization. |\n",
    "|  | Run 3 rounds of empirical tuning on Multi-Hidden Layer ANN model | Tuning completed? | Performance improvements |\n",
    "| **MUKUL GARG** | Multi-Hidden Layer ANN (Parking Validation) | Config of model trained? Train Time? Use dropout, regularization, early stopping, and weight initialization. |\n",
    "|  | Run 3 rounds of empirical tuning on Multi-Hidden Layer ANN model | Tuning completed? | Performance improvements |\n",
    "| **AMRUTH RAJ MANCHIKANTI** | 1 Hidden Layer ANN (Parking Validation) | Config of model trained? Train Time? | Ensure >5000 data points in test set |\n",
    "|  | Run 3 rounds of empirical tuning on 1 Hidden Layer ANN model | Tuning completed? | Performance improvements |\n",
    "| **SANGEETH KUMARASINGHE** | LIME Analysis for All Models | LIME implemented for each model? | Key local interpretability findings |\n",
    "|  | SHAP Analysis for All Models | SHAP values calculated for each model? | Global and local interpretability insights |\n",
    "|  | Compare LIME and SHAP results | Comparison completed? | Key differences and similarities between LIME and SHAP interpretations |\n",
    "\n",
    "## Individual Responsibilities for All Team Members\n",
    "- Contribute to empirical tuning (3 rounds for your assigned models) and derive insights from each iteration.\n",
    "- Review and validate results for your assigned models.\n",
    "- Explain tuning approaches used in each iteration for your models.\n",
    "- Call out what else could be done to tune your models and how it would have helped (with numbers) at the top/bottom of your section in the notebook.\n",
    "- Ensure >5000 data points in the test set for your models' Confusion Matrix, AUC, etc.\n",
    "- Submit your part of the Python notebook to be run sequentially end to end and exported as an HTML file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "id": "gJMBAeHECG6I"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting lime\n",
      "  Downloading lime-0.2.0.1.tar.gz (275 kB)\n",
      "     ---------------------------------------- 0.0/275.7 kB ? eta -:--:--\n",
      "     - -------------------------------------- 10.2/275.7 kB ? eta -:--:--\n",
      "     ----- ------------------------------- 41.0/275.7 kB 487.6 kB/s eta 0:00:01\n",
      "     ------------------------------------ - 266.2/275.7 kB 2.3 MB/s eta 0:00:01\n",
      "     -------------------------------------- 275.7/275.7 kB 1.9 MB/s eta 0:00:00\n",
      "  Preparing metadata (setup.py): started\n",
      "  Preparing metadata (setup.py): finished with status 'done'\n",
      "Requirement already satisfied: matplotlib in c:\\programdata\\anaconda3\\lib\\site-packages (from lime) (3.8.4)\n",
      "Requirement already satisfied: numpy in c:\\programdata\\anaconda3\\lib\\site-packages (from lime) (1.26.4)\n",
      "Requirement already satisfied: scipy in c:\\programdata\\anaconda3\\lib\\site-packages (from lime) (1.14.1)\n",
      "Requirement already satisfied: tqdm in c:\\programdata\\anaconda3\\lib\\site-packages (from lime) (4.66.4)\n",
      "Requirement already satisfied: scikit-learn>=0.18 in c:\\programdata\\anaconda3\\lib\\site-packages (from lime) (1.4.2)\n",
      "Requirement already satisfied: scikit-image>=0.12 in c:\\programdata\\anaconda3\\lib\\site-packages (from lime) (0.23.2)\n",
      "Requirement already satisfied: networkx>=2.8 in c:\\programdata\\anaconda3\\lib\\site-packages (from scikit-image>=0.12->lime) (3.2.1)\n",
      "Requirement already satisfied: pillow>=9.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from scikit-image>=0.12->lime) (10.3.0)\n",
      "Requirement already satisfied: imageio>=2.33 in c:\\programdata\\anaconda3\\lib\\site-packages (from scikit-image>=0.12->lime) (2.33.1)\n",
      "Requirement already satisfied: tifffile>=2022.8.12 in c:\\programdata\\anaconda3\\lib\\site-packages (from scikit-image>=0.12->lime) (2023.4.12)\n",
      "Requirement already satisfied: packaging>=21 in c:\\programdata\\anaconda3\\lib\\site-packages (from scikit-image>=0.12->lime) (23.2)\n",
      "Requirement already satisfied: lazy-loader>=0.4 in c:\\programdata\\anaconda3\\lib\\site-packages (from scikit-image>=0.12->lime) (0.4)\n",
      "Requirement already satisfied: joblib>=1.2.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from scikit-learn>=0.18->lime) (1.4.2)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from scikit-learn>=0.18->lime) (2.2.0)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from matplotlib->lime) (1.2.0)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\programdata\\anaconda3\\lib\\site-packages (from matplotlib->lime) (0.11.0)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from matplotlib->lime) (4.51.0)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from matplotlib->lime) (1.4.4)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from matplotlib->lime) (3.0.9)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in c:\\programdata\\anaconda3\\lib\\site-packages (from matplotlib->lime) (2.9.0.post0)\n",
      "Requirement already satisfied: colorama in c:\\programdata\\anaconda3\\lib\\site-packages (from tqdm->lime) (0.4.6)\n",
      "Requirement already satisfied: six>=1.5 in c:\\programdata\\anaconda3\\lib\\site-packages (from python-dateutil>=2.7->matplotlib->lime) (1.16.0)\n",
      "Building wheels for collected packages: lime\n",
      "  Building wheel for lime (setup.py): started\n",
      "  Building wheel for lime (setup.py): finished with status 'done'\n",
      "  Created wheel for lime: filename=lime-0.2.0.1-py3-none-any.whl size=283842 sha256=f2e4b19ad245948a8a6a9e6924ec58b66eb828fe6c830599baee443e70371716\n",
      "  Stored in directory: c:\\users\\mukul\\appdata\\local\\pip\\cache\\wheels\\e7\\5d\\0e\\4b4fff9a47468fed5633211fb3b76d1db43fe806a17fb7486a\n",
      "Successfully built lime\n",
      "Installing collected packages: lime\n",
      "Successfully installed lime-0.2.0.1\n"
     ]
    }
   ],
   "source": [
    "!pip install lime\n",
    "#!pip install xgboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "sxlDYgOuWXRh"
   },
   "outputs": [],
   "source": [
    "# Loading data from your drive\n",
    "#from google.colab import drive\n",
    "#drive.mount(\"/content/drive\", force_remount=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "qPVofeT7d3Y8",
    "outputId": "2f472fd3-8829-4ec7-f1d4-3666c9f6815c"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     C:\\Users\\mukul\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n",
      "[nltk_data] Downloading package punkt to\n",
      "[nltk_data]     C:\\Users\\mukul\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "# Importing the necessary libraries\n",
    "import json\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import scipy\n",
    "\n",
    "from scipy.stats import chi2_contingency\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.feature_selection import SelectKBest\n",
    "from sklearn.feature_selection import chi2\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "import re\n",
    "import string\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem import PorterStemmer\n",
    "import nltk\n",
    "nltk.download('stopwords')\n",
    "\n",
    "nltk.download('punkt')\n",
    "\n",
    "#import gensim\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "import xgboost as xgb\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "\n",
    "from sklearn.metrics import confusion_matrix, accuracy_score, recall_score, f1_score, precision_score, roc_curve, auc\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "\n",
    "import lime\n",
    "import ast\n",
    "\n",
    "import pickle\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "pd.set_option('display.max_columns', None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "QiQnGxURomS1"
   },
   "outputs": [],
   "source": [
    "# pip install emoji"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "mz45dQyfootg"
   },
   "outputs": [],
   "source": [
    "#pip install wordsegment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Av_OfsfYoqSk"
   },
   "outputs": [],
   "source": [
    "#pip install contractions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "kMn467f7n2dc"
   },
   "outputs": [],
   "source": [
    "# # Load the data\n",
    "# df_chunks = []\n",
    "# for chunk in pd.read_csv('/content/extracted_data/combined_data.csv', chunksize=100000):\n",
    "#     df_chunks.append(chunk)\n",
    "# df = pd.concat(df_chunks, ignore_index=True)\n",
    "# print(\"Shape of Dataframe:\", df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 573
    },
    "id": "KpmgCqGFo6Wg",
    "outputId": "46abf9d0-706e-4f3d-ddc7-385cecd08893"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>business_id</th>\n",
       "      <th>name</th>\n",
       "      <th>address</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>postal_code</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>stars</th>\n",
       "      <th>review_count</th>\n",
       "      <th>is_open</th>\n",
       "      <th>attributes</th>\n",
       "      <th>categories</th>\n",
       "      <th>hours</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Pns2l4eNsfO8kk83dixA6A</td>\n",
       "      <td>Abby Rappoport, LAC, CMQ</td>\n",
       "      <td>1616 Chapala St, Ste 2</td>\n",
       "      <td>Santa Barbara</td>\n",
       "      <td>CA</td>\n",
       "      <td>93101</td>\n",
       "      <td>34.426679</td>\n",
       "      <td>-119.711197</td>\n",
       "      <td>5.0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>{'ByAppointmentOnly': 'True'}</td>\n",
       "      <td>Doctors, Traditional Chinese Medicine, Naturop...</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>mpf3x-BjTdTEA3yCZrAYPw</td>\n",
       "      <td>The UPS Store</td>\n",
       "      <td>87 Grasso Plaza Shopping Center</td>\n",
       "      <td>Affton</td>\n",
       "      <td>MO</td>\n",
       "      <td>63123</td>\n",
       "      <td>38.551126</td>\n",
       "      <td>-90.335695</td>\n",
       "      <td>3.0</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>{'BusinessAcceptsCreditCards': 'True'}</td>\n",
       "      <td>Shipping Centers, Local Services, Notaries, Ma...</td>\n",
       "      <td>{'Monday': '0:0-0:0', 'Tuesday': '8:0-18:30', ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tUFrWirKiKi_TAnsVWINQQ</td>\n",
       "      <td>Target</td>\n",
       "      <td>5255 E Broadway Blvd</td>\n",
       "      <td>Tucson</td>\n",
       "      <td>AZ</td>\n",
       "      <td>85711</td>\n",
       "      <td>32.223236</td>\n",
       "      <td>-110.880452</td>\n",
       "      <td>3.5</td>\n",
       "      <td>22</td>\n",
       "      <td>0</td>\n",
       "      <td>{'BikeParking': 'True', 'BusinessAcceptsCredit...</td>\n",
       "      <td>Department Stores, Shopping, Fashion, Home &amp; G...</td>\n",
       "      <td>{'Monday': '8:0-22:0', 'Tuesday': '8:0-22:0', ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>MTSW4McQd7CbVtyjqoe9mw</td>\n",
       "      <td>St Honore Pastries</td>\n",
       "      <td>935 Race St</td>\n",
       "      <td>Philadelphia</td>\n",
       "      <td>PA</td>\n",
       "      <td>19107</td>\n",
       "      <td>39.955505</td>\n",
       "      <td>-75.155564</td>\n",
       "      <td>4.0</td>\n",
       "      <td>80</td>\n",
       "      <td>1</td>\n",
       "      <td>{'RestaurantsDelivery': 'False', 'OutdoorSeati...</td>\n",
       "      <td>Restaurants, Food, Bubble Tea, Coffee &amp; Tea, B...</td>\n",
       "      <td>{'Monday': '7:0-20:0', 'Tuesday': '7:0-20:0', ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>mWMc6_wTdE0EUBKIGXDVfA</td>\n",
       "      <td>Perkiomen Valley Brewery</td>\n",
       "      <td>101 Walnut St</td>\n",
       "      <td>Green Lane</td>\n",
       "      <td>PA</td>\n",
       "      <td>18054</td>\n",
       "      <td>40.338183</td>\n",
       "      <td>-75.471659</td>\n",
       "      <td>4.5</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>{'BusinessAcceptsCreditCards': 'True', 'Wheelc...</td>\n",
       "      <td>Brewpubs, Breweries, Food</td>\n",
       "      <td>{'Wednesday': '14:0-22:0', 'Thursday': '16:0-2...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              business_id                      name  \\\n",
       "0  Pns2l4eNsfO8kk83dixA6A  Abby Rappoport, LAC, CMQ   \n",
       "1  mpf3x-BjTdTEA3yCZrAYPw             The UPS Store   \n",
       "2  tUFrWirKiKi_TAnsVWINQQ                    Target   \n",
       "3  MTSW4McQd7CbVtyjqoe9mw        St Honore Pastries   \n",
       "4  mWMc6_wTdE0EUBKIGXDVfA  Perkiomen Valley Brewery   \n",
       "\n",
       "                           address           city state postal_code  \\\n",
       "0           1616 Chapala St, Ste 2  Santa Barbara    CA       93101   \n",
       "1  87 Grasso Plaza Shopping Center         Affton    MO       63123   \n",
       "2             5255 E Broadway Blvd         Tucson    AZ       85711   \n",
       "3                      935 Race St   Philadelphia    PA       19107   \n",
       "4                    101 Walnut St     Green Lane    PA       18054   \n",
       "\n",
       "    latitude   longitude  stars  review_count  is_open  \\\n",
       "0  34.426679 -119.711197    5.0             7        0   \n",
       "1  38.551126  -90.335695    3.0            15        1   \n",
       "2  32.223236 -110.880452    3.5            22        0   \n",
       "3  39.955505  -75.155564    4.0            80        1   \n",
       "4  40.338183  -75.471659    4.5            13        1   \n",
       "\n",
       "                                          attributes  \\\n",
       "0                      {'ByAppointmentOnly': 'True'}   \n",
       "1             {'BusinessAcceptsCreditCards': 'True'}   \n",
       "2  {'BikeParking': 'True', 'BusinessAcceptsCredit...   \n",
       "3  {'RestaurantsDelivery': 'False', 'OutdoorSeati...   \n",
       "4  {'BusinessAcceptsCreditCards': 'True', 'Wheelc...   \n",
       "\n",
       "                                          categories  \\\n",
       "0  Doctors, Traditional Chinese Medicine, Naturop...   \n",
       "1  Shipping Centers, Local Services, Notaries, Ma...   \n",
       "2  Department Stores, Shopping, Fashion, Home & G...   \n",
       "3  Restaurants, Food, Bubble Tea, Coffee & Tea, B...   \n",
       "4                          Brewpubs, Breweries, Food   \n",
       "\n",
       "                                               hours  \n",
       "0                                               None  \n",
       "1  {'Monday': '0:0-0:0', 'Tuesday': '8:0-18:30', ...  \n",
       "2  {'Monday': '8:0-22:0', 'Tuesday': '8:0-22:0', ...  \n",
       "3  {'Monday': '7:0-20:0', 'Tuesday': '7:0-20:0', ...  \n",
       "4  {'Wednesday': '14:0-22:0', 'Thursday': '16:0-2...  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# Loading the Yelp business dataset JSON file\n",
    "\n",
    "file_path = 'E:\\\\Assignments\\\\ML\\\\AISC2000_GroupTrees_ASMT3\\\\yelp_dataset\\\\yelp_academic_dataset_business.json'\n",
    "with open(file_path, 'r', encoding='utf-8') as file:\n",
    "    business_data = [json.loads(line) for line in file]\n",
    "\n",
    "\n",
    "business_df = pd.DataFrame(business_data)\n",
    "\n",
    "\n",
    "business_df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "3mpZsJAKpMfF",
    "outputId": "4283c279-ff2a-42a8-f838-7684b7c8a6fa"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(150346, 14)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "business_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "V2ghTD4tqkQw",
    "outputId": "f8cde030-3073-4013-b7d3-d07d901f9e35"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 150346 entries, 0 to 150345\n",
      "Data columns (total 14 columns):\n",
      " #   Column        Non-Null Count   Dtype  \n",
      "---  ------        --------------   -----  \n",
      " 0   business_id   150346 non-null  object \n",
      " 1   name          150346 non-null  object \n",
      " 2   address       150346 non-null  object \n",
      " 3   city          150346 non-null  object \n",
      " 4   state         150346 non-null  object \n",
      " 5   postal_code   150346 non-null  object \n",
      " 6   latitude      150346 non-null  float64\n",
      " 7   longitude     150346 non-null  float64\n",
      " 8   stars         150346 non-null  float64\n",
      " 9   review_count  150346 non-null  int64  \n",
      " 10  is_open       150346 non-null  int64  \n",
      " 11  attributes    136602 non-null  object \n",
      " 12  categories    150243 non-null  object \n",
      " 13  hours         127123 non-null  object \n",
      "dtypes: float64(3), int64(2), object(9)\n",
      "memory usage: 16.1+ MB\n"
     ]
    }
   ],
   "source": [
    "business_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 711
    },
    "id": "X6MMFvT0qszT",
    "outputId": "9c37e3dc-2a0d-4dbd-90be-7efa9564504b"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0                         {'ByAppointmentOnly': 'True'}\n",
       "1                {'BusinessAcceptsCreditCards': 'True'}\n",
       "2     {'BikeParking': 'True', 'BusinessAcceptsCredit...\n",
       "3     {'RestaurantsDelivery': 'False', 'OutdoorSeati...\n",
       "4     {'BusinessAcceptsCreditCards': 'True', 'Wheelc...\n",
       "5     {'BusinessParking': 'None', 'BusinessAcceptsCr...\n",
       "6     {'BusinessAcceptsCreditCards': 'True', 'Restau...\n",
       "7                                                  None\n",
       "8     {'Caters': 'True', 'Alcohol': 'u'full_bar'', '...\n",
       "9     {'RestaurantsAttire': ''casual'', 'Restaurants...\n",
       "10    {'RestaurantsPriceRange2': '2', 'BikeParking':...\n",
       "11    {'Alcohol': ''none'', 'OutdoorSeating': 'None'...\n",
       "12    {'RestaurantsReservations': 'False', 'Restaura...\n",
       "13                        {'ByAppointmentOnly': 'True'}\n",
       "14    {'OutdoorSeating': 'False', 'RestaurantsGoodFo...\n",
       "15    {'RestaurantsReservations': 'True', 'Restauran...\n",
       "16    {'DriveThru': 'False', 'BusinessAcceptsCreditC...\n",
       "17    {'BusinessParking': '{'garage': False, 'street...\n",
       "18                                                 None\n",
       "19    {'NoiseLevel': 'u'quiet'', 'GoodForMeal': '{'d...\n",
       "Name: attributes, dtype: object"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "business_df['attributes'].head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "uujPSihWuwsN"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 330
    },
    "id": "EG3cl26muHM9",
    "outputId": "8ed3be5f-60a4-4e5e-864b-674fabd8bad2"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ByAppointmentOnly</th>\n",
       "      <th>BusinessAcceptsCreditCards</th>\n",
       "      <th>BikeParking</th>\n",
       "      <th>RestaurantsPriceRange2</th>\n",
       "      <th>CoatCheck</th>\n",
       "      <th>RestaurantsTakeOut</th>\n",
       "      <th>RestaurantsDelivery</th>\n",
       "      <th>Caters</th>\n",
       "      <th>WiFi</th>\n",
       "      <th>BusinessParking</th>\n",
       "      <th>WheelchairAccessible</th>\n",
       "      <th>HappyHour</th>\n",
       "      <th>OutdoorSeating</th>\n",
       "      <th>HasTV</th>\n",
       "      <th>RestaurantsReservations</th>\n",
       "      <th>DogsAllowed</th>\n",
       "      <th>Alcohol</th>\n",
       "      <th>GoodForKids</th>\n",
       "      <th>RestaurantsAttire</th>\n",
       "      <th>Ambience</th>\n",
       "      <th>RestaurantsTableService</th>\n",
       "      <th>RestaurantsGoodForGroups</th>\n",
       "      <th>DriveThru</th>\n",
       "      <th>NoiseLevel</th>\n",
       "      <th>GoodForMeal</th>\n",
       "      <th>BusinessAcceptsBitcoin</th>\n",
       "      <th>Smoking</th>\n",
       "      <th>Music</th>\n",
       "      <th>GoodForDancing</th>\n",
       "      <th>AcceptsInsurance</th>\n",
       "      <th>BestNights</th>\n",
       "      <th>BYOB</th>\n",
       "      <th>Corkage</th>\n",
       "      <th>BYOBCorkage</th>\n",
       "      <th>HairSpecializesIn</th>\n",
       "      <th>Open24Hours</th>\n",
       "      <th>RestaurantsCounterService</th>\n",
       "      <th>AgesAllowed</th>\n",
       "      <th>DietaryRestrictions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>u'no'</td>\n",
       "      <td>{'garage': False, 'street': False, 'validated'...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>u'free'</td>\n",
       "      <td>{'garage': False, 'street': True, 'validated':...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>u'none'</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'garage': None, 'street': None, 'validated': ...</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  ByAppointmentOnly BusinessAcceptsCreditCards BikeParking  \\\n",
       "0              True                        NaN         NaN   \n",
       "1               NaN                       True         NaN   \n",
       "2             False                       True        True   \n",
       "3             False                      False        True   \n",
       "4               NaN                       True        True   \n",
       "\n",
       "  RestaurantsPriceRange2 CoatCheck RestaurantsTakeOut RestaurantsDelivery  \\\n",
       "0                    NaN       NaN                NaN                 NaN   \n",
       "1                    NaN       NaN                NaN                 NaN   \n",
       "2                      2     False              False               False   \n",
       "3                      1       NaN               True               False   \n",
       "4                    NaN       NaN               True                 NaN   \n",
       "\n",
       "  Caters     WiFi                                    BusinessParking  \\\n",
       "0    NaN      NaN                                                NaN   \n",
       "1    NaN      NaN                                                NaN   \n",
       "2  False    u'no'  {'garage': False, 'street': False, 'validated'...   \n",
       "3   True  u'free'  {'garage': False, 'street': True, 'validated':...   \n",
       "4  False      NaN  {'garage': None, 'street': None, 'validated': ...   \n",
       "\n",
       "  WheelchairAccessible HappyHour OutdoorSeating  HasTV  \\\n",
       "0                  NaN       NaN            NaN    NaN   \n",
       "1                  NaN       NaN            NaN    NaN   \n",
       "2                 True     False          False  False   \n",
       "3                  NaN       NaN          False    NaN   \n",
       "4                 True       NaN            NaN    NaN   \n",
       "\n",
       "  RestaurantsReservations DogsAllowed  Alcohol GoodForKids RestaurantsAttire  \\\n",
       "0                     NaN         NaN      NaN         NaN               NaN   \n",
       "1                     NaN         NaN      NaN         NaN               NaN   \n",
       "2                   False       False      NaN         NaN               NaN   \n",
       "3                     NaN         NaN  u'none'         NaN               NaN   \n",
       "4                     NaN         NaN      NaN        True               NaN   \n",
       "\n",
       "  Ambience RestaurantsTableService RestaurantsGoodForGroups DriveThru  \\\n",
       "0      NaN                     NaN                      NaN       NaN   \n",
       "1      NaN                     NaN                      NaN       NaN   \n",
       "2      NaN                     NaN                      NaN       NaN   \n",
       "3      NaN                     NaN                      NaN       NaN   \n",
       "4      NaN                     NaN                      NaN       NaN   \n",
       "\n",
       "  NoiseLevel GoodForMeal BusinessAcceptsBitcoin Smoking Music GoodForDancing  \\\n",
       "0        NaN         NaN                    NaN     NaN   NaN            NaN   \n",
       "1        NaN         NaN                    NaN     NaN   NaN            NaN   \n",
       "2        NaN         NaN                    NaN     NaN   NaN            NaN   \n",
       "3        NaN         NaN                    NaN     NaN   NaN            NaN   \n",
       "4        NaN         NaN                    NaN     NaN   NaN            NaN   \n",
       "\n",
       "  AcceptsInsurance BestNights BYOB Corkage BYOBCorkage HairSpecializesIn  \\\n",
       "0              NaN        NaN  NaN     NaN         NaN               NaN   \n",
       "1              NaN        NaN  NaN     NaN         NaN               NaN   \n",
       "2              NaN        NaN  NaN     NaN         NaN               NaN   \n",
       "3              NaN        NaN  NaN     NaN         NaN               NaN   \n",
       "4              NaN        NaN  NaN     NaN         NaN               NaN   \n",
       "\n",
       "  Open24Hours RestaurantsCounterService AgesAllowed DietaryRestrictions  \n",
       "0         NaN                       NaN         NaN                 NaN  \n",
       "1         NaN                       NaN         NaN                 NaN  \n",
       "2         NaN                       NaN         NaN                 NaN  \n",
       "3         NaN                       NaN         NaN                 NaN  \n",
       "4         NaN                       NaN         NaN                 NaN  "
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "attributes_df = pd.json_normalize(business_df['attributes'])\n",
    "attributes_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "tmWL76iXuMl6",
    "outputId": "a64e8a20-f6a5-4fe2-fad0-9120484464ab"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 150346 entries, 0 to 150345\n",
      "Data columns (total 39 columns):\n",
      " #   Column                      Non-Null Count   Dtype \n",
      "---  ------                      --------------   ----- \n",
      " 0   ByAppointmentOnly           42339 non-null   object\n",
      " 1   BusinessAcceptsCreditCards  119765 non-null  object\n",
      " 2   BikeParking                 72638 non-null   object\n",
      " 3   RestaurantsPriceRange2      85314 non-null   object\n",
      " 4   CoatCheck                   5584 non-null    object\n",
      " 5   RestaurantsTakeOut          59857 non-null   object\n",
      " 6   RestaurantsDelivery         56282 non-null   object\n",
      " 7   Caters                      40127 non-null   object\n",
      " 8   WiFi                        56914 non-null   object\n",
      " 9   BusinessParking             91085 non-null   object\n",
      " 10  WheelchairAccessible        28953 non-null   object\n",
      " 11  HappyHour                   15171 non-null   object\n",
      " 12  OutdoorSeating              48802 non-null   object\n",
      " 13  HasTV                       45084 non-null   object\n",
      " 14  RestaurantsReservations     45247 non-null   object\n",
      " 15  DogsAllowed                 18284 non-null   object\n",
      " 16  Alcohol                     43189 non-null   object\n",
      " 17  GoodForKids                 53375 non-null   object\n",
      " 18  RestaurantsAttire           39255 non-null   object\n",
      " 19  Ambience                    44279 non-null   object\n",
      " 20  RestaurantsTableService     19982 non-null   object\n",
      " 21  RestaurantsGoodForGroups    44170 non-null   object\n",
      " 22  DriveThru                   7760 non-null    object\n",
      " 23  NoiseLevel                  37993 non-null   object\n",
      " 24  GoodForMeal                 29087 non-null   object\n",
      " 25  BusinessAcceptsBitcoin      17430 non-null   object\n",
      " 26  Smoking                     4567 non-null    object\n",
      " 27  Music                       7521 non-null    object\n",
      " 28  GoodForDancing              4628 non-null    object\n",
      " 29  AcceptsInsurance            5713 non-null    object\n",
      " 30  BestNights                  5694 non-null    object\n",
      " 31  BYOB                        4451 non-null    object\n",
      " 32  Corkage                     3553 non-null    object\n",
      " 33  BYOBCorkage                 1444 non-null    object\n",
      " 34  HairSpecializesIn           1065 non-null    object\n",
      " 35  Open24Hours                 39 non-null      object\n",
      " 36  RestaurantsCounterService   19 non-null      object\n",
      " 37  AgesAllowed                 129 non-null     object\n",
      " 38  DietaryRestrictions         31 non-null      object\n",
      "dtypes: object(39)\n",
      "memory usage: 44.7+ MB\n"
     ]
    }
   ],
   "source": [
    "attributes_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "id": "2rsm6mdLuSw6"
   },
   "outputs": [],
   "source": [
    "# replacing nan values with empty dictionary\n",
    "attributes_df['BusinessParking'] = attributes_df['BusinessParking'].apply(lambda x: {} if pd.isna(x) else x)\n",
    "\n",
    "\n",
    "def convert_to_dict(value):\n",
    "    if isinstance(value, dict):\n",
    "        return value\n",
    "    elif isinstance(value, str):\n",
    "        try:\n",
    "\n",
    "            return ast.literal_eval(value)\n",
    "        except (ValueError, SyntaxError):\n",
    "\n",
    "            return {}\n",
    "    else:\n",
    "\n",
    "        return {}\n",
    "\n",
    "\n",
    "attributes_df['BusinessParking'] = attributes_df['BusinessParking'].apply(convert_to_dict)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 206
    },
    "id": "TwTbwO4pwnNw",
    "outputId": "24f9bf8a-9037-446b-8c11-25fb3661bee8"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BusinessParking_garage</th>\n",
       "      <th>BusinessParking_street</th>\n",
       "      <th>BusinessParking_validated</th>\n",
       "      <th>BusinessParking_lot</th>\n",
       "      <th>BusinessParking_valet</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  BusinessParking_garage BusinessParking_street BusinessParking_validated  \\\n",
       "0                    NaN                    NaN                       NaN   \n",
       "1                    NaN                    NaN                       NaN   \n",
       "2                  False                  False                     False   \n",
       "3                  False                   True                     False   \n",
       "4                   None                   None                      None   \n",
       "\n",
       "  BusinessParking_lot BusinessParking_valet  \n",
       "0                 NaN                   NaN  \n",
       "1                 NaN                   NaN  \n",
       "2                True                 False  \n",
       "3               False                 False  \n",
       "4                True                 False  "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "parking_df = pd.json_normalize(attributes_df['BusinessParking'])\n",
    "\n",
    "\n",
    "\n",
    "parking_df.columns = [f'BusinessParking_{col}' for col in parking_df.columns]\n",
    "\n",
    "parking_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "id": "XBJJ4zfswU4A"
   },
   "outputs": [],
   "source": [
    "attributes_df = pd.concat([attributes_df.drop(columns=['BusinessParking']), parking_df], axis=1)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 226
    },
    "id": "mwu-VuqsxwZw",
    "outputId": "291bc219-2cc8-41ab-aa32-68d7c5611e4f"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ByAppointmentOnly</th>\n",
       "      <th>BusinessAcceptsCreditCards</th>\n",
       "      <th>BikeParking</th>\n",
       "      <th>RestaurantsPriceRange2</th>\n",
       "      <th>CoatCheck</th>\n",
       "      <th>RestaurantsTakeOut</th>\n",
       "      <th>RestaurantsDelivery</th>\n",
       "      <th>Caters</th>\n",
       "      <th>WiFi</th>\n",
       "      <th>WheelchairAccessible</th>\n",
       "      <th>HappyHour</th>\n",
       "      <th>OutdoorSeating</th>\n",
       "      <th>HasTV</th>\n",
       "      <th>RestaurantsReservations</th>\n",
       "      <th>DogsAllowed</th>\n",
       "      <th>Alcohol</th>\n",
       "      <th>GoodForKids</th>\n",
       "      <th>RestaurantsAttire</th>\n",
       "      <th>Ambience</th>\n",
       "      <th>RestaurantsTableService</th>\n",
       "      <th>RestaurantsGoodForGroups</th>\n",
       "      <th>DriveThru</th>\n",
       "      <th>NoiseLevel</th>\n",
       "      <th>GoodForMeal</th>\n",
       "      <th>BusinessAcceptsBitcoin</th>\n",
       "      <th>Smoking</th>\n",
       "      <th>Music</th>\n",
       "      <th>GoodForDancing</th>\n",
       "      <th>AcceptsInsurance</th>\n",
       "      <th>BestNights</th>\n",
       "      <th>BYOB</th>\n",
       "      <th>Corkage</th>\n",
       "      <th>BYOBCorkage</th>\n",
       "      <th>HairSpecializesIn</th>\n",
       "      <th>Open24Hours</th>\n",
       "      <th>RestaurantsCounterService</th>\n",
       "      <th>AgesAllowed</th>\n",
       "      <th>DietaryRestrictions</th>\n",
       "      <th>BusinessParking_garage</th>\n",
       "      <th>BusinessParking_street</th>\n",
       "      <th>BusinessParking_validated</th>\n",
       "      <th>BusinessParking_lot</th>\n",
       "      <th>BusinessParking_valet</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>u'no'</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>u'free'</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>u'none'</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  ByAppointmentOnly BusinessAcceptsCreditCards BikeParking  \\\n",
       "0              True                        NaN         NaN   \n",
       "1               NaN                       True         NaN   \n",
       "2             False                       True        True   \n",
       "3             False                      False        True   \n",
       "4               NaN                       True        True   \n",
       "\n",
       "  RestaurantsPriceRange2 CoatCheck RestaurantsTakeOut RestaurantsDelivery  \\\n",
       "0                    NaN       NaN                NaN                 NaN   \n",
       "1                    NaN       NaN                NaN                 NaN   \n",
       "2                      2     False              False               False   \n",
       "3                      1       NaN               True               False   \n",
       "4                    NaN       NaN               True                 NaN   \n",
       "\n",
       "  Caters     WiFi WheelchairAccessible HappyHour OutdoorSeating  HasTV  \\\n",
       "0    NaN      NaN                  NaN       NaN            NaN    NaN   \n",
       "1    NaN      NaN                  NaN       NaN            NaN    NaN   \n",
       "2  False    u'no'                 True     False          False  False   \n",
       "3   True  u'free'                  NaN       NaN          False    NaN   \n",
       "4  False      NaN                 True       NaN            NaN    NaN   \n",
       "\n",
       "  RestaurantsReservations DogsAllowed  Alcohol GoodForKids RestaurantsAttire  \\\n",
       "0                     NaN         NaN      NaN         NaN               NaN   \n",
       "1                     NaN         NaN      NaN         NaN               NaN   \n",
       "2                   False       False      NaN         NaN               NaN   \n",
       "3                     NaN         NaN  u'none'         NaN               NaN   \n",
       "4                     NaN         NaN      NaN        True               NaN   \n",
       "\n",
       "  Ambience RestaurantsTableService RestaurantsGoodForGroups DriveThru  \\\n",
       "0      NaN                     NaN                      NaN       NaN   \n",
       "1      NaN                     NaN                      NaN       NaN   \n",
       "2      NaN                     NaN                      NaN       NaN   \n",
       "3      NaN                     NaN                      NaN       NaN   \n",
       "4      NaN                     NaN                      NaN       NaN   \n",
       "\n",
       "  NoiseLevel GoodForMeal BusinessAcceptsBitcoin Smoking Music GoodForDancing  \\\n",
       "0        NaN         NaN                    NaN     NaN   NaN            NaN   \n",
       "1        NaN         NaN                    NaN     NaN   NaN            NaN   \n",
       "2        NaN         NaN                    NaN     NaN   NaN            NaN   \n",
       "3        NaN         NaN                    NaN     NaN   NaN            NaN   \n",
       "4        NaN         NaN                    NaN     NaN   NaN            NaN   \n",
       "\n",
       "  AcceptsInsurance BestNights BYOB Corkage BYOBCorkage HairSpecializesIn  \\\n",
       "0              NaN        NaN  NaN     NaN         NaN               NaN   \n",
       "1              NaN        NaN  NaN     NaN         NaN               NaN   \n",
       "2              NaN        NaN  NaN     NaN         NaN               NaN   \n",
       "3              NaN        NaN  NaN     NaN         NaN               NaN   \n",
       "4              NaN        NaN  NaN     NaN         NaN               NaN   \n",
       "\n",
       "  Open24Hours RestaurantsCounterService AgesAllowed DietaryRestrictions  \\\n",
       "0         NaN                       NaN         NaN                 NaN   \n",
       "1         NaN                       NaN         NaN                 NaN   \n",
       "2         NaN                       NaN         NaN                 NaN   \n",
       "3         NaN                       NaN         NaN                 NaN   \n",
       "4         NaN                       NaN         NaN                 NaN   \n",
       "\n",
       "  BusinessParking_garage BusinessParking_street BusinessParking_validated  \\\n",
       "0                    NaN                    NaN                       NaN   \n",
       "1                    NaN                    NaN                       NaN   \n",
       "2                  False                  False                     False   \n",
       "3                  False                   True                     False   \n",
       "4                   None                   None                      None   \n",
       "\n",
       "  BusinessParking_lot BusinessParking_valet  \n",
       "0                 NaN                   NaN  \n",
       "1                 NaN                   NaN  \n",
       "2                True                 False  \n",
       "3               False                 False  \n",
       "4                True                 False  "
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "attributes_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "_JTqt0R8xyio",
    "outputId": "ab4378bc-de31-4439-e679-30590aa6c8bb"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 150346 entries, 0 to 150345\n",
      "Data columns (total 43 columns):\n",
      " #   Column                      Non-Null Count   Dtype \n",
      "---  ------                      --------------   ----- \n",
      " 0   ByAppointmentOnly           42339 non-null   object\n",
      " 1   BusinessAcceptsCreditCards  119765 non-null  object\n",
      " 2   BikeParking                 72638 non-null   object\n",
      " 3   RestaurantsPriceRange2      85314 non-null   object\n",
      " 4   CoatCheck                   5584 non-null    object\n",
      " 5   RestaurantsTakeOut          59857 non-null   object\n",
      " 6   RestaurantsDelivery         56282 non-null   object\n",
      " 7   Caters                      40127 non-null   object\n",
      " 8   WiFi                        56914 non-null   object\n",
      " 9   WheelchairAccessible        28953 non-null   object\n",
      " 10  HappyHour                   15171 non-null   object\n",
      " 11  OutdoorSeating              48802 non-null   object\n",
      " 12  HasTV                       45084 non-null   object\n",
      " 13  RestaurantsReservations     45247 non-null   object\n",
      " 14  DogsAllowed                 18284 non-null   object\n",
      " 15  Alcohol                     43189 non-null   object\n",
      " 16  GoodForKids                 53375 non-null   object\n",
      " 17  RestaurantsAttire           39255 non-null   object\n",
      " 18  Ambience                    44279 non-null   object\n",
      " 19  RestaurantsTableService     19982 non-null   object\n",
      " 20  RestaurantsGoodForGroups    44170 non-null   object\n",
      " 21  DriveThru                   7760 non-null    object\n",
      " 22  NoiseLevel                  37993 non-null   object\n",
      " 23  GoodForMeal                 29087 non-null   object\n",
      " 24  BusinessAcceptsBitcoin      17430 non-null   object\n",
      " 25  Smoking                     4567 non-null    object\n",
      " 26  Music                       7521 non-null    object\n",
      " 27  GoodForDancing              4628 non-null    object\n",
      " 28  AcceptsInsurance            5713 non-null    object\n",
      " 29  BestNights                  5694 non-null    object\n",
      " 30  BYOB                        4451 non-null    object\n",
      " 31  Corkage                     3553 non-null    object\n",
      " 32  BYOBCorkage                 1444 non-null    object\n",
      " 33  HairSpecializesIn           1065 non-null    object\n",
      " 34  Open24Hours                 39 non-null      object\n",
      " 35  RestaurantsCounterService   19 non-null      object\n",
      " 36  AgesAllowed                 129 non-null     object\n",
      " 37  DietaryRestrictions         31 non-null      object\n",
      " 38  BusinessParking_garage      86885 non-null   object\n",
      " 39  BusinessParking_street      85474 non-null   object\n",
      " 40  BusinessParking_validated   86654 non-null   object\n",
      " 41  BusinessParking_lot         86516 non-null   object\n",
      " 42  BusinessParking_valet       88795 non-null   object\n",
      "dtypes: object(43)\n",
      "memory usage: 49.3+ MB\n"
     ]
    }
   ],
   "source": [
    "attributes_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 573
    },
    "id": "L2euKfpY0BmD",
    "outputId": "ad75c896-1dac-4d31-a93d-b10fdd658678"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>business_id</th>\n",
       "      <th>name</th>\n",
       "      <th>address</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>postal_code</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>stars</th>\n",
       "      <th>review_count</th>\n",
       "      <th>is_open</th>\n",
       "      <th>attributes</th>\n",
       "      <th>categories</th>\n",
       "      <th>hours</th>\n",
       "      <th>ByAppointmentOnly</th>\n",
       "      <th>BusinessAcceptsCreditCards</th>\n",
       "      <th>BikeParking</th>\n",
       "      <th>RestaurantsPriceRange2</th>\n",
       "      <th>CoatCheck</th>\n",
       "      <th>RestaurantsTakeOut</th>\n",
       "      <th>RestaurantsDelivery</th>\n",
       "      <th>Caters</th>\n",
       "      <th>WiFi</th>\n",
       "      <th>WheelchairAccessible</th>\n",
       "      <th>HappyHour</th>\n",
       "      <th>OutdoorSeating</th>\n",
       "      <th>HasTV</th>\n",
       "      <th>RestaurantsReservations</th>\n",
       "      <th>DogsAllowed</th>\n",
       "      <th>Alcohol</th>\n",
       "      <th>GoodForKids</th>\n",
       "      <th>RestaurantsAttire</th>\n",
       "      <th>Ambience</th>\n",
       "      <th>RestaurantsTableService</th>\n",
       "      <th>RestaurantsGoodForGroups</th>\n",
       "      <th>DriveThru</th>\n",
       "      <th>NoiseLevel</th>\n",
       "      <th>GoodForMeal</th>\n",
       "      <th>BusinessAcceptsBitcoin</th>\n",
       "      <th>Smoking</th>\n",
       "      <th>Music</th>\n",
       "      <th>GoodForDancing</th>\n",
       "      <th>AcceptsInsurance</th>\n",
       "      <th>BestNights</th>\n",
       "      <th>BYOB</th>\n",
       "      <th>Corkage</th>\n",
       "      <th>BYOBCorkage</th>\n",
       "      <th>HairSpecializesIn</th>\n",
       "      <th>Open24Hours</th>\n",
       "      <th>RestaurantsCounterService</th>\n",
       "      <th>AgesAllowed</th>\n",
       "      <th>DietaryRestrictions</th>\n",
       "      <th>BusinessParking_garage</th>\n",
       "      <th>BusinessParking_street</th>\n",
       "      <th>BusinessParking_validated</th>\n",
       "      <th>BusinessParking_lot</th>\n",
       "      <th>BusinessParking_valet</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Pns2l4eNsfO8kk83dixA6A</td>\n",
       "      <td>Abby Rappoport, LAC, CMQ</td>\n",
       "      <td>1616 Chapala St, Ste 2</td>\n",
       "      <td>Santa Barbara</td>\n",
       "      <td>CA</td>\n",
       "      <td>93101</td>\n",
       "      <td>34.426679</td>\n",
       "      <td>-119.711197</td>\n",
       "      <td>5.0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>{'ByAppointmentOnly': 'True'}</td>\n",
       "      <td>Doctors, Traditional Chinese Medicine, Naturop...</td>\n",
       "      <td>None</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>mpf3x-BjTdTEA3yCZrAYPw</td>\n",
       "      <td>The UPS Store</td>\n",
       "      <td>87 Grasso Plaza Shopping Center</td>\n",
       "      <td>Affton</td>\n",
       "      <td>MO</td>\n",
       "      <td>63123</td>\n",
       "      <td>38.551126</td>\n",
       "      <td>-90.335695</td>\n",
       "      <td>3.0</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>{'BusinessAcceptsCreditCards': 'True'}</td>\n",
       "      <td>Shipping Centers, Local Services, Notaries, Ma...</td>\n",
       "      <td>{'Monday': '0:0-0:0', 'Tuesday': '8:0-18:30', ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tUFrWirKiKi_TAnsVWINQQ</td>\n",
       "      <td>Target</td>\n",
       "      <td>5255 E Broadway Blvd</td>\n",
       "      <td>Tucson</td>\n",
       "      <td>AZ</td>\n",
       "      <td>85711</td>\n",
       "      <td>32.223236</td>\n",
       "      <td>-110.880452</td>\n",
       "      <td>3.5</td>\n",
       "      <td>22</td>\n",
       "      <td>0</td>\n",
       "      <td>{'BikeParking': 'True', 'BusinessAcceptsCredit...</td>\n",
       "      <td>Department Stores, Shopping, Fashion, Home &amp; G...</td>\n",
       "      <td>{'Monday': '8:0-22:0', 'Tuesday': '8:0-22:0', ...</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>u'no'</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>MTSW4McQd7CbVtyjqoe9mw</td>\n",
       "      <td>St Honore Pastries</td>\n",
       "      <td>935 Race St</td>\n",
       "      <td>Philadelphia</td>\n",
       "      <td>PA</td>\n",
       "      <td>19107</td>\n",
       "      <td>39.955505</td>\n",
       "      <td>-75.155564</td>\n",
       "      <td>4.0</td>\n",
       "      <td>80</td>\n",
       "      <td>1</td>\n",
       "      <td>{'RestaurantsDelivery': 'False', 'OutdoorSeati...</td>\n",
       "      <td>Restaurants, Food, Bubble Tea, Coffee &amp; Tea, B...</td>\n",
       "      <td>{'Monday': '7:0-20:0', 'Tuesday': '7:0-20:0', ...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>u'free'</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>u'none'</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>mWMc6_wTdE0EUBKIGXDVfA</td>\n",
       "      <td>Perkiomen Valley Brewery</td>\n",
       "      <td>101 Walnut St</td>\n",
       "      <td>Green Lane</td>\n",
       "      <td>PA</td>\n",
       "      <td>18054</td>\n",
       "      <td>40.338183</td>\n",
       "      <td>-75.471659</td>\n",
       "      <td>4.5</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>{'BusinessAcceptsCreditCards': 'True', 'Wheelc...</td>\n",
       "      <td>Brewpubs, Breweries, Food</td>\n",
       "      <td>{'Wednesday': '14:0-22:0', 'Thursday': '16:0-2...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              business_id                      name  \\\n",
       "0  Pns2l4eNsfO8kk83dixA6A  Abby Rappoport, LAC, CMQ   \n",
       "1  mpf3x-BjTdTEA3yCZrAYPw             The UPS Store   \n",
       "2  tUFrWirKiKi_TAnsVWINQQ                    Target   \n",
       "3  MTSW4McQd7CbVtyjqoe9mw        St Honore Pastries   \n",
       "4  mWMc6_wTdE0EUBKIGXDVfA  Perkiomen Valley Brewery   \n",
       "\n",
       "                           address           city state postal_code  \\\n",
       "0           1616 Chapala St, Ste 2  Santa Barbara    CA       93101   \n",
       "1  87 Grasso Plaza Shopping Center         Affton    MO       63123   \n",
       "2             5255 E Broadway Blvd         Tucson    AZ       85711   \n",
       "3                      935 Race St   Philadelphia    PA       19107   \n",
       "4                    101 Walnut St     Green Lane    PA       18054   \n",
       "\n",
       "    latitude   longitude  stars  review_count  is_open  \\\n",
       "0  34.426679 -119.711197    5.0             7        0   \n",
       "1  38.551126  -90.335695    3.0            15        1   \n",
       "2  32.223236 -110.880452    3.5            22        0   \n",
       "3  39.955505  -75.155564    4.0            80        1   \n",
       "4  40.338183  -75.471659    4.5            13        1   \n",
       "\n",
       "                                          attributes  \\\n",
       "0                      {'ByAppointmentOnly': 'True'}   \n",
       "1             {'BusinessAcceptsCreditCards': 'True'}   \n",
       "2  {'BikeParking': 'True', 'BusinessAcceptsCredit...   \n",
       "3  {'RestaurantsDelivery': 'False', 'OutdoorSeati...   \n",
       "4  {'BusinessAcceptsCreditCards': 'True', 'Wheelc...   \n",
       "\n",
       "                                          categories  \\\n",
       "0  Doctors, Traditional Chinese Medicine, Naturop...   \n",
       "1  Shipping Centers, Local Services, Notaries, Ma...   \n",
       "2  Department Stores, Shopping, Fashion, Home & G...   \n",
       "3  Restaurants, Food, Bubble Tea, Coffee & Tea, B...   \n",
       "4                          Brewpubs, Breweries, Food   \n",
       "\n",
       "                                               hours ByAppointmentOnly  \\\n",
       "0                                               None              True   \n",
       "1  {'Monday': '0:0-0:0', 'Tuesday': '8:0-18:30', ...               NaN   \n",
       "2  {'Monday': '8:0-22:0', 'Tuesday': '8:0-22:0', ...             False   \n",
       "3  {'Monday': '7:0-20:0', 'Tuesday': '7:0-20:0', ...             False   \n",
       "4  {'Wednesday': '14:0-22:0', 'Thursday': '16:0-2...               NaN   \n",
       "\n",
       "  BusinessAcceptsCreditCards BikeParking RestaurantsPriceRange2 CoatCheck  \\\n",
       "0                        NaN         NaN                    NaN       NaN   \n",
       "1                       True         NaN                    NaN       NaN   \n",
       "2                       True        True                      2     False   \n",
       "3                      False        True                      1       NaN   \n",
       "4                       True        True                    NaN       NaN   \n",
       "\n",
       "  RestaurantsTakeOut RestaurantsDelivery Caters     WiFi WheelchairAccessible  \\\n",
       "0                NaN                 NaN    NaN      NaN                  NaN   \n",
       "1                NaN                 NaN    NaN      NaN                  NaN   \n",
       "2              False               False  False    u'no'                 True   \n",
       "3               True               False   True  u'free'                  NaN   \n",
       "4               True                 NaN  False      NaN                 True   \n",
       "\n",
       "  HappyHour OutdoorSeating  HasTV RestaurantsReservations DogsAllowed  \\\n",
       "0       NaN            NaN    NaN                     NaN         NaN   \n",
       "1       NaN            NaN    NaN                     NaN         NaN   \n",
       "2     False          False  False                   False       False   \n",
       "3       NaN          False    NaN                     NaN         NaN   \n",
       "4       NaN            NaN    NaN                     NaN         NaN   \n",
       "\n",
       "   Alcohol GoodForKids RestaurantsAttire Ambience RestaurantsTableService  \\\n",
       "0      NaN         NaN               NaN      NaN                     NaN   \n",
       "1      NaN         NaN               NaN      NaN                     NaN   \n",
       "2      NaN         NaN               NaN      NaN                     NaN   \n",
       "3  u'none'         NaN               NaN      NaN                     NaN   \n",
       "4      NaN        True               NaN      NaN                     NaN   \n",
       "\n",
       "  RestaurantsGoodForGroups DriveThru NoiseLevel GoodForMeal  \\\n",
       "0                      NaN       NaN        NaN         NaN   \n",
       "1                      NaN       NaN        NaN         NaN   \n",
       "2                      NaN       NaN        NaN         NaN   \n",
       "3                      NaN       NaN        NaN         NaN   \n",
       "4                      NaN       NaN        NaN         NaN   \n",
       "\n",
       "  BusinessAcceptsBitcoin Smoking Music GoodForDancing AcceptsInsurance  \\\n",
       "0                    NaN     NaN   NaN            NaN              NaN   \n",
       "1                    NaN     NaN   NaN            NaN              NaN   \n",
       "2                    NaN     NaN   NaN            NaN              NaN   \n",
       "3                    NaN     NaN   NaN            NaN              NaN   \n",
       "4                    NaN     NaN   NaN            NaN              NaN   \n",
       "\n",
       "  BestNights BYOB Corkage BYOBCorkage HairSpecializesIn Open24Hours  \\\n",
       "0        NaN  NaN     NaN         NaN               NaN         NaN   \n",
       "1        NaN  NaN     NaN         NaN               NaN         NaN   \n",
       "2        NaN  NaN     NaN         NaN               NaN         NaN   \n",
       "3        NaN  NaN     NaN         NaN               NaN         NaN   \n",
       "4        NaN  NaN     NaN         NaN               NaN         NaN   \n",
       "\n",
       "  RestaurantsCounterService AgesAllowed DietaryRestrictions  \\\n",
       "0                       NaN         NaN                 NaN   \n",
       "1                       NaN         NaN                 NaN   \n",
       "2                       NaN         NaN                 NaN   \n",
       "3                       NaN         NaN                 NaN   \n",
       "4                       NaN         NaN                 NaN   \n",
       "\n",
       "  BusinessParking_garage BusinessParking_street BusinessParking_validated  \\\n",
       "0                    NaN                    NaN                       NaN   \n",
       "1                    NaN                    NaN                       NaN   \n",
       "2                  False                  False                     False   \n",
       "3                  False                   True                     False   \n",
       "4                   None                   None                      None   \n",
       "\n",
       "  BusinessParking_lot BusinessParking_valet  \n",
       "0                 NaN                   NaN  \n",
       "1                 NaN                   NaN  \n",
       "2                True                 False  \n",
       "3               False                 False  \n",
       "4                True                 False  "
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_df = pd.concat([business_df, attributes_df], axis=1)\n",
    "merged_df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "0lP0J65G4QFh",
    "outputId": "c7696630-1a1d-4679-ca07-f136fbf8facb"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 150346 entries, 0 to 150345\n",
      "Data columns (total 57 columns):\n",
      " #   Column                      Non-Null Count   Dtype  \n",
      "---  ------                      --------------   -----  \n",
      " 0   business_id                 150346 non-null  object \n",
      " 1   name                        150346 non-null  object \n",
      " 2   address                     150346 non-null  object \n",
      " 3   city                        150346 non-null  object \n",
      " 4   state                       150346 non-null  object \n",
      " 5   postal_code                 150346 non-null  object \n",
      " 6   latitude                    150346 non-null  float64\n",
      " 7   longitude                   150346 non-null  float64\n",
      " 8   stars                       150346 non-null  float64\n",
      " 9   review_count                150346 non-null  int64  \n",
      " 10  is_open                     150346 non-null  int64  \n",
      " 11  attributes                  136602 non-null  object \n",
      " 12  categories                  150243 non-null  object \n",
      " 13  hours                       127123 non-null  object \n",
      " 14  ByAppointmentOnly           42339 non-null   object \n",
      " 15  BusinessAcceptsCreditCards  119765 non-null  object \n",
      " 16  BikeParking                 72638 non-null   object \n",
      " 17  RestaurantsPriceRange2      85314 non-null   object \n",
      " 18  CoatCheck                   5584 non-null    object \n",
      " 19  RestaurantsTakeOut          59857 non-null   object \n",
      " 20  RestaurantsDelivery         56282 non-null   object \n",
      " 21  Caters                      40127 non-null   object \n",
      " 22  WiFi                        56914 non-null   object \n",
      " 23  WheelchairAccessible        28953 non-null   object \n",
      " 24  HappyHour                   15171 non-null   object \n",
      " 25  OutdoorSeating              48802 non-null   object \n",
      " 26  HasTV                       45084 non-null   object \n",
      " 27  RestaurantsReservations     45247 non-null   object \n",
      " 28  DogsAllowed                 18284 non-null   object \n",
      " 29  Alcohol                     43189 non-null   object \n",
      " 30  GoodForKids                 53375 non-null   object \n",
      " 31  RestaurantsAttire           39255 non-null   object \n",
      " 32  Ambience                    44279 non-null   object \n",
      " 33  RestaurantsTableService     19982 non-null   object \n",
      " 34  RestaurantsGoodForGroups    44170 non-null   object \n",
      " 35  DriveThru                   7760 non-null    object \n",
      " 36  NoiseLevel                  37993 non-null   object \n",
      " 37  GoodForMeal                 29087 non-null   object \n",
      " 38  BusinessAcceptsBitcoin      17430 non-null   object \n",
      " 39  Smoking                     4567 non-null    object \n",
      " 40  Music                       7521 non-null    object \n",
      " 41  GoodForDancing              4628 non-null    object \n",
      " 42  AcceptsInsurance            5713 non-null    object \n",
      " 43  BestNights                  5694 non-null    object \n",
      " 44  BYOB                        4451 non-null    object \n",
      " 45  Corkage                     3553 non-null    object \n",
      " 46  BYOBCorkage                 1444 non-null    object \n",
      " 47  HairSpecializesIn           1065 non-null    object \n",
      " 48  Open24Hours                 39 non-null      object \n",
      " 49  RestaurantsCounterService   19 non-null      object \n",
      " 50  AgesAllowed                 129 non-null     object \n",
      " 51  DietaryRestrictions         31 non-null      object \n",
      " 52  BusinessParking_garage      86885 non-null   object \n",
      " 53  BusinessParking_street      85474 non-null   object \n",
      " 54  BusinessParking_validated   86654 non-null   object \n",
      " 55  BusinessParking_lot         86516 non-null   object \n",
      " 56  BusinessParking_valet       88795 non-null   object \n",
      "dtypes: float64(3), int64(2), object(52)\n",
      "memory usage: 65.4+ MB\n"
     ]
    }
   ],
   "source": [
    "merged_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 573
    },
    "id": "9M7EQhyi4U3j",
    "outputId": "1486ecb2-2eed-41e7-f1a4-495769e0607b"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>business_id</th>\n",
       "      <th>name</th>\n",
       "      <th>address</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>postal_code</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>stars</th>\n",
       "      <th>review_count</th>\n",
       "      <th>is_open</th>\n",
       "      <th>attributes</th>\n",
       "      <th>categories</th>\n",
       "      <th>hours</th>\n",
       "      <th>ByAppointmentOnly</th>\n",
       "      <th>BusinessAcceptsCreditCards</th>\n",
       "      <th>BikeParking</th>\n",
       "      <th>RestaurantsPriceRange2</th>\n",
       "      <th>CoatCheck</th>\n",
       "      <th>RestaurantsTakeOut</th>\n",
       "      <th>RestaurantsDelivery</th>\n",
       "      <th>Caters</th>\n",
       "      <th>WiFi</th>\n",
       "      <th>WheelchairAccessible</th>\n",
       "      <th>HappyHour</th>\n",
       "      <th>OutdoorSeating</th>\n",
       "      <th>HasTV</th>\n",
       "      <th>RestaurantsReservations</th>\n",
       "      <th>DogsAllowed</th>\n",
       "      <th>Alcohol</th>\n",
       "      <th>GoodForKids</th>\n",
       "      <th>RestaurantsAttire</th>\n",
       "      <th>Ambience</th>\n",
       "      <th>RestaurantsTableService</th>\n",
       "      <th>RestaurantsGoodForGroups</th>\n",
       "      <th>DriveThru</th>\n",
       "      <th>NoiseLevel</th>\n",
       "      <th>GoodForMeal</th>\n",
       "      <th>BusinessAcceptsBitcoin</th>\n",
       "      <th>Smoking</th>\n",
       "      <th>Music</th>\n",
       "      <th>GoodForDancing</th>\n",
       "      <th>AcceptsInsurance</th>\n",
       "      <th>BestNights</th>\n",
       "      <th>BYOB</th>\n",
       "      <th>Corkage</th>\n",
       "      <th>BYOBCorkage</th>\n",
       "      <th>HairSpecializesIn</th>\n",
       "      <th>Open24Hours</th>\n",
       "      <th>RestaurantsCounterService</th>\n",
       "      <th>AgesAllowed</th>\n",
       "      <th>DietaryRestrictions</th>\n",
       "      <th>BusinessParking_garage</th>\n",
       "      <th>BusinessParking_street</th>\n",
       "      <th>BusinessParking_validated</th>\n",
       "      <th>BusinessParking_lot</th>\n",
       "      <th>BusinessParking_valet</th>\n",
       "      <th>has_parking</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Pns2l4eNsfO8kk83dixA6A</td>\n",
       "      <td>Abby Rappoport, LAC, CMQ</td>\n",
       "      <td>1616 Chapala St, Ste 2</td>\n",
       "      <td>Santa Barbara</td>\n",
       "      <td>CA</td>\n",
       "      <td>93101</td>\n",
       "      <td>34.426679</td>\n",
       "      <td>-119.711197</td>\n",
       "      <td>5.0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>{'ByAppointmentOnly': 'True'}</td>\n",
       "      <td>Doctors, Traditional Chinese Medicine, Naturop...</td>\n",
       "      <td>None</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>mpf3x-BjTdTEA3yCZrAYPw</td>\n",
       "      <td>The UPS Store</td>\n",
       "      <td>87 Grasso Plaza Shopping Center</td>\n",
       "      <td>Affton</td>\n",
       "      <td>MO</td>\n",
       "      <td>63123</td>\n",
       "      <td>38.551126</td>\n",
       "      <td>-90.335695</td>\n",
       "      <td>3.0</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>{'BusinessAcceptsCreditCards': 'True'}</td>\n",
       "      <td>Shipping Centers, Local Services, Notaries, Ma...</td>\n",
       "      <td>{'Monday': '0:0-0:0', 'Tuesday': '8:0-18:30', ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tUFrWirKiKi_TAnsVWINQQ</td>\n",
       "      <td>Target</td>\n",
       "      <td>5255 E Broadway Blvd</td>\n",
       "      <td>Tucson</td>\n",
       "      <td>AZ</td>\n",
       "      <td>85711</td>\n",
       "      <td>32.223236</td>\n",
       "      <td>-110.880452</td>\n",
       "      <td>3.5</td>\n",
       "      <td>22</td>\n",
       "      <td>0</td>\n",
       "      <td>{'BikeParking': 'True', 'BusinessAcceptsCredit...</td>\n",
       "      <td>Department Stores, Shopping, Fashion, Home &amp; G...</td>\n",
       "      <td>{'Monday': '8:0-22:0', 'Tuesday': '8:0-22:0', ...</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>u'no'</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>MTSW4McQd7CbVtyjqoe9mw</td>\n",
       "      <td>St Honore Pastries</td>\n",
       "      <td>935 Race St</td>\n",
       "      <td>Philadelphia</td>\n",
       "      <td>PA</td>\n",
       "      <td>19107</td>\n",
       "      <td>39.955505</td>\n",
       "      <td>-75.155564</td>\n",
       "      <td>4.0</td>\n",
       "      <td>80</td>\n",
       "      <td>1</td>\n",
       "      <td>{'RestaurantsDelivery': 'False', 'OutdoorSeati...</td>\n",
       "      <td>Restaurants, Food, Bubble Tea, Coffee &amp; Tea, B...</td>\n",
       "      <td>{'Monday': '7:0-20:0', 'Tuesday': '7:0-20:0', ...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>u'free'</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>u'none'</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>mWMc6_wTdE0EUBKIGXDVfA</td>\n",
       "      <td>Perkiomen Valley Brewery</td>\n",
       "      <td>101 Walnut St</td>\n",
       "      <td>Green Lane</td>\n",
       "      <td>PA</td>\n",
       "      <td>18054</td>\n",
       "      <td>40.338183</td>\n",
       "      <td>-75.471659</td>\n",
       "      <td>4.5</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>{'BusinessAcceptsCreditCards': 'True', 'Wheelc...</td>\n",
       "      <td>Brewpubs, Breweries, Food</td>\n",
       "      <td>{'Wednesday': '14:0-22:0', 'Thursday': '16:0-2...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              business_id                      name  \\\n",
       "0  Pns2l4eNsfO8kk83dixA6A  Abby Rappoport, LAC, CMQ   \n",
       "1  mpf3x-BjTdTEA3yCZrAYPw             The UPS Store   \n",
       "2  tUFrWirKiKi_TAnsVWINQQ                    Target   \n",
       "3  MTSW4McQd7CbVtyjqoe9mw        St Honore Pastries   \n",
       "4  mWMc6_wTdE0EUBKIGXDVfA  Perkiomen Valley Brewery   \n",
       "\n",
       "                           address           city state postal_code  \\\n",
       "0           1616 Chapala St, Ste 2  Santa Barbara    CA       93101   \n",
       "1  87 Grasso Plaza Shopping Center         Affton    MO       63123   \n",
       "2             5255 E Broadway Blvd         Tucson    AZ       85711   \n",
       "3                      935 Race St   Philadelphia    PA       19107   \n",
       "4                    101 Walnut St     Green Lane    PA       18054   \n",
       "\n",
       "    latitude   longitude  stars  review_count  is_open  \\\n",
       "0  34.426679 -119.711197    5.0             7        0   \n",
       "1  38.551126  -90.335695    3.0            15        1   \n",
       "2  32.223236 -110.880452    3.5            22        0   \n",
       "3  39.955505  -75.155564    4.0            80        1   \n",
       "4  40.338183  -75.471659    4.5            13        1   \n",
       "\n",
       "                                          attributes  \\\n",
       "0                      {'ByAppointmentOnly': 'True'}   \n",
       "1             {'BusinessAcceptsCreditCards': 'True'}   \n",
       "2  {'BikeParking': 'True', 'BusinessAcceptsCredit...   \n",
       "3  {'RestaurantsDelivery': 'False', 'OutdoorSeati...   \n",
       "4  {'BusinessAcceptsCreditCards': 'True', 'Wheelc...   \n",
       "\n",
       "                                          categories  \\\n",
       "0  Doctors, Traditional Chinese Medicine, Naturop...   \n",
       "1  Shipping Centers, Local Services, Notaries, Ma...   \n",
       "2  Department Stores, Shopping, Fashion, Home & G...   \n",
       "3  Restaurants, Food, Bubble Tea, Coffee & Tea, B...   \n",
       "4                          Brewpubs, Breweries, Food   \n",
       "\n",
       "                                               hours ByAppointmentOnly  \\\n",
       "0                                               None              True   \n",
       "1  {'Monday': '0:0-0:0', 'Tuesday': '8:0-18:30', ...               NaN   \n",
       "2  {'Monday': '8:0-22:0', 'Tuesday': '8:0-22:0', ...             False   \n",
       "3  {'Monday': '7:0-20:0', 'Tuesday': '7:0-20:0', ...             False   \n",
       "4  {'Wednesday': '14:0-22:0', 'Thursday': '16:0-2...               NaN   \n",
       "\n",
       "  BusinessAcceptsCreditCards BikeParking RestaurantsPriceRange2 CoatCheck  \\\n",
       "0                        NaN         NaN                    NaN       NaN   \n",
       "1                       True         NaN                    NaN       NaN   \n",
       "2                       True        True                      2     False   \n",
       "3                      False        True                      1       NaN   \n",
       "4                       True        True                    NaN       NaN   \n",
       "\n",
       "  RestaurantsTakeOut RestaurantsDelivery Caters     WiFi WheelchairAccessible  \\\n",
       "0                NaN                 NaN    NaN      NaN                  NaN   \n",
       "1                NaN                 NaN    NaN      NaN                  NaN   \n",
       "2              False               False  False    u'no'                 True   \n",
       "3               True               False   True  u'free'                  NaN   \n",
       "4               True                 NaN  False      NaN                 True   \n",
       "\n",
       "  HappyHour OutdoorSeating  HasTV RestaurantsReservations DogsAllowed  \\\n",
       "0       NaN            NaN    NaN                     NaN         NaN   \n",
       "1       NaN            NaN    NaN                     NaN         NaN   \n",
       "2     False          False  False                   False       False   \n",
       "3       NaN          False    NaN                     NaN         NaN   \n",
       "4       NaN            NaN    NaN                     NaN         NaN   \n",
       "\n",
       "   Alcohol GoodForKids RestaurantsAttire Ambience RestaurantsTableService  \\\n",
       "0      NaN         NaN               NaN      NaN                     NaN   \n",
       "1      NaN         NaN               NaN      NaN                     NaN   \n",
       "2      NaN         NaN               NaN      NaN                     NaN   \n",
       "3  u'none'         NaN               NaN      NaN                     NaN   \n",
       "4      NaN        True               NaN      NaN                     NaN   \n",
       "\n",
       "  RestaurantsGoodForGroups DriveThru NoiseLevel GoodForMeal  \\\n",
       "0                      NaN       NaN        NaN         NaN   \n",
       "1                      NaN       NaN        NaN         NaN   \n",
       "2                      NaN       NaN        NaN         NaN   \n",
       "3                      NaN       NaN        NaN         NaN   \n",
       "4                      NaN       NaN        NaN         NaN   \n",
       "\n",
       "  BusinessAcceptsBitcoin Smoking Music GoodForDancing AcceptsInsurance  \\\n",
       "0                    NaN     NaN   NaN            NaN              NaN   \n",
       "1                    NaN     NaN   NaN            NaN              NaN   \n",
       "2                    NaN     NaN   NaN            NaN              NaN   \n",
       "3                    NaN     NaN   NaN            NaN              NaN   \n",
       "4                    NaN     NaN   NaN            NaN              NaN   \n",
       "\n",
       "  BestNights BYOB Corkage BYOBCorkage HairSpecializesIn Open24Hours  \\\n",
       "0        NaN  NaN     NaN         NaN               NaN         NaN   \n",
       "1        NaN  NaN     NaN         NaN               NaN         NaN   \n",
       "2        NaN  NaN     NaN         NaN               NaN         NaN   \n",
       "3        NaN  NaN     NaN         NaN               NaN         NaN   \n",
       "4        NaN  NaN     NaN         NaN               NaN         NaN   \n",
       "\n",
       "  RestaurantsCounterService AgesAllowed DietaryRestrictions  \\\n",
       "0                       NaN         NaN                 NaN   \n",
       "1                       NaN         NaN                 NaN   \n",
       "2                       NaN         NaN                 NaN   \n",
       "3                       NaN         NaN                 NaN   \n",
       "4                       NaN         NaN                 NaN   \n",
       "\n",
       "  BusinessParking_garage BusinessParking_street BusinessParking_validated  \\\n",
       "0                    NaN                    NaN                       NaN   \n",
       "1                    NaN                    NaN                       NaN   \n",
       "2                  False                  False                     False   \n",
       "3                  False                   True                     False   \n",
       "4                   None                   None                      None   \n",
       "\n",
       "  BusinessParking_lot BusinessParking_valet  has_parking  \n",
       "0                 NaN                   NaN        False  \n",
       "1                 NaN                   NaN        False  \n",
       "2                True                 False         True  \n",
       "3               False                 False         True  \n",
       "4                True                 False         True  "
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "parking_cols = ['BikeParking','BusinessParking_garage', 'BusinessParking_street', 'BusinessParking_validated',\n",
    "                'BusinessParking_lot', 'BusinessParking_valet']\n",
    "\n",
    "merged_df['has_parking'] = merged_df[parking_cols].any(axis=1)\n",
    "\n",
    "merged_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "qVdgOLBY865c"
   },
   "source": [
    "Business Details:\n",
    "\n",
    "City: Some cities may have more businesses with parking than others.\n",
    "State: Similar to city, state laws and geography might influence parking availability.\n",
    "Postal Code: This could capture some regional variance.\n",
    "Stars (Rating): Higher-rated businesses may offer parking to improve customer experience.\n",
    "Review Count: More popular businesses might be more likely to provide parking due to higher customer volume.\n",
    "Is Open (Business Status): Businesses that are currently open may be more likely to maintain parking areas.\n",
    "Attributes from Exploded Columns:\n",
    "\n",
    "ByAppointmentOnly: Businesses that operate by appointment only may not need parking.\n",
    "BusinessAcceptsCreditCards: This could be an indicator of modernized services, which might correlate with parking availability.\n",
    "RestaurantsPriceRange2: Higher-priced restaurants might offer parking as part of their customer experience.\n",
    "RestaurantsTakeOut: Takeout-focused businesses may or may not need parking.\n",
    "WiFi: Businesses offering WiFi might cater to customers who stay longer and thus provide parking.\n",
    "WheelchairAccessible: Parking facilities may be more common in accessible businesses.\n",
    "OutdoorSeating: This could be a proxy for outdoor space, which may correlate with available parking.\n",
    "RestaurantsGoodForGroups: Businesses catering to groups might have parking to accommodate larger parties.\n",
    "DriveThru: Drive-thru services may suggest availability of parking or space around the business.\n",
    "NoiseLevel: Quieter or less crowded businesses might have different parking needs.\n",
    "GoodForMeal: Attributes related to meals (breakfast, lunch, etc.) might correlate with the need for parking.\n",
    "Other Parking-Related Features:\n",
    "\n",
    "BusinessAcceptsBitcoin, Smoking, GoodForDancing, Music: These might be indicators of customer experience that could indirectly influence parking availability."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 330
    },
    "id": "FMyRGdTJ5cSG",
    "outputId": "4eb83a61-da4c-44cc-d3b0-da5b39163265"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>stars</th>\n",
       "      <th>is_open</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>ByAppointmentOnly</th>\n",
       "      <th>BusinessAcceptsCreditCards</th>\n",
       "      <th>BikeParking</th>\n",
       "      <th>RestaurantsPriceRange2</th>\n",
       "      <th>RestaurantsTakeOut</th>\n",
       "      <th>WiFi</th>\n",
       "      <th>WheelchairAccessible</th>\n",
       "      <th>OutdoorSeating</th>\n",
       "      <th>RestaurantsGoodForGroups</th>\n",
       "      <th>DriveThru</th>\n",
       "      <th>NoiseLevel</th>\n",
       "      <th>GoodForMeal</th>\n",
       "      <th>Alcohol</th>\n",
       "      <th>BusinessParking_garage</th>\n",
       "      <th>BusinessParking_street</th>\n",
       "      <th>BusinessParking_validated</th>\n",
       "      <th>BusinessParking_lot</th>\n",
       "      <th>BusinessParking_valet</th>\n",
       "      <th>has_parking</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Abby Rappoport, LAC, CMQ</td>\n",
       "      <td>Santa Barbara</td>\n",
       "      <td>CA</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>34.426679</td>\n",
       "      <td>-119.711197</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The UPS Store</td>\n",
       "      <td>Affton</td>\n",
       "      <td>MO</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>38.551126</td>\n",
       "      <td>-90.335695</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Target</td>\n",
       "      <td>Tucson</td>\n",
       "      <td>AZ</td>\n",
       "      <td>3.5</td>\n",
       "      <td>0</td>\n",
       "      <td>32.223236</td>\n",
       "      <td>-110.880452</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>u'no'</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>St Honore Pastries</td>\n",
       "      <td>Philadelphia</td>\n",
       "      <td>PA</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>39.955505</td>\n",
       "      <td>-75.155564</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "      <td>u'free'</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>u'none'</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Perkiomen Valley Brewery</td>\n",
       "      <td>Green Lane</td>\n",
       "      <td>PA</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "      <td>40.338183</td>\n",
       "      <td>-75.471659</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       name           city state  stars  is_open   latitude  \\\n",
       "0  Abby Rappoport, LAC, CMQ  Santa Barbara    CA    5.0        0  34.426679   \n",
       "1             The UPS Store         Affton    MO    3.0        1  38.551126   \n",
       "2                    Target         Tucson    AZ    3.5        0  32.223236   \n",
       "3        St Honore Pastries   Philadelphia    PA    4.0        1  39.955505   \n",
       "4  Perkiomen Valley Brewery     Green Lane    PA    4.5        1  40.338183   \n",
       "\n",
       "    longitude ByAppointmentOnly BusinessAcceptsCreditCards BikeParking  \\\n",
       "0 -119.711197              True                        NaN         NaN   \n",
       "1  -90.335695               NaN                       True         NaN   \n",
       "2 -110.880452             False                       True        True   \n",
       "3  -75.155564             False                      False        True   \n",
       "4  -75.471659               NaN                       True        True   \n",
       "\n",
       "  RestaurantsPriceRange2 RestaurantsTakeOut     WiFi WheelchairAccessible  \\\n",
       "0                    NaN                NaN      NaN                  NaN   \n",
       "1                    NaN                NaN      NaN                  NaN   \n",
       "2                      2              False    u'no'                 True   \n",
       "3                      1               True  u'free'                  NaN   \n",
       "4                    NaN               True      NaN                 True   \n",
       "\n",
       "  OutdoorSeating RestaurantsGoodForGroups DriveThru NoiseLevel GoodForMeal  \\\n",
       "0            NaN                      NaN       NaN        NaN         NaN   \n",
       "1            NaN                      NaN       NaN        NaN         NaN   \n",
       "2          False                      NaN       NaN        NaN         NaN   \n",
       "3          False                      NaN       NaN        NaN         NaN   \n",
       "4            NaN                      NaN       NaN        NaN         NaN   \n",
       "\n",
       "   Alcohol BusinessParking_garage BusinessParking_street  \\\n",
       "0      NaN                    NaN                    NaN   \n",
       "1      NaN                    NaN                    NaN   \n",
       "2      NaN                  False                  False   \n",
       "3  u'none'                  False                   True   \n",
       "4      NaN                   None                   None   \n",
       "\n",
       "  BusinessParking_validated BusinessParking_lot BusinessParking_valet  \\\n",
       "0                       NaN                 NaN                   NaN   \n",
       "1                       NaN                 NaN                   NaN   \n",
       "2                     False                True                 False   \n",
       "3                     False               False                 False   \n",
       "4                      None                True                 False   \n",
       "\n",
       "   has_parking  \n",
       "0        False  \n",
       "1        False  \n",
       "2         True  \n",
       "3         True  \n",
       "4         True  "
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Defining feature columns for the model\n",
    "final_columns = [\n",
    "    'name','city', 'state', 'stars', 'is_open','latitude','longitude',\n",
    "    'ByAppointmentOnly', 'BusinessAcceptsCreditCards', 'BikeParking',\n",
    "    'RestaurantsPriceRange2', 'RestaurantsTakeOut', 'WiFi',\n",
    "    'WheelchairAccessible', 'OutdoorSeating', 'RestaurantsGoodForGroups',\n",
    "    'DriveThru', 'NoiseLevel', 'GoodForMeal','Alcohol', 'BusinessParking_garage', 'BusinessParking_street', 'BusinessParking_validated',\n",
    "                'BusinessParking_lot', 'BusinessParking_valet', 'has_parking'\n",
    "]\n",
    "\n",
    "EDA_dataset=merged_df[final_columns]\n",
    "EDA_dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "id": "VX8ZcQjtcJ-6"
   },
   "outputs": [],
   "source": [
    "# Saving dataset for EDA\n",
    "EDA_dataset.to_csv('EDA_dataset.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 330
    },
    "id": "-C50opJ6cRqb",
    "outputId": "298ba264-6384-466c-8a19-ccaf86b1ce1d"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>stars</th>\n",
       "      <th>is_open</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>ByAppointmentOnly</th>\n",
       "      <th>BusinessAcceptsCreditCards</th>\n",
       "      <th>BikeParking</th>\n",
       "      <th>RestaurantsPriceRange2</th>\n",
       "      <th>RestaurantsTakeOut</th>\n",
       "      <th>WiFi</th>\n",
       "      <th>WheelchairAccessible</th>\n",
       "      <th>OutdoorSeating</th>\n",
       "      <th>RestaurantsGoodForGroups</th>\n",
       "      <th>DriveThru</th>\n",
       "      <th>NoiseLevel</th>\n",
       "      <th>GoodForMeal</th>\n",
       "      <th>Alcohol</th>\n",
       "      <th>BusinessParking_garage</th>\n",
       "      <th>BusinessParking_street</th>\n",
       "      <th>BusinessParking_validated</th>\n",
       "      <th>BusinessParking_lot</th>\n",
       "      <th>BusinessParking_valet</th>\n",
       "      <th>has_parking</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Abby Rappoport, LAC, CMQ</td>\n",
       "      <td>Santa Barbara</td>\n",
       "      <td>CA</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>34.426679</td>\n",
       "      <td>-119.711197</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The UPS Store</td>\n",
       "      <td>Affton</td>\n",
       "      <td>MO</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>38.551126</td>\n",
       "      <td>-90.335695</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Target</td>\n",
       "      <td>Tucson</td>\n",
       "      <td>AZ</td>\n",
       "      <td>3.5</td>\n",
       "      <td>0</td>\n",
       "      <td>32.223236</td>\n",
       "      <td>-110.880452</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>2.0</td>\n",
       "      <td>False</td>\n",
       "      <td>u'no'</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>St Honore Pastries</td>\n",
       "      <td>Philadelphia</td>\n",
       "      <td>PA</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>39.955505</td>\n",
       "      <td>-75.155564</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>u'free'</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>u'none'</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Perkiomen Valley Brewery</td>\n",
       "      <td>Green Lane</td>\n",
       "      <td>PA</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "      <td>40.338183</td>\n",
       "      <td>-75.471659</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       name           city state  stars  is_open   latitude  \\\n",
       "0  Abby Rappoport, LAC, CMQ  Santa Barbara    CA    5.0        0  34.426679   \n",
       "1             The UPS Store         Affton    MO    3.0        1  38.551126   \n",
       "2                    Target         Tucson    AZ    3.5        0  32.223236   \n",
       "3        St Honore Pastries   Philadelphia    PA    4.0        1  39.955505   \n",
       "4  Perkiomen Valley Brewery     Green Lane    PA    4.5        1  40.338183   \n",
       "\n",
       "    longitude ByAppointmentOnly BusinessAcceptsCreditCards BikeParking  \\\n",
       "0 -119.711197              True                        NaN         NaN   \n",
       "1  -90.335695               NaN                       True         NaN   \n",
       "2 -110.880452             False                       True        True   \n",
       "3  -75.155564             False                      False        True   \n",
       "4  -75.471659               NaN                       True        True   \n",
       "\n",
       "   RestaurantsPriceRange2 RestaurantsTakeOut     WiFi WheelchairAccessible  \\\n",
       "0                     NaN                NaN      NaN                  NaN   \n",
       "1                     NaN                NaN      NaN                  NaN   \n",
       "2                     2.0              False    u'no'                 True   \n",
       "3                     1.0               True  u'free'                  NaN   \n",
       "4                     NaN               True      NaN                 True   \n",
       "\n",
       "  OutdoorSeating RestaurantsGoodForGroups DriveThru NoiseLevel GoodForMeal  \\\n",
       "0            NaN                      NaN       NaN        NaN         NaN   \n",
       "1            NaN                      NaN       NaN        NaN         NaN   \n",
       "2          False                      NaN       NaN        NaN         NaN   \n",
       "3          False                      NaN       NaN        NaN         NaN   \n",
       "4            NaN                      NaN       NaN        NaN         NaN   \n",
       "\n",
       "   Alcohol BusinessParking_garage BusinessParking_street  \\\n",
       "0      NaN                    NaN                    NaN   \n",
       "1      NaN                    NaN                    NaN   \n",
       "2      NaN                  False                  False   \n",
       "3  u'none'                  False                   True   \n",
       "4      NaN                    NaN                    NaN   \n",
       "\n",
       "  BusinessParking_validated BusinessParking_lot BusinessParking_valet  \\\n",
       "0                       NaN                 NaN                   NaN   \n",
       "1                       NaN                 NaN                   NaN   \n",
       "2                     False                True                 False   \n",
       "3                     False               False                 False   \n",
       "4                       NaN                True                 False   \n",
       "\n",
       "   has_parking  \n",
       "0        False  \n",
       "1        False  \n",
       "2         True  \n",
       "3         True  \n",
       "4         True  "
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# give your dataset path\n",
    "EDA_dataset=pd.read_csv('EDA_dataset.csv')\n",
    "EDA_dataset.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "FfFzigZyckFk"
   },
   "source": [
    "**Data cleaning, preprocessing and feature engineering for Model**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "LWK3dHkaF-js",
    "outputId": "8e067e72-8091-4bdc-9817-36b784e10cda"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 150346 entries, 0 to 150345\n",
      "Data columns (total 26 columns):\n",
      " #   Column                      Non-Null Count   Dtype  \n",
      "---  ------                      --------------   -----  \n",
      " 0   name                        150346 non-null  object \n",
      " 1   city                        150346 non-null  object \n",
      " 2   state                       150346 non-null  object \n",
      " 3   stars                       150346 non-null  float64\n",
      " 4   is_open                     150346 non-null  int64  \n",
      " 5   latitude                    150346 non-null  float64\n",
      " 6   longitude                   150346 non-null  float64\n",
      " 7   ByAppointmentOnly           42299 non-null   object \n",
      " 8   BusinessAcceptsCreditCards  119692 non-null  object \n",
      " 9   BikeParking                 72558 non-null   object \n",
      " 10  RestaurantsPriceRange2      85280 non-null   float64\n",
      " 11  RestaurantsTakeOut          57752 non-null   object \n",
      " 12  WiFi                        56864 non-null   object \n",
      " 13  WheelchairAccessible        28926 non-null   object \n",
      " 14  OutdoorSeating              46920 non-null   object \n",
      " 15  RestaurantsGoodForGroups    44149 non-null   object \n",
      " 16  DriveThru                   7005 non-null    object \n",
      " 17  NoiseLevel                  37954 non-null   object \n",
      " 18  GoodForMeal                 28784 non-null   object \n",
      " 19  Alcohol                     43151 non-null   object \n",
      " 20  BusinessParking_garage      86885 non-null   object \n",
      " 21  BusinessParking_street      85474 non-null   object \n",
      " 22  BusinessParking_validated   86654 non-null   object \n",
      " 23  BusinessParking_lot         86516 non-null   object \n",
      " 24  BusinessParking_valet       88795 non-null   object \n",
      " 25  has_parking                 150346 non-null  bool   \n",
      "dtypes: bool(1), float64(4), int64(1), object(20)\n",
      "memory usage: 28.8+ MB\n"
     ]
    }
   ],
   "source": [
    "EDA_dataset.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "cUEpQfxyDHjt",
    "outputId": "e40fe7bd-38c6-4789-a973-5b75bf0da70e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Value counts for name:\n",
      "name\n",
      "Starbucks                  724\n",
      "McDonald's                 703\n",
      "Dunkin'                    510\n",
      "Subway                     459\n",
      "Taco Bell                  365\n",
      "                          ... \n",
      "San Roque Florist            1\n",
      "Perfect Taste Grill          1\n",
      "il Fustino                   1\n",
      "Chong's Oriental Market      1\n",
      "Sic Ink                      1\n",
      "Name: count, Length: 114117, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for city:\n",
      "city\n",
      "Philadelphia      14569\n",
      "Tucson             9250\n",
      "Tampa              9050\n",
      "Indianapolis       7540\n",
      "Nashville          6971\n",
      "                  ...  \n",
      "Gentilly              1\n",
      "pennsauken            1\n",
      "Hamiltion             1\n",
      "Newtown square        1\n",
      "Apollo beach          1\n",
      "Name: count, Length: 1416, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for state:\n",
      "state\n",
      "PA     34039\n",
      "FL     26330\n",
      "TN     12056\n",
      "IN     11247\n",
      "MO     10913\n",
      "LA      9924\n",
      "AZ      9912\n",
      "NJ      8536\n",
      "NV      7715\n",
      "AB      5573\n",
      "CA      5203\n",
      "ID      4467\n",
      "DE      2265\n",
      "IL      2145\n",
      "TX         4\n",
      "CO         3\n",
      "WA         2\n",
      "HI         2\n",
      "MA         2\n",
      "NC         1\n",
      "UT         1\n",
      "MT         1\n",
      "MI         1\n",
      "SD         1\n",
      "XMS        1\n",
      "VI         1\n",
      "VT         1\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for stars:\n",
      "stars\n",
      "4.0    31125\n",
      "4.5    27181\n",
      "3.5    26519\n",
      "3.0    18453\n",
      "5.0    16307\n",
      "2.5    14316\n",
      "2.0     9527\n",
      "1.5     4932\n",
      "1.0     1986\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for is_open:\n",
      "is_open\n",
      "1    119698\n",
      "0     30648\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for latitude:\n",
      "latitude\n",
      "34.420334    146\n",
      "34.420831     65\n",
      "39.483565     52\n",
      "27.955269     35\n",
      "39.540154     34\n",
      "            ... \n",
      "30.004802      1\n",
      "40.087231      1\n",
      "39.957982      1\n",
      "27.854713      1\n",
      "27.771002      1\n",
      "Name: count, Length: 135593, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for longitude:\n",
      "longitude\n",
      "-119.710749    146\n",
      "-119.731021     69\n",
      "-119.698190     65\n",
      "-82.456320      46\n",
      "-75.174967      43\n",
      "              ... \n",
      "-75.037990       1\n",
      "-116.394616      1\n",
      "-75.189690       1\n",
      "-82.740739       1\n",
      "-82.394910       1\n",
      "Name: count, Length: 131918, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for ByAppointmentOnly:\n",
      "ByAppointmentOnly\n",
      "NaN      108047\n",
      "False     26690\n",
      "True      15609\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for BusinessAcceptsCreditCards:\n",
      "BusinessAcceptsCreditCards\n",
      "True     113667\n",
      "NaN       30654\n",
      "False      6025\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for BikeParking:\n",
      "BikeParking\n",
      "NaN      77788\n",
      "True     55040\n",
      "False    17518\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for RestaurantsPriceRange2:\n",
      "RestaurantsPriceRange2\n",
      "NaN    65066\n",
      "2.0    48581\n",
      "1.0    28840\n",
      "3.0     6667\n",
      "4.0     1192\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for RestaurantsTakeOut:\n",
      "RestaurantsTakeOut\n",
      "NaN      92594\n",
      "True     52943\n",
      "False     4809\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for WiFi:\n",
      "WiFi\n",
      "NaN        93482\n",
      "u'free'    27029\n",
      "u'no'      15221\n",
      "'free'      7385\n",
      "'no'        6610\n",
      "u'paid'      486\n",
      "'paid'       133\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for WheelchairAccessible:\n",
      "WheelchairAccessible\n",
      "NaN      121420\n",
      "True      25993\n",
      "False      2933\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for OutdoorSeating:\n",
      "OutdoorSeating\n",
      "NaN      103426\n",
      "False     24371\n",
      "True      22549\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for RestaurantsGoodForGroups:\n",
      "RestaurantsGoodForGroups\n",
      "NaN      106197\n",
      "True      38148\n",
      "False      6001\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for DriveThru:\n",
      "DriveThru\n",
      "NaN      143341\n",
      "True       4374\n",
      "False      2631\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for NoiseLevel:\n",
      "NoiseLevel\n",
      "NaN             112392\n",
      "u'average'       21581\n",
      "u'quiet'          6460\n",
      "'average'         4607\n",
      "u'loud'           2447\n",
      "'quiet'           1174\n",
      "u'very_loud'      1067\n",
      "'loud'             485\n",
      "'very_loud'        133\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for GoodForMeal:\n",
      "GoodForMeal\n",
      "NaN                                                                                                              121562\n",
      "{'dessert': False, 'latenight': False, 'lunch': False, 'dinner': False, 'brunch': False, 'breakfast': False}       9082\n",
      "{'dessert': False, 'latenight': False, 'lunch': True, 'dinner': True, 'brunch': False, 'breakfast': False}         4499\n",
      "{'dessert': False, 'latenight': False, 'lunch': True, 'dinner': False, 'brunch': False, 'breakfast': False}        2394\n",
      "{'dessert': False, 'latenight': False, 'lunch': False, 'dinner': True, 'brunch': False, 'breakfast': False}        1356\n",
      "                                                                                                                  ...  \n",
      "{u'breakfast': True, u'brunch': True, u'lunch': None, u'dinner': None, u'latenight': False, u'dessert': None}         1\n",
      "{'dessert': None, 'latenight': False, 'lunch': True, 'dinner': False, 'brunch': True, 'breakfast': None}              1\n",
      "{'dessert': True, 'latenight': False, 'lunch': None, 'dinner': True, 'brunch': True, 'breakfast': None}               1\n",
      "{'dessert': True, 'latenight': True, 'lunch': None, 'dinner': True, 'brunch': None, 'breakfast': False}               1\n",
      "{'dessert': True, 'latenight': False, 'lunch': None, 'dinner': True, 'brunch': True, 'breakfast': False}              1\n",
      "Name: count, Length: 518, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for Alcohol:\n",
      "Alcohol\n",
      "NaN                 107195\n",
      "u'none'              15977\n",
      "u'full_bar'          12968\n",
      "'none'                4933\n",
      "u'beer_and_wine'      4880\n",
      "'full_bar'            3024\n",
      "'beer_and_wine'       1369\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for BusinessParking_garage:\n",
      "BusinessParking_garage\n",
      "False    82745\n",
      "NaN      63461\n",
      "True      4140\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for BusinessParking_street:\n",
      "BusinessParking_street\n",
      "NaN      64872\n",
      "False    62448\n",
      "True     23026\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for BusinessParking_validated:\n",
      "BusinessParking_validated\n",
      "False    85815\n",
      "NaN      63692\n",
      "True       839\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for BusinessParking_lot:\n",
      "BusinessParking_lot\n",
      "NaN      63830\n",
      "True     44247\n",
      "False    42269\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for BusinessParking_valet:\n",
      "BusinessParking_valet\n",
      "False    87337\n",
      "NaN      61551\n",
      "True      1458\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for has_parking:\n",
      "has_parking\n",
      "True     83997\n",
      "False    66349\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Value_counts\n",
    "for col in EDA_dataset.columns:\n",
    "    print(f\"Value counts for {col}:\")\n",
    "    print(EDA_dataset[col].value_counts(dropna=False))\n",
    "    print(\"\\n\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 899
    },
    "id": "3zh_9Q6QAU2i",
    "outputId": "89e3006c-f147-41b2-8d33-1519987299a2"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "name                           0.000000\n",
       "city                           0.000000\n",
       "state                          0.000000\n",
       "stars                          0.000000\n",
       "is_open                        0.000000\n",
       "latitude                       0.000000\n",
       "longitude                      0.000000\n",
       "ByAppointmentOnly             71.865563\n",
       "BusinessAcceptsCreditCards    20.388969\n",
       "BikeParking                   51.739321\n",
       "RestaurantsPriceRange2        43.277507\n",
       "RestaurantsTakeOut            61.587272\n",
       "WiFi                          62.177910\n",
       "WheelchairAccessible          80.760379\n",
       "OutdoorSeating                68.791986\n",
       "RestaurantsGoodForGroups      70.635068\n",
       "DriveThru                     95.340747\n",
       "NoiseLevel                    74.755564\n",
       "GoodForMeal                   80.854828\n",
       "Alcohol                       71.298871\n",
       "BusinessParking_garage        42.209969\n",
       "BusinessParking_street        43.148471\n",
       "BusinessParking_validated     42.363615\n",
       "BusinessParking_lot           42.455403\n",
       "BusinessParking_valet         40.939566\n",
       "has_parking                    0.000000\n",
       "dtype: float64"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# percentage of missing values\n",
    "missing_percentage = (EDA_dataset.isnull().sum() / len(EDA_dataset)) * 100\n",
    "missing_percentage\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "id": "vm8knkZeAiBM"
   },
   "outputs": [],
   "source": [
    "# Imputing missing values\n",
    "EDA_dataset['ByAppointmentOnly'].fillna(False, inplace=True)\n",
    "\n",
    "# Dropping unnecessary columns\n",
    "EDA_dataset.drop(columns=['BusinessAcceptsCreditCards', 'OutdoorSeating', 'DriveThru',\n",
    "                          'NoiseLevel', 'GoodForMeal', 'Alcohol'], inplace=True)\n",
    "\n",
    "# Filling missing values with False\n",
    "EDA_dataset['BikeParking'].fillna(False, inplace=True)\n",
    "EDA_dataset['RestaurantsPriceRange2'].fillna(EDA_dataset['RestaurantsPriceRange2'].mode()[0], inplace=True)\n",
    "EDA_dataset['RestaurantsTakeOut'].fillna(False, inplace=True)\n",
    "EDA_dataset['WiFi'].fillna('no', inplace=True)\n",
    "EDA_dataset['WheelchairAccessible'].fillna(False, inplace=True)\n",
    "EDA_dataset['RestaurantsGoodForGroups'].fillna(False, inplace=True)\n",
    "\n",
    "# I\n",
    "EDA_dataset.loc[EDA_dataset['has_parking'] == False, ['BusinessParking_garage',\n",
    "                                                       'BusinessParking_street',\n",
    "                                                       'BusinessParking_validated',\n",
    "                                                       'BusinessParking_lot',\n",
    "                                                       'BusinessParking_valet',\n",
    "                                                       'BikeParking']] = False\n",
    "\n",
    "for col in ['BusinessParking_garage', 'BusinessParking_street',\n",
    "            'BusinessParking_validated', 'BusinessParking_lot',\n",
    "            'BusinessParking_valet', 'BikeParking']:\n",
    "    EDA_dataset.loc[EDA_dataset['has_parking'] == True, col] = EDA_dataset.loc[EDA_dataset['has_parking'] == True, col].fillna(True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 711
    },
    "id": "O0LTiojtT9VE",
    "outputId": "bbed6ed2-9645-4d7b-c1d3-8b1c7b736909"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "name                         0.0\n",
       "city                         0.0\n",
       "state                        0.0\n",
       "stars                        0.0\n",
       "is_open                      0.0\n",
       "latitude                     0.0\n",
       "longitude                    0.0\n",
       "ByAppointmentOnly            0.0\n",
       "BikeParking                  0.0\n",
       "RestaurantsPriceRange2       0.0\n",
       "RestaurantsTakeOut           0.0\n",
       "WiFi                         0.0\n",
       "WheelchairAccessible         0.0\n",
       "RestaurantsGoodForGroups     0.0\n",
       "BusinessParking_garage       0.0\n",
       "BusinessParking_street       0.0\n",
       "BusinessParking_validated    0.0\n",
       "BusinessParking_lot          0.0\n",
       "BusinessParking_valet        0.0\n",
       "has_parking                  0.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# percentage of missing values\n",
    "missing_percentage = (EDA_dataset.isnull().sum() / len(EDA_dataset)) * 100\n",
    "missing_percentage\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 330
    },
    "id": "_kbHAPST_kCv",
    "outputId": "4c575d86-3d5a-4167-d354-85164e4ff058"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>stars</th>\n",
       "      <th>is_open</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>ByAppointmentOnly</th>\n",
       "      <th>BikeParking</th>\n",
       "      <th>RestaurantsPriceRange2</th>\n",
       "      <th>RestaurantsTakeOut</th>\n",
       "      <th>WiFi</th>\n",
       "      <th>WheelchairAccessible</th>\n",
       "      <th>RestaurantsGoodForGroups</th>\n",
       "      <th>BusinessParking_garage</th>\n",
       "      <th>BusinessParking_street</th>\n",
       "      <th>BusinessParking_validated</th>\n",
       "      <th>BusinessParking_lot</th>\n",
       "      <th>BusinessParking_valet</th>\n",
       "      <th>has_parking</th>\n",
       "      <th>parking_status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Abby Rappoport, LAC, CMQ</td>\n",
       "      <td>Santa Barbara</td>\n",
       "      <td>CA</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>34.426679</td>\n",
       "      <td>-119.711197</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>2.0</td>\n",
       "      <td>False</td>\n",
       "      <td>no</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The UPS Store</td>\n",
       "      <td>Affton</td>\n",
       "      <td>MO</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>38.551126</td>\n",
       "      <td>-90.335695</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>2.0</td>\n",
       "      <td>False</td>\n",
       "      <td>no</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Target</td>\n",
       "      <td>Tucson</td>\n",
       "      <td>AZ</td>\n",
       "      <td>3.5</td>\n",
       "      <td>0</td>\n",
       "      <td>32.223236</td>\n",
       "      <td>-110.880452</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>2.0</td>\n",
       "      <td>False</td>\n",
       "      <td>u'no'</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>St Honore Pastries</td>\n",
       "      <td>Philadelphia</td>\n",
       "      <td>PA</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>39.955505</td>\n",
       "      <td>-75.155564</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>u'free'</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Perkiomen Valley Brewery</td>\n",
       "      <td>Green Lane</td>\n",
       "      <td>PA</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "      <td>40.338183</td>\n",
       "      <td>-75.471659</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>2.0</td>\n",
       "      <td>True</td>\n",
       "      <td>no</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       name           city state  stars  is_open   latitude  \\\n",
       "0  Abby Rappoport, LAC, CMQ  Santa Barbara    CA    5.0        0  34.426679   \n",
       "1             The UPS Store         Affton    MO    3.0        1  38.551126   \n",
       "2                    Target         Tucson    AZ    3.5        0  32.223236   \n",
       "3        St Honore Pastries   Philadelphia    PA    4.0        1  39.955505   \n",
       "4  Perkiomen Valley Brewery     Green Lane    PA    4.5        1  40.338183   \n",
       "\n",
       "    longitude  ByAppointmentOnly  BikeParking  RestaurantsPriceRange2  \\\n",
       "0 -119.711197               True        False                     2.0   \n",
       "1  -90.335695              False        False                     2.0   \n",
       "2 -110.880452              False         True                     2.0   \n",
       "3  -75.155564              False         True                     1.0   \n",
       "4  -75.471659              False         True                     2.0   \n",
       "\n",
       "   RestaurantsTakeOut     WiFi  WheelchairAccessible  \\\n",
       "0               False       no                 False   \n",
       "1               False       no                 False   \n",
       "2               False    u'no'                  True   \n",
       "3                True  u'free'                 False   \n",
       "4                True       no                  True   \n",
       "\n",
       "   RestaurantsGoodForGroups BusinessParking_garage BusinessParking_street  \\\n",
       "0                     False                  False                  False   \n",
       "1                     False                  False                  False   \n",
       "2                     False                  False                  False   \n",
       "3                     False                  False                   True   \n",
       "4                     False                   True                   True   \n",
       "\n",
       "  BusinessParking_validated BusinessParking_lot BusinessParking_valet  \\\n",
       "0                     False               False                 False   \n",
       "1                     False               False                 False   \n",
       "2                     False                True                 False   \n",
       "3                     False               False                 False   \n",
       "4                      True                True                 False   \n",
       "\n",
       "   has_parking  parking_status  \n",
       "0        False               0  \n",
       "1        False               0  \n",
       "2         True               1  \n",
       "3         True               1  \n",
       "4         True               2  "
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# Target variable creation\n",
    "def create_parking_status(row):\n",
    "    if row['has_parking'] == False:\n",
    "        return 0  # No parking\n",
    "    elif row['has_parking'] == True and row['BusinessParking_validated'] == False:\n",
    "        return 1  # Has parking but not validated\n",
    "    elif row['has_parking'] == True and row['BusinessParking_validated'] == True:\n",
    "        return 2  # Has parking and validated\n",
    "\n",
    "\n",
    "EDA_dataset['parking_status'] = EDA_dataset.apply(create_parking_status, axis=1)\n",
    "\n",
    "EDA_dataset.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "WYMJnwbN_yVs",
    "outputId": "60d87cae-8525-48f5-f152-3576398887d7"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Value counts for name:\n",
      "name\n",
      "Starbucks                  724\n",
      "McDonald's                 703\n",
      "Dunkin'                    510\n",
      "Subway                     459\n",
      "Taco Bell                  365\n",
      "                          ... \n",
      "San Roque Florist            1\n",
      "Perfect Taste Grill          1\n",
      "il Fustino                   1\n",
      "Chong's Oriental Market      1\n",
      "Sic Ink                      1\n",
      "Name: count, Length: 114117, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for city:\n",
      "city\n",
      "Philadelphia      14569\n",
      "Tucson             9250\n",
      "Tampa              9050\n",
      "Indianapolis       7540\n",
      "Nashville          6971\n",
      "                  ...  \n",
      "Gentilly              1\n",
      "pennsauken            1\n",
      "Hamiltion             1\n",
      "Newtown square        1\n",
      "Apollo beach          1\n",
      "Name: count, Length: 1416, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for state:\n",
      "state\n",
      "PA     34039\n",
      "FL     26330\n",
      "TN     12056\n",
      "IN     11247\n",
      "MO     10913\n",
      "LA      9924\n",
      "AZ      9912\n",
      "NJ      8536\n",
      "NV      7715\n",
      "AB      5573\n",
      "CA      5203\n",
      "ID      4467\n",
      "DE      2265\n",
      "IL      2145\n",
      "TX         4\n",
      "CO         3\n",
      "WA         2\n",
      "HI         2\n",
      "MA         2\n",
      "NC         1\n",
      "UT         1\n",
      "MT         1\n",
      "MI         1\n",
      "SD         1\n",
      "XMS        1\n",
      "VI         1\n",
      "VT         1\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for stars:\n",
      "stars\n",
      "4.0    31125\n",
      "4.5    27181\n",
      "3.5    26519\n",
      "3.0    18453\n",
      "5.0    16307\n",
      "2.5    14316\n",
      "2.0     9527\n",
      "1.5     4932\n",
      "1.0     1986\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for is_open:\n",
      "is_open\n",
      "1    119698\n",
      "0     30648\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for latitude:\n",
      "latitude\n",
      "34.420334    146\n",
      "34.420831     65\n",
      "39.483565     52\n",
      "27.955269     35\n",
      "39.540154     34\n",
      "            ... \n",
      "30.004802      1\n",
      "40.087231      1\n",
      "39.957982      1\n",
      "27.854713      1\n",
      "27.771002      1\n",
      "Name: count, Length: 135593, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for longitude:\n",
      "longitude\n",
      "-119.710749    146\n",
      "-119.731021     69\n",
      "-119.698190     65\n",
      "-82.456320      46\n",
      "-75.174967      43\n",
      "              ... \n",
      "-75.037990       1\n",
      "-116.394616      1\n",
      "-75.189690       1\n",
      "-82.740739       1\n",
      "-82.394910       1\n",
      "Name: count, Length: 131918, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for ByAppointmentOnly:\n",
      "ByAppointmentOnly\n",
      "False    134737\n",
      "True      15609\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for BikeParking:\n",
      "BikeParking\n",
      "False    95306\n",
      "True     55040\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for RestaurantsPriceRange2:\n",
      "RestaurantsPriceRange2\n",
      "2.0    113647\n",
      "1.0     28840\n",
      "3.0      6667\n",
      "4.0      1192\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for RestaurantsTakeOut:\n",
      "RestaurantsTakeOut\n",
      "False    97403\n",
      "True     52943\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for WiFi:\n",
      "WiFi\n",
      "no         93482\n",
      "u'free'    27029\n",
      "u'no'      15221\n",
      "'free'      7385\n",
      "'no'        6610\n",
      "u'paid'      486\n",
      "'paid'       133\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for WheelchairAccessible:\n",
      "WheelchairAccessible\n",
      "False    124353\n",
      "True      25993\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for RestaurantsGoodForGroups:\n",
      "RestaurantsGoodForGroups\n",
      "False    112198\n",
      "True      38148\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for BusinessParking_garage:\n",
      "BusinessParking_garage\n",
      "False    139383\n",
      "True      10963\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for BusinessParking_street:\n",
      "BusinessParking_street\n",
      "False    119347\n",
      "True      30999\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for BusinessParking_validated:\n",
      "BusinessParking_validated\n",
      "False    142498\n",
      "True       7848\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for BusinessParking_lot:\n",
      "BusinessParking_lot\n",
      "False    99120\n",
      "True     51226\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for BusinessParking_valet:\n",
      "BusinessParking_valet\n",
      "False    143728\n",
      "True       6618\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for has_parking:\n",
      "has_parking\n",
      "True     83997\n",
      "False    66349\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n",
      "Value counts for parking_status:\n",
      "parking_status\n",
      "1    76149\n",
      "0    66349\n",
      "2     7848\n",
      "Name: count, dtype: int64\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#\n",
    "for col in EDA_dataset.columns:\n",
    "    print(f\"Value counts for {col}:\")\n",
    "    print(EDA_dataset[col].value_counts(dropna=False))\n",
    "    print(\"\\n\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "dKQlyGYOU4CH",
    "outputId": "f19ecc13-4cec-4588-a64b-2ac466180989"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WiFi\n",
      "no      115313\n",
      "free     34414\n",
      "paid       619\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Data fomatting in Wifi column\n",
    "\n",
    "\n",
    "EDA_dataset['WiFi'] = EDA_dataset['WiFi'].replace({\n",
    "    \"no\": \"no\",\n",
    "    \"u'no'\": \"no\",\n",
    "    \"'no'\": \"no\",\n",
    "    \"u'free'\": \"free\",\n",
    "    \"'free'\": \"free\",\n",
    "    \"paid\": \"paid\",\n",
    "    \"u'paid'\": \"paid\",\n",
    "    \"'paid'\": \"paid\",\n",
    "    'None': 'no'\n",
    "})\n",
    "\n",
    "\n",
    "EDA_dataset['WiFi'].fillna('no', inplace=True)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "print(EDA_dataset['WiFi'].value_counts())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "2VN0cfTpVQJD",
    "outputId": "b0feccee-de5d-48fd-ffdb-877ccc581ad9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 150346 entries, 0 to 150345\n",
      "Data columns (total 21 columns):\n",
      " #   Column                     Non-Null Count   Dtype  \n",
      "---  ------                     --------------   -----  \n",
      " 0   name                       150346 non-null  object \n",
      " 1   city                       150346 non-null  object \n",
      " 2   state                      150346 non-null  object \n",
      " 3   stars                      150346 non-null  float64\n",
      " 4   is_open                    150346 non-null  int64  \n",
      " 5   latitude                   150346 non-null  float64\n",
      " 6   longitude                  150346 non-null  float64\n",
      " 7   ByAppointmentOnly          150346 non-null  bool   \n",
      " 8   BikeParking                150346 non-null  bool   \n",
      " 9   RestaurantsPriceRange2     150346 non-null  float64\n",
      " 10  RestaurantsTakeOut         150346 non-null  bool   \n",
      " 11  WiFi                       150346 non-null  object \n",
      " 12  WheelchairAccessible       150346 non-null  bool   \n",
      " 13  RestaurantsGoodForGroups   150346 non-null  bool   \n",
      " 14  BusinessParking_garage     150346 non-null  object \n",
      " 15  BusinessParking_street     150346 non-null  object \n",
      " 16  BusinessParking_validated  150346 non-null  object \n",
      " 17  BusinessParking_lot        150346 non-null  object \n",
      " 18  BusinessParking_valet      150346 non-null  object \n",
      " 19  has_parking                150346 non-null  bool   \n",
      " 20  parking_status             150346 non-null  int64  \n",
      "dtypes: bool(6), float64(4), int64(2), object(9)\n",
      "memory usage: 18.1+ MB\n"
     ]
    }
   ],
   "source": [
    "EDA_dataset.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "emDxJakvg-aW"
   },
   "source": [
    "**Feature Engineering**\n",
    "\n",
    "Created new column city_encoded which is the frequency of cities"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "id": "PlhAFgUGaq1R",
    "outputId": "4e144525-f1f8-40b8-93ed-1d734c6e14bb"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>stars</th>\n",
       "      <th>is_open</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>ByAppointmentOnly</th>\n",
       "      <th>BikeParking</th>\n",
       "      <th>RestaurantsPriceRange2</th>\n",
       "      <th>RestaurantsTakeOut</th>\n",
       "      <th>WiFi</th>\n",
       "      <th>WheelchairAccessible</th>\n",
       "      <th>RestaurantsGoodForGroups</th>\n",
       "      <th>BusinessParking_garage</th>\n",
       "      <th>BusinessParking_street</th>\n",
       "      <th>BusinessParking_validated</th>\n",
       "      <th>BusinessParking_lot</th>\n",
       "      <th>BusinessParking_valet</th>\n",
       "      <th>has_parking</th>\n",
       "      <th>parking_status</th>\n",
       "      <th>city_encoded</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Abby Rappoport, LAC, CMQ</td>\n",
       "      <td>Santa Barbara</td>\n",
       "      <td>CA</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>34.426679</td>\n",
       "      <td>-119.711197</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>2.0</td>\n",
       "      <td>False</td>\n",
       "      <td>no</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>3829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The UPS Store</td>\n",
       "      <td>Affton</td>\n",
       "      <td>MO</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>38.551126</td>\n",
       "      <td>-90.335695</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>2.0</td>\n",
       "      <td>False</td>\n",
       "      <td>no</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Target</td>\n",
       "      <td>Tucson</td>\n",
       "      <td>AZ</td>\n",
       "      <td>3.5</td>\n",
       "      <td>0</td>\n",
       "      <td>32.223236</td>\n",
       "      <td>-110.880452</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>2.0</td>\n",
       "      <td>False</td>\n",
       "      <td>no</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>1</td>\n",
       "      <td>9250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>St Honore Pastries</td>\n",
       "      <td>Philadelphia</td>\n",
       "      <td>PA</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>39.955505</td>\n",
       "      <td>-75.155564</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>free</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>1</td>\n",
       "      <td>14569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Perkiomen Valley Brewery</td>\n",
       "      <td>Green Lane</td>\n",
       "      <td>PA</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "      <td>40.338183</td>\n",
       "      <td>-75.471659</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>2.0</td>\n",
       "      <td>True</td>\n",
       "      <td>no</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       name           city state  stars  is_open   latitude  \\\n",
       "0  Abby Rappoport, LAC, CMQ  Santa Barbara    CA    5.0        0  34.426679   \n",
       "1             The UPS Store         Affton    MO    3.0        1  38.551126   \n",
       "2                    Target         Tucson    AZ    3.5        0  32.223236   \n",
       "3        St Honore Pastries   Philadelphia    PA    4.0        1  39.955505   \n",
       "4  Perkiomen Valley Brewery     Green Lane    PA    4.5        1  40.338183   \n",
       "\n",
       "    longitude  ByAppointmentOnly  BikeParking  RestaurantsPriceRange2  \\\n",
       "0 -119.711197               True        False                     2.0   \n",
       "1  -90.335695              False        False                     2.0   \n",
       "2 -110.880452              False         True                     2.0   \n",
       "3  -75.155564              False         True                     1.0   \n",
       "4  -75.471659              False         True                     2.0   \n",
       "\n",
       "   RestaurantsTakeOut  WiFi  WheelchairAccessible  RestaurantsGoodForGroups  \\\n",
       "0               False    no                 False                     False   \n",
       "1               False    no                 False                     False   \n",
       "2               False    no                  True                     False   \n",
       "3                True  free                 False                     False   \n",
       "4                True    no                  True                     False   \n",
       "\n",
       "  BusinessParking_garage BusinessParking_street BusinessParking_validated  \\\n",
       "0                  False                  False                     False   \n",
       "1                  False                  False                     False   \n",
       "2                  False                  False                     False   \n",
       "3                  False                   True                     False   \n",
       "4                   True                   True                      True   \n",
       "\n",
       "  BusinessParking_lot BusinessParking_valet  has_parking  parking_status  \\\n",
       "0               False                 False        False               0   \n",
       "1               False                 False        False               0   \n",
       "2                True                 False         True               1   \n",
       "3               False                 False         True               1   \n",
       "4                True                 False         True               2   \n",
       "\n",
       "   city_encoded  \n",
       "0          3829  \n",
       "1            36  \n",
       "2          9250  \n",
       "3         14569  \n",
       "4            10  "
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# Frequency encoding for city\n",
    "city_counts = EDA_dataset['city'].value_counts()\n",
    "EDA_dataset['city_encoded'] = EDA_dataset['city'].map(city_counts)\n",
    "\n",
    "EDA_dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 330
    },
    "id": "NwL875VAfovo",
    "outputId": "26ca528b-bacb-4e5e-f081-3bf7d3542b2b"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>stars</th>\n",
       "      <th>is_open</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>ByAppointmentOnly</th>\n",
       "      <th>BikeParking</th>\n",
       "      <th>RestaurantsPriceRange2</th>\n",
       "      <th>RestaurantsTakeOut</th>\n",
       "      <th>WiFi</th>\n",
       "      <th>WheelchairAccessible</th>\n",
       "      <th>RestaurantsGoodForGroups</th>\n",
       "      <th>BusinessParking_garage</th>\n",
       "      <th>BusinessParking_street</th>\n",
       "      <th>BusinessParking_validated</th>\n",
       "      <th>BusinessParking_lot</th>\n",
       "      <th>BusinessParking_valet</th>\n",
       "      <th>has_parking</th>\n",
       "      <th>parking_status</th>\n",
       "      <th>city_encoded</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Abby Rappoport, LAC, CMQ</td>\n",
       "      <td>Santa Barbara</td>\n",
       "      <td>CA</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>34.426679</td>\n",
       "      <td>-119.711197</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>2.0</td>\n",
       "      <td>False</td>\n",
       "      <td>no</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>3829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The UPS Store</td>\n",
       "      <td>Affton</td>\n",
       "      <td>MO</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>38.551126</td>\n",
       "      <td>-90.335695</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>2.0</td>\n",
       "      <td>False</td>\n",
       "      <td>no</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Target</td>\n",
       "      <td>Tucson</td>\n",
       "      <td>AZ</td>\n",
       "      <td>3.5</td>\n",
       "      <td>0</td>\n",
       "      <td>32.223236</td>\n",
       "      <td>-110.880452</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>2.0</td>\n",
       "      <td>False</td>\n",
       "      <td>no</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>1</td>\n",
       "      <td>9250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>St Honore Pastries</td>\n",
       "      <td>Philadelphia</td>\n",
       "      <td>PA</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>39.955505</td>\n",
       "      <td>-75.155564</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>free</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>1</td>\n",
       "      <td>14569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Perkiomen Valley Brewery</td>\n",
       "      <td>Green Lane</td>\n",
       "      <td>PA</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "      <td>40.338183</td>\n",
       "      <td>-75.471659</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>2.0</td>\n",
       "      <td>True</td>\n",
       "      <td>no</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       name           city state  stars  is_open   latitude  \\\n",
       "0  Abby Rappoport, LAC, CMQ  Santa Barbara    CA    5.0        0  34.426679   \n",
       "1             The UPS Store         Affton    MO    3.0        1  38.551126   \n",
       "2                    Target         Tucson    AZ    3.5        0  32.223236   \n",
       "3        St Honore Pastries   Philadelphia    PA    4.0        1  39.955505   \n",
       "4  Perkiomen Valley Brewery     Green Lane    PA    4.5        1  40.338183   \n",
       "\n",
       "    longitude  ByAppointmentOnly  BikeParking  RestaurantsPriceRange2  \\\n",
       "0 -119.711197               True        False                     2.0   \n",
       "1  -90.335695              False        False                     2.0   \n",
       "2 -110.880452              False         True                     2.0   \n",
       "3  -75.155564              False         True                     1.0   \n",
       "4  -75.471659              False         True                     2.0   \n",
       "\n",
       "   RestaurantsTakeOut  WiFi  WheelchairAccessible  RestaurantsGoodForGroups  \\\n",
       "0               False    no                 False                     False   \n",
       "1               False    no                 False                     False   \n",
       "2               False    no                  True                     False   \n",
       "3                True  free                 False                     False   \n",
       "4                True    no                  True                     False   \n",
       "\n",
       "  BusinessParking_garage BusinessParking_street BusinessParking_validated  \\\n",
       "0                  False                  False                     False   \n",
       "1                  False                  False                     False   \n",
       "2                  False                  False                     False   \n",
       "3                  False                   True                     False   \n",
       "4                   True                   True                      True   \n",
       "\n",
       "  BusinessParking_lot BusinessParking_valet  has_parking  parking_status  \\\n",
       "0               False                 False        False               0   \n",
       "1               False                 False        False               0   \n",
       "2                True                 False         True               1   \n",
       "3               False                 False         True               1   \n",
       "4                True                 False         True               2   \n",
       "\n",
       "   city_encoded  \n",
       "0          3829  \n",
       "1            36  \n",
       "2          9250  \n",
       "3         14569  \n",
       "4            10  "
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "EDA_dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {
    "id": "moUGBUlDep4h"
   },
   "outputs": [],
   "source": [
    "# REMOVING UNNECESSARY COLUMNS\n",
    "EDA_dataset.drop(columns=['city', 'state','name','BusinessParking_validated','has_parking'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 226
    },
    "id": "jt4RFRs6hSnG",
    "outputId": "f81c72cf-8ee8-4583-d2dc-ec9940974c46"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stars</th>\n",
       "      <th>is_open</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>ByAppointmentOnly</th>\n",
       "      <th>BikeParking</th>\n",
       "      <th>RestaurantsPriceRange2</th>\n",
       "      <th>RestaurantsTakeOut</th>\n",
       "      <th>WiFi</th>\n",
       "      <th>WheelchairAccessible</th>\n",
       "      <th>RestaurantsGoodForGroups</th>\n",
       "      <th>BusinessParking_garage</th>\n",
       "      <th>BusinessParking_street</th>\n",
       "      <th>BusinessParking_lot</th>\n",
       "      <th>BusinessParking_valet</th>\n",
       "      <th>parking_status</th>\n",
       "      <th>city_encoded</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>34.426679</td>\n",
       "      <td>-119.711197</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>2.0</td>\n",
       "      <td>False</td>\n",
       "      <td>no</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>3829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>38.551126</td>\n",
       "      <td>-90.335695</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>2.0</td>\n",
       "      <td>False</td>\n",
       "      <td>no</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.5</td>\n",
       "      <td>0</td>\n",
       "      <td>32.223236</td>\n",
       "      <td>-110.880452</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>2.0</td>\n",
       "      <td>False</td>\n",
       "      <td>no</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>9250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>39.955505</td>\n",
       "      <td>-75.155564</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>free</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>14569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "      <td>40.338183</td>\n",
       "      <td>-75.471659</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>2.0</td>\n",
       "      <td>True</td>\n",
       "      <td>no</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   stars  is_open   latitude   longitude  ByAppointmentOnly  BikeParking  \\\n",
       "0    5.0        0  34.426679 -119.711197               True        False   \n",
       "1    3.0        1  38.551126  -90.335695              False        False   \n",
       "2    3.5        0  32.223236 -110.880452              False         True   \n",
       "3    4.0        1  39.955505  -75.155564              False         True   \n",
       "4    4.5        1  40.338183  -75.471659              False         True   \n",
       "\n",
       "   RestaurantsPriceRange2  RestaurantsTakeOut  WiFi  WheelchairAccessible  \\\n",
       "0                     2.0               False    no                 False   \n",
       "1                     2.0               False    no                 False   \n",
       "2                     2.0               False    no                  True   \n",
       "3                     1.0                True  free                 False   \n",
       "4                     2.0                True    no                  True   \n",
       "\n",
       "   RestaurantsGoodForGroups BusinessParking_garage BusinessParking_street  \\\n",
       "0                     False                  False                  False   \n",
       "1                     False                  False                  False   \n",
       "2                     False                  False                  False   \n",
       "3                     False                  False                   True   \n",
       "4                     False                   True                   True   \n",
       "\n",
       "  BusinessParking_lot BusinessParking_valet  parking_status  city_encoded  \n",
       "0               False                 False               0          3829  \n",
       "1               False                 False               0            36  \n",
       "2                True                 False               1          9250  \n",
       "3               False                 False               1         14569  \n",
       "4                True                 False               2            10  "
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "EDA_dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 226
    },
    "id": "XJq4_dbAhULt",
    "outputId": "201b4567-6cb3-4cba-994a-51d5d161cf25"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stars</th>\n",
       "      <th>is_open</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>ByAppointmentOnly</th>\n",
       "      <th>BikeParking</th>\n",
       "      <th>RestaurantsPriceRange2</th>\n",
       "      <th>RestaurantsTakeOut</th>\n",
       "      <th>WiFi</th>\n",
       "      <th>WheelchairAccessible</th>\n",
       "      <th>RestaurantsGoodForGroups</th>\n",
       "      <th>BusinessParking_garage</th>\n",
       "      <th>BusinessParking_street</th>\n",
       "      <th>BusinessParking_lot</th>\n",
       "      <th>BusinessParking_valet</th>\n",
       "      <th>parking_status</th>\n",
       "      <th>city_encoded</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>34.426679</td>\n",
       "      <td>-119.711197</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>38.551126</td>\n",
       "      <td>-90.335695</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.5</td>\n",
       "      <td>0</td>\n",
       "      <td>32.223236</td>\n",
       "      <td>-110.880452</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>39.955505</td>\n",
       "      <td>-75.155564</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>free</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>14569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "      <td>40.338183</td>\n",
       "      <td>-75.471659</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>no</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   stars  is_open   latitude   longitude  ByAppointmentOnly  BikeParking  \\\n",
       "0    5.0        0  34.426679 -119.711197                  1            0   \n",
       "1    3.0        1  38.551126  -90.335695                  0            0   \n",
       "2    3.5        0  32.223236 -110.880452                  0            1   \n",
       "3    4.0        1  39.955505  -75.155564                  0            1   \n",
       "4    4.5        1  40.338183  -75.471659                  0            1   \n",
       "\n",
       "   RestaurantsPriceRange2  RestaurantsTakeOut  WiFi  WheelchairAccessible  \\\n",
       "0                     2.0                   0    no                     0   \n",
       "1                     2.0                   0    no                     0   \n",
       "2                     2.0                   0    no                     1   \n",
       "3                     1.0                   1  free                     0   \n",
       "4                     2.0                   1    no                     1   \n",
       "\n",
       "   RestaurantsGoodForGroups  BusinessParking_garage  BusinessParking_street  \\\n",
       "0                         0                       0                       0   \n",
       "1                         0                       0                       0   \n",
       "2                         0                       0                       0   \n",
       "3                         0                       0                       1   \n",
       "4                         0                       1                       1   \n",
       "\n",
       "   BusinessParking_lot  BusinessParking_valet  parking_status  city_encoded  \n",
       "0                    0                      0               0          3829  \n",
       "1                    0                      0               0            36  \n",
       "2                    1                      0               1          9250  \n",
       "3                    0                      0               1         14569  \n",
       "4                    1                      0               2            10  "
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# categorical encoding\n",
    "bool_columns = ['ByAppointmentOnly', 'BikeParking',\n",
    "                'RestaurantsTakeOut', 'WheelchairAccessible',\n",
    "                'RestaurantsGoodForGroups',\n",
    "                'BusinessParking_garage', 'BusinessParking_street',\n",
    "                 'BusinessParking_lot',\n",
    "                'BusinessParking_valet']\n",
    "\n",
    "EDA_dataset[bool_columns] = EDA_dataset[bool_columns].astype(int)\n",
    "\n",
    "EDA_dataset.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 226
    },
    "id": "nljE32pijHHO",
    "outputId": "72947bb2-59d3-4ebc-87f7-ba6b0980970a"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stars</th>\n",
       "      <th>is_open</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>ByAppointmentOnly</th>\n",
       "      <th>BikeParking</th>\n",
       "      <th>RestaurantsPriceRange2</th>\n",
       "      <th>RestaurantsTakeOut</th>\n",
       "      <th>WiFi</th>\n",
       "      <th>WheelchairAccessible</th>\n",
       "      <th>RestaurantsGoodForGroups</th>\n",
       "      <th>BusinessParking_garage</th>\n",
       "      <th>BusinessParking_street</th>\n",
       "      <th>BusinessParking_lot</th>\n",
       "      <th>BusinessParking_valet</th>\n",
       "      <th>parking_status</th>\n",
       "      <th>city_encoded</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>34.426679</td>\n",
       "      <td>-119.711197</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>38.551126</td>\n",
       "      <td>-90.335695</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.5</td>\n",
       "      <td>0</td>\n",
       "      <td>32.223236</td>\n",
       "      <td>-110.880452</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>39.955505</td>\n",
       "      <td>-75.155564</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>14569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "      <td>40.338183</td>\n",
       "      <td>-75.471659</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   stars  is_open   latitude   longitude  ByAppointmentOnly  BikeParking  \\\n",
       "0    5.0        0  34.426679 -119.711197                  1            0   \n",
       "1    3.0        1  38.551126  -90.335695                  0            0   \n",
       "2    3.5        0  32.223236 -110.880452                  0            1   \n",
       "3    4.0        1  39.955505  -75.155564                  0            1   \n",
       "4    4.5        1  40.338183  -75.471659                  0            1   \n",
       "\n",
       "   RestaurantsPriceRange2  RestaurantsTakeOut  WiFi  WheelchairAccessible  \\\n",
       "0                     2.0                   0     0                     0   \n",
       "1                     2.0                   0     0                     0   \n",
       "2                     2.0                   0     0                     1   \n",
       "3                     1.0                   1     1                     0   \n",
       "4                     2.0                   1     0                     1   \n",
       "\n",
       "   RestaurantsGoodForGroups  BusinessParking_garage  BusinessParking_street  \\\n",
       "0                         0                       0                       0   \n",
       "1                         0                       0                       0   \n",
       "2                         0                       0                       0   \n",
       "3                         0                       0                       1   \n",
       "4                         0                       1                       1   \n",
       "\n",
       "   BusinessParking_lot  BusinessParking_valet  parking_status  city_encoded  \n",
       "0                    0                      0               0          3829  \n",
       "1                    0                      0               0            36  \n",
       "2                    1                      0               1          9250  \n",
       "3                    0                      0               1         14569  \n",
       "4                    1                      0               2            10  "
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# modifying wifi column\n",
    "\n",
    "EDA_dataset['WiFi'] = EDA_dataset['WiFi'].apply(lambda x: 0 if x == 'no' else 1)\n",
    "\n",
    "EDA_dataset.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "id": "kvYtBXYvk_5c"
   },
   "outputs": [],
   "source": [
    "#Saving the dataset for modelling\n",
    "\n",
    "EDA_dataset.to_csv('Model_dataset.csv', index=False)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "8fzIMaUym-6d",
    "outputId": "70d99f14-e899-4580-85c7-db3f0b1e2927"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 150346 entries, 0 to 150345\n",
      "Data columns (total 17 columns):\n",
      " #   Column                    Non-Null Count   Dtype  \n",
      "---  ------                    --------------   -----  \n",
      " 0   stars                     150346 non-null  float64\n",
      " 1   is_open                   150346 non-null  int64  \n",
      " 2   latitude                  150346 non-null  float64\n",
      " 3   longitude                 150346 non-null  float64\n",
      " 4   ByAppointmentOnly         150346 non-null  int64  \n",
      " 5   BikeParking               150346 non-null  int64  \n",
      " 6   RestaurantsPriceRange2    150346 non-null  float64\n",
      " 7   RestaurantsTakeOut        150346 non-null  int64  \n",
      " 8   WiFi                      150346 non-null  int64  \n",
      " 9   WheelchairAccessible      150346 non-null  int64  \n",
      " 10  RestaurantsGoodForGroups  150346 non-null  int64  \n",
      " 11  BusinessParking_garage    150346 non-null  int64  \n",
      " 12  BusinessParking_street    150346 non-null  int64  \n",
      " 13  BusinessParking_lot       150346 non-null  int64  \n",
      " 14  BusinessParking_valet     150346 non-null  int64  \n",
      " 15  parking_status            150346 non-null  int64  \n",
      " 16  city_encoded              150346 non-null  int64  \n",
      "dtypes: float64(4), int64(13)\n",
      "memory usage: 19.5 MB\n"
     ]
    }
   ],
   "source": [
    "model_df=pd.read_csv('Model_dataset.csv')\n",
    "model_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "CE4syf8oppiW"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "JKpB7i1_m2Ai"
   },
   "source": [
    "Next steps:\n",
    "\n",
    "split the dataset and use standardization and train the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 564
    },
    "id": "sEPURuDWrHhL",
    "outputId": "2bdcaa50-93f4-42d5-b509-13f3aeafa2cd"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Scatter plot to check class separability\n",
    "plt.figure(figsize=(10, 6))\n",
    "palette = {0: 'red', 1: 'blue',2:'green'}\n",
    "sns.scatterplot(data=EDA_dataset, x='longitude', y='latitude', hue='parking_status',palette=palette,alpha=0.5)\n",
    "plt.title('Class Separability: Parking Status')\n",
    "plt.xlabel('Longitude')\n",
    "plt.ylabel('Latitude')\n",
    "plt.legend(title='Parking Status')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "GhaSRmB3i9r5"
   },
   "source": [
    "***Train test split***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "3bldSBh9j9fy",
    "outputId": "f13db1b3-b6fd-4286-a160-fc708accc196"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of x_train: (120276, 16)\n",
      "Shape of x_test: (30070, 16)\n",
      "Shape of y_train: (120276,)\n",
      "Shape of y_test: (30070,)\n"
     ]
    }
   ],
   "source": [
    "x = EDA_dataset.drop(columns=['parking_status'])\n",
    "y = EDA_dataset['parking_status']\n",
    "\n",
    "\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2,random_state=42,stratify=y)\n",
    "\n",
    "print(\"Shape of x_train:\", x_train.shape)\n",
    "print(\"Shape of x_test:\", x_test.shape)\n",
    "print(\"Shape of y_train:\", y_train.shape)\n",
    "print(\"Shape of y_test:\", y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 209
    },
    "id": "fYknCbhuq_IF",
    "outputId": "c3daeb9b-c91a-4871-cb42-85e198056825"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "parking_status\n",
       "1    60919\n",
       "0    53079\n",
       "2     6278\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Class imbalance\n",
    "y_train.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "1sCHXK9tqf2g",
    "outputId": "bfcad626-8a12-4cb5-dcaa-c887663600ab"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "parking_status\n",
      "0    60919\n",
      "1    60919\n",
      "2    60919\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#smote\n",
    "\n",
    "from imblearn.over_sampling import SMOTE\n",
    "\n",
    "\n",
    "smote = SMOTE(random_state=42)\n",
    "\n",
    "\n",
    "x_train_smote, y_train_smote = smote.fit_resample(x_train, y_train)\n",
    "\n",
    "\n",
    "\n",
    "print(y_train_smote.value_counts())\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "G9Q9d9NzzBSv"
   },
   "source": [
    "# standardization\n",
    "\n",
    "not needed for tree based models. But if you want to do ,please make sure to pass this in pipeline\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 741
    },
    "id": "YAeXveQ6rFOA",
    "outputId": "31da1e33-da6c-41c2-e250-af02a731b10d"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Feature importance using Random Forest\n",
    "\n",
    "rf_model = RandomForestClassifier(random_state=42)\n",
    "rf_model.fit(x_train_smote, y_train_smote)\n",
    "\n",
    "\n",
    "importances = rf_model.feature_importances_\n",
    "feature_importance = pd.Series(importances, index=x.columns).sort_values(ascending=False)\n",
    "\n",
    "\n",
    "plt.figure(figsize=(12, 6))\n",
    "feature_importance.plot(kind='bar')\n",
    "plt.title('Feature Importance from Random Forest')\n",
    "plt.xlabel('Features')\n",
    "plt.ylabel('Importance Score')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "PexmreLYxCtm"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "JUt_XJ9rxl9J"
   },
   "source": [
    "\n",
    "\n",
    "### summary\n",
    "\n",
    "1. **Data Cleaning**:\n",
    "   - Addressed missing values by filling with appropriate substitutes (eg `False` for boolean features, mode for categorical features).\n",
    "\n",
    "2. **Feature Engineering**:\n",
    "   - Converted boolean values to integers (0 and 1) for easier modeling.\n",
    "   - Used frequency encoding for city, replacing cities with their counts of occurrences.\n",
    "\n",
    "\n",
    "### Feature Explanation and Relation to parking_status\n",
    "\n",
    "1. **stars**:\n",
    "   - higher ratings may correlate with better amenities, including parking.\n",
    "\n",
    "2. **is_open**:\n",
    "   - Indicates whether the business is currently open, affecting customer flow and parking needs.\n",
    "\n",
    "3. **latitude and longitude**:\n",
    "   - Geographical features help identify location-related parking dynamics.\n",
    "\n",
    "4. **ByAppointmentOnly**:\n",
    "   - Appointment-only businesses may have fewer visitors at any time, reducing parking demand.\n",
    "\n",
    "5. **BikeParking**: self explnatory\n",
    "\n",
    "6. **RestaurantsPriceRange2**:\n",
    "   - Price range attracts different demographics, impacting expected customer volumes and parking needs.\n",
    "\n",
    "7. **RestaurantsTakeOut**:\n",
    "   - Takeout options may result in no parking requirements compared to dine-in services.\n",
    "\n",
    "8. **WiFi**:\n",
    "   - Availability can attract more customers who may stay longer, influencing parking duration.\n",
    "\n",
    "9. **WheelchairAccessible**:\n",
    "   - Accessibility features are important for certain segments, potentially affecting parking usage.\n",
    "\n",
    "10. **RestaurantsGoodForGroups**:\n",
    "    - Suitable for group gatherings, leading to larger customer volumes and increased parking demand.\n",
    "\n",
    "11. **BusinessParking_garage, BusinessParking_street, BusinessParking_lot, BusinessParking_valet**:\n",
    "    - Direct indicators of available parking types; critical for predicting parking availability.\n",
    "\n",
    "12. **city_encoded**:\n",
    "    - Represents city frequency,some cities may have more or fewer parking challenges based on urban factors.\n",
    "\n",
    "**Target Variable** - Parking Status\n",
    "\n",
    " values - 0 indicate no parking\n",
    "\n",
    " value - 1 indicate parking available but not validated\n",
    "\n",
    " value -2 indicates parking available and validated\n",
    "\n",
    "\n",
    "\n",
    "**Train test split**\n",
    "\n",
    "**SMOTE to handle imbalance in the data**\n",
    "\n",
    "**Feature Importance using Random Forest**\n",
    "\n",
    "**Will compare feature importance after implementation of Lime**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "1bU4jJzaH3_d"
   },
   "source": [
    "#### Summary of outputs from feature importance:\n",
    "\n",
    "- **Parking options** (lot, garage, street) dominate the feature importance ranking, indicating that easy access to parking is a major factor in business performance or customer satisfaction.\n",
    "\n",
    "- **Geographical location** (longitude and latitude) also plays a significant role, suggesting that where a business is located can affect its success.\n",
    "\n",
    "- **Price range** is moderately important, meaning that while price matters, other factors like parking have a stronger influence.\n",
    "\n",
    "- Features like **WiFi** and **wheelchair accessibility**, while important from a customer service standpoint, contribute less to the model's predictive power."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "DqXfKphBH3_d"
   },
   "source": [
    "### Data Visualisation for Feature Engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {
    "id": "dn6-oulEH3_d",
    "outputId": "aa2b686a-13d6-4d65-e816-0d67ffcb34ca"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 150346 entries, 0 to 150345\n",
      "Data columns (total 17 columns):\n",
      " #   Column                    Non-Null Count   Dtype  \n",
      "---  ------                    --------------   -----  \n",
      " 0   stars                     150346 non-null  float64\n",
      " 1   is_open                   150346 non-null  int64  \n",
      " 2   latitude                  150346 non-null  float64\n",
      " 3   longitude                 150346 non-null  float64\n",
      " 4   ByAppointmentOnly         150346 non-null  int32  \n",
      " 5   BikeParking               150346 non-null  int32  \n",
      " 6   RestaurantsPriceRange2    150346 non-null  float64\n",
      " 7   RestaurantsTakeOut        150346 non-null  int32  \n",
      " 8   WiFi                      150346 non-null  int64  \n",
      " 9   WheelchairAccessible      150346 non-null  int32  \n",
      " 10  RestaurantsGoodForGroups  150346 non-null  int32  \n",
      " 11  BusinessParking_garage    150346 non-null  int32  \n",
      " 12  BusinessParking_street    150346 non-null  int32  \n",
      " 13  BusinessParking_lot       150346 non-null  int32  \n",
      " 14  BusinessParking_valet     150346 non-null  int32  \n",
      " 15  parking_status            150346 non-null  int64  \n",
      " 16  city_encoded              150346 non-null  int64  \n",
      "dtypes: float64(4), int32(9), int64(4)\n",
      "memory usage: 14.3 MB\n"
     ]
    }
   ],
   "source": [
    "EDA_dataset.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {
    "id": "bq_CuCoiH3_d",
    "outputId": "a74fbe7a-0952-4079-ae69-0a0ba423fb4b",
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stars</th>\n",
       "      <th>is_open</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>ByAppointmentOnly</th>\n",
       "      <th>BikeParking</th>\n",
       "      <th>RestaurantsPriceRange2</th>\n",
       "      <th>RestaurantsTakeOut</th>\n",
       "      <th>WiFi</th>\n",
       "      <th>WheelchairAccessible</th>\n",
       "      <th>RestaurantsGoodForGroups</th>\n",
       "      <th>BusinessParking_garage</th>\n",
       "      <th>BusinessParking_street</th>\n",
       "      <th>BusinessParking_lot</th>\n",
       "      <th>BusinessParking_valet</th>\n",
       "      <th>parking_status</th>\n",
       "      <th>city_encoded</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>150346.000000</td>\n",
       "      <td>150346.00000</td>\n",
       "      <td>150346.000000</td>\n",
       "      <td>150346.000000</td>\n",
       "      <td>150346.000000</td>\n",
       "      <td>150346.000000</td>\n",
       "      <td>150346.000000</td>\n",
       "      <td>150346.000000</td>\n",
       "      <td>150346.000000</td>\n",
       "      <td>150346.000000</td>\n",
       "      <td>150346.000000</td>\n",
       "      <td>150346.000000</td>\n",
       "      <td>150346.000000</td>\n",
       "      <td>150346.000000</td>\n",
       "      <td>150346.000000</td>\n",
       "      <td>150346.000000</td>\n",
       "      <td>150346.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>3.596724</td>\n",
       "      <td>0.79615</td>\n",
       "      <td>36.671150</td>\n",
       "      <td>-89.357339</td>\n",
       "      <td>0.103821</td>\n",
       "      <td>0.366089</td>\n",
       "      <td>1.868377</td>\n",
       "      <td>0.352141</td>\n",
       "      <td>0.233016</td>\n",
       "      <td>0.172888</td>\n",
       "      <td>0.253735</td>\n",
       "      <td>0.072918</td>\n",
       "      <td>0.206184</td>\n",
       "      <td>0.340721</td>\n",
       "      <td>0.044018</td>\n",
       "      <td>0.610891</td>\n",
       "      <td>4466.113006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.974421</td>\n",
       "      <td>0.40286</td>\n",
       "      <td>5.872759</td>\n",
       "      <td>14.918502</td>\n",
       "      <td>0.305029</td>\n",
       "      <td>0.481736</td>\n",
       "      <td>0.500559</td>\n",
       "      <td>0.477639</td>\n",
       "      <td>0.422754</td>\n",
       "      <td>0.378152</td>\n",
       "      <td>0.435149</td>\n",
       "      <td>0.260003</td>\n",
       "      <td>0.404566</td>\n",
       "      <td>0.473953</td>\n",
       "      <td>0.205137</td>\n",
       "      <td>0.584897</td>\n",
       "      <td>4620.956450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>27.555127</td>\n",
       "      <td>-120.095137</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>32.187293</td>\n",
       "      <td>-90.357810</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>313.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.500000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>38.777413</td>\n",
       "      <td>-86.121179</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2937.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>4.500000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>39.954036</td>\n",
       "      <td>-75.421542</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>7540.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>53.679197</td>\n",
       "      <td>-73.200457</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>14569.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               stars       is_open       latitude      longitude  \\\n",
       "count  150346.000000  150346.00000  150346.000000  150346.000000   \n",
       "mean        3.596724       0.79615      36.671150     -89.357339   \n",
       "std         0.974421       0.40286       5.872759      14.918502   \n",
       "min         1.000000       0.00000      27.555127    -120.095137   \n",
       "25%         3.000000       1.00000      32.187293     -90.357810   \n",
       "50%         3.500000       1.00000      38.777413     -86.121179   \n",
       "75%         4.500000       1.00000      39.954036     -75.421542   \n",
       "max         5.000000       1.00000      53.679197     -73.200457   \n",
       "\n",
       "       ByAppointmentOnly    BikeParking  RestaurantsPriceRange2  \\\n",
       "count      150346.000000  150346.000000           150346.000000   \n",
       "mean            0.103821       0.366089                1.868377   \n",
       "std             0.305029       0.481736                0.500559   \n",
       "min             0.000000       0.000000                1.000000   \n",
       "25%             0.000000       0.000000                2.000000   \n",
       "50%             0.000000       0.000000                2.000000   \n",
       "75%             0.000000       1.000000                2.000000   \n",
       "max             1.000000       1.000000                4.000000   \n",
       "\n",
       "       RestaurantsTakeOut           WiFi  WheelchairAccessible  \\\n",
       "count       150346.000000  150346.000000         150346.000000   \n",
       "mean             0.352141       0.233016              0.172888   \n",
       "std              0.477639       0.422754              0.378152   \n",
       "min              0.000000       0.000000              0.000000   \n",
       "25%              0.000000       0.000000              0.000000   \n",
       "50%              0.000000       0.000000              0.000000   \n",
       "75%              1.000000       0.000000              0.000000   \n",
       "max              1.000000       1.000000              1.000000   \n",
       "\n",
       "       RestaurantsGoodForGroups  BusinessParking_garage  \\\n",
       "count             150346.000000           150346.000000   \n",
       "mean                   0.253735                0.072918   \n",
       "std                    0.435149                0.260003   \n",
       "min                    0.000000                0.000000   \n",
       "25%                    0.000000                0.000000   \n",
       "50%                    0.000000                0.000000   \n",
       "75%                    1.000000                0.000000   \n",
       "max                    1.000000                1.000000   \n",
       "\n",
       "       BusinessParking_street  BusinessParking_lot  BusinessParking_valet  \\\n",
       "count           150346.000000        150346.000000          150346.000000   \n",
       "mean                 0.206184             0.340721               0.044018   \n",
       "std                  0.404566             0.473953               0.205137   \n",
       "min                  0.000000             0.000000               0.000000   \n",
       "25%                  0.000000             0.000000               0.000000   \n",
       "50%                  0.000000             0.000000               0.000000   \n",
       "75%                  0.000000             1.000000               0.000000   \n",
       "max                  1.000000             1.000000               1.000000   \n",
       "\n",
       "       parking_status   city_encoded  \n",
       "count   150346.000000  150346.000000  \n",
       "mean         0.610891    4466.113006  \n",
       "std          0.584897    4620.956450  \n",
       "min          0.000000       1.000000  \n",
       "25%          0.000000     313.000000  \n",
       "50%          1.000000    2937.000000  \n",
       "75%          1.000000    7540.000000  \n",
       "max          2.000000   14569.000000  "
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "EDA_dataset.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "zJavtI13H3_d"
   },
   "source": [
    "#### Handling Categorical Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {
    "id": "NVEaOwwQH3_d",
    "outputId": "9d91bbf4-0492-4ca4-8b34-17e4e40463c2"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Countplots: To visualize how binary features are distributed\n",
    "sns.countplot(x='is_open', data=EDA_dataset)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "PvBtfErqH3_d",
    "outputId": "829ef33a-c73b-4e08-d8e9-7f3019cf6cc2"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='ByAppointmentOnly', data=EDA_dataset)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {
    "id": "LGY117qXH3_d",
    "outputId": "f4a137b2-43bc-4d5d-db41-b1f6eb7576fb"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Bar Plots for Parking Features: To check how many businesses offer parking facilities\n",
    "sns.countplot(x='BusinessParking_garage', data=EDA_dataset)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {
    "id": "9FrxaMK-H3_d",
    "outputId": "cc9a8548-c8c2-48a9-cbe6-5c34d8227c86"
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkIAAAGtCAYAAAD6XRvKAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8fJSN1AAAACXBIWXMAAA9hAAAPYQGoP6dpAABMKElEQVR4nO3de1xUdf4/8NfIZQSCEVAYJlEoXUShdKEUTdFQ8IJ2+2a71KS7RvnzQgpEoVtp31U2RaWkvK2KecPvd4m2TWNBU4wVFJDZRAltFwV1RrzgIAgD4vn94XK+HUG8NMPF83o+HvN4dD7nfea8D2a8+pybQhAEAUREREQy1K2jGyAiIiLqKAxCREREJFsMQkRERCRbDEJEREQkWwxCREREJFsMQkRERCRbDEJEREQkWwxCREREJFsMQkRERCRb1h3dQGd38+ZNnD9/Ho6OjlAoFB3dDhEREd0DQRBw7do1aDQadOvWxryPcJ+ys7OF8PBwwcPDQwAgpKen37H2zTffFAAIq1atkozX19cLc+bMEVxdXQV7e3th8uTJQkVFhaTmypUrwmuvvSY4OTkJTk5OwmuvvSZUVVVJas6cOSOEh4cL9vb2gqurqzB37lzBZDJJan744Qdh1KhRQvfu3QWNRiMsXrxYuHnz5j0fb0VFhQCAH3744Ycffvjpgp/b88Xt7ntGqLa2Fk8++SR+97vf4aWXXrpj3VdffYXDhw9Do9G0WDdv3jz87W9/Q2pqKlxdXRETE4Pw8HAUFhbCysoKABAREYGzZ88iIyMDAPDmm29Cq9Xib3/7GwCgqakJkyZNQq9evZCTk4PLly9j2rRpEAQBq1evBgBUV1dj3LhxGDNmDPLz83Hy5ElMnz4dDg4OiImJuafjdXR0BABUVFTAycnp3n9QRERE1GGqq6vh6ekp/h6/o3ueGmkF0PqM0NmzZ4VHH31UKC4uFvr27SuZEbp69apgY2MjpKamimPnzp0TunXrJmRkZAiCIAgnTpwQAAh5eXliTW5urgBA+PHHHwVBEIQ9e/YI3bp1E86dOyfW7Ny5U1AqlYLRaBQEQRA+//xzQaVSCfX19WJNQkKCoNFo7nlWyGg0CgDE7yQiIqLO715/f5v9YumbN29Cq9XinXfewaBBg1qsLywsRGNjI0JDQ8UxjUYDPz8/HDp0CACQm5sLlUqFoUOHijXDhg2DSqWS1Pj5+UlmnMLCwmAymVBYWCjWBAcHQ6lUSmrOnz+P06dPt9q/yWRCdXW15ENEREQPJ7MHoY8//hjW1taIiopqdb3BYICtrS2cnZ0l4+7u7jAYDGKNm5tbi23d3NwkNe7u7pL1zs7OsLW1bbOmebm55nYJCQlQqVTix9PT826HTERERF2UWYNQYWEhPvnkE6SkpNz3HVaCIEi2aW17c9QIgnDHbQEgPj4eRqNR/FRUVNzXcRAREVHXYdbb57///ntUVlaiT58+4lhTUxNiYmKQlJSE06dPQ61Wo6GhAVVVVZJZocrKSgwfPhwAoFarceHChRbff/HiRXFGR61W4/Dhw5L1VVVVaGxslNTcPvNTWVkJAC1mipoplUrJqTQiIqLOoKmpCY2NjR3dRqdhY2Mj3mD1S5g1CGm1WowdO1YyFhYWBq1Wi9/97ncAgICAANjY2CArKwtTp04FAOj1ehQXF2PZsmUAgKCgIBiNRhw5cgRPP/00AODw4cMwGo1iWAoKCsKSJUug1+vh4eEBAMjMzIRSqURAQIBYs2DBAjQ0NMDW1las0Wg08PLyMuehExERWYQgCDAYDLh69WpHt9Lp9OjRA2q1+hc95+++g1BNTQ1++ukncbmsrAw6nQ4uLi7o06cPXF1dJfU2NjZQq9Xw8fEBAKhUKsyYMQMxMTFwdXWFi4sLYmNj4e/vL4YoX19fjB8/HpGRkVi3bh2AW7fPh4eHi98TGhqKgQMHQqvVYvny5bhy5QpiY2MRGRkp3uYeERGBxYsXY/r06ViwYAFOnTqFpUuX4oMPPuDDEYmIqEtoDkFubm6wt7fn7y/cCofXr18Xz/I0T4g86Jfdl/3797f6wKJp06a1Wn/77fOCIAh1dXXCnDlzBBcXF8HOzk4IDw8XysvLJTWXL18WXn31VcHR0VFwdHQUXn311VYfqDhp0iTBzs5OcHFxEebMmSO5VV4Qbj1QceTIkYJSqRTUarWwaNGi+3qgIm+fJyKijnLjxg3hxIkTwqVLlzq6lU7p0qVLwokTJ4QbN260WHevv78VgvCfq4epVdXV1VCpVDAajXygIhERtav6+nqUlZXBy8sLdnZ2Hd1Op1NXV4fTp0/D29sb3bt3l6y719/ffOkqERFRJ8fTYa0zx8+FQYiIiIhki0GIiIiIZItBiIiIiAAA06dPx/PPP9/RbbQrBiEiIiIyq6704EcGISIiIpn5y1/+An9/f9jZ2cHV1RVjx47FO++8gy1btuCvf/0rFAoFFAoFDhw4AAB499138atf/Qr29vZ47LHH8P7770vCzqJFizB48GBs2rQJjz32GJRKJQRBaHU/tbW1HXTUrTPrk6WJiIioc9Pr9fjtb3+LZcuW4YUXXsC1a9fw/fff4/XXX0d5eTmqq6uxefNmAICLiwsAwNHRESkpKdBoNDh27BgiIyPh6OiIuLg48Xt/+ukn/M///A/S0tJgZWUFg8HQ6n4621N7GITojvZ993hHt0DtKOTZf3V0C0TUDvR6PW7cuIEXX3wRffv2BQD4+/sDAOzs7GAymaBWqyXb/OEPfxD/2cvLCzExMdi1a5ckCDU0NGDr1q3o1asXAODo0aN33E9nwlNjREREMvLkk08iJCQE/v7+ePnll7FhwwZUVVW1uc1f/vIXPPPMM1Cr1XjkkUfw/vvvo7y8XFLTt29fMQQ96H46AoMQERGRjFhZWSErKwvffvstBg4ciNWrV8PHxwdlZWWt1ufl5eE3v/kNJkyYgG+++QZFRUVYuHAhGhoaJHUODg6/aD8dhUGIiIhIZhQKBUaMGIHFixejqKgItra2SE9Ph62tLZqamiS1//jHP9C3b18sXLgQgYGB6N+/P86cOfOL9tOZ8BohIiIiGTl8+DD27duH0NBQuLm54fDhw7h48SJ8fX1RX1+Pv//97ygtLYWrqytUKhX69euH8vJypKam4qmnnsLu3bvvKcy0tZ/OhEGIiIhIRpycnHDw4EEkJSWhuroaffv2xYoVKzBhwgQEBgbiwIEDCAwMRE1NDfbv34/nnnsO8+fPx5w5c2AymTBp0iS8//77WLRo0QPvpzPh2+fvQs5vn+ddY/LCu8aIOp/mt8+39nZ1avvnw7fPExEREd0FgxARERHJFoMQERERyRaDEBEREckWgxARERHJFoMQERERyRaDEBEREckWgxARERHJFoMQERERyRaDEBEREckW3zVGRETUxXi9t7td93f6T5Pue5uDBw9i+fLlKCwshF6vR3p6Op5//vk2t8nOzkZ0dDSOHz8OjUaDuLg4zJw58wG7vjecESIiIiKzq62txZNPPonk5OR7qi8rK8PEiRMxcuRIFBUVYcGCBYiKikJaWppF++SMEBEREZndhAkT7utN82vXrkWfPn2QlJQEAPD19UVBQQESExPx0ksvWahLzggRERFRJ5Cbm4vQ0FDJWFhYGAoKCtDY2Gix/TIIERERUYczGAxwd3eXjLm7u+PGjRu4dOmSxfbLIERERESdgkKhkCwLgtDquDkxCBEREVGHU6vVMBgMkrHKykpYW1vD1dXVYvtlECIiIqIOFxQUhKysLMlYZmYmAgMDYWNjY7H9MggRERGR2dXU1ECn00Gn0wG4dXu8TqdDeXk5ACA+Ph6vv/66WD9z5kycOXMG0dHRKCkpwaZNm7Bx40bExsZatE/ePk9ERERmV1BQgDFjxojL0dHRAIBp06YhJSUFer1eDEUA4O3tjT179mD+/Pn47LPPoNFo8Omnn1r01nmAQYiIiKjLeZAnPbe30aNHixc7tyYlJaXFWHBwMI4ePWrBrlriqTEiIiKSLQYhIiIiki0GISIiIpItBiEiIiKSLV4sTXf0/UFtR7dA7Sjk2Y7ugIio/XFGiIiIiGTrvoPQwYMHMXnyZGg0GigUCnz11VfiusbGRrz77rvw9/eHg4MDNBoNXn/9dZw/f17yHSaTCXPnzkXPnj3h4OCAKVOm4OzZs5KaqqoqaLVaqFQqqFQqaLVaXL16VVJTXl6OyZMnw8HBAT179kRUVBQaGhokNceOHUNwcDDs7Ozw6KOP4qOPPmrzdj4iIiKSj/sOQrW1tXjyySeRnJzcYt3169dx9OhRvP/++zh69Ci+/PJLnDx5ElOmTJHUzZs3D+np6UhNTUVOTg5qamoQHh6OpqYmsSYiIgI6nQ4ZGRnIyMiATqeDVvt/p2qampowadIk1NbWIicnB6mpqUhLS0NMTIxYU11djXHjxkGj0SA/Px+rV69GYmIiVq5ceb+HTURERA+h+75GaMKECZgwYUKr61QqVYv3hKxevRpPP/00ysvL0adPHxiNRmzcuBFbt27F2LFjAQDbtm2Dp6cn9u7di7CwMJSUlCAjIwN5eXkYOnQoAGDDhg0ICgpCaWkpfHx8kJmZiRMnTqCiogIajQYAsGLFCkyfPh1LliyBk5MTtm/fjvr6eqSkpECpVMLPzw8nT57EypUrER0dbdG32RIREVHnZ/FrhIxGIxQKBXr06AEAKCwsRGNjI0JDQ8UajUYDPz8/HDp0CACQm5sLlUolhiAAGDZsGFQqlaTGz89PDEEAEBYWBpPJhMLCQrEmODgYSqVSUnP+/HmcPn261X5NJhOqq6slHyIiIno4WfSusfr6erz33nuIiIiAk5MTAMBgMMDW1hbOzs6SWnd3dxgMBrHGzc2txfe5ublJatzd3SXrnZ2dYWtrK6nx8vJqsZ/mdd7e3i32kZCQgMWLFz/A0RIREbWTRap23p/xvjc5ePAgli9fjsLCQuj1eqSnp+P555+/Y/2BAwck7yZrVlJSggEDBtz3/u+VxWaEGhsb8Zvf/AY3b97E559/ftd6QRAkp6paO21ljprmC6XvdFosPj4eRqNR/FRUVNy1dyIiIpJq65ritpSWlkKv14uf/v37W6jDWywyI9TY2IipU6eirKwM3333nTgbBABqtRoNDQ2oqqqSzApVVlZi+PDhYs2FCxdafO/FixfFGR21Wo3Dhw9L1ldVVaGxsVFS0zw79PP9AGgxm9RMqVRKTqURERHR/WvrmuK2uLm5iZfTtAezzwg1h6BTp05h7969cHV1lawPCAiAjY2N5KJqvV6P4uJiMQgFBQXBaDTiyJEjYs3hw4dhNBolNcXFxdDr9WJNZmYmlEolAgICxJqDBw9KbqnPzMyERqNpccqMiIiIOt6QIUPg4eGBkJAQ7N+/3+L7u+8gVFNTA51OB51OBwAoKyuDTqdDeXk5bty4gf/6r/9CQUEBtm/fjqamJhgMBhgMBjGMqFQqzJgxAzExMdi3bx+Kiorw2muvwd/fX7yLzNfXF+PHj0dkZCTy8vKQl5eHyMhIhIeHw8fHBwAQGhqKgQMHQqvVoqioCPv27UNsbCwiIyPFGaiIiAgolUpMnz4dxcXFSE9Px9KlS3nHGBERUSfj4eGB9evXIy0tDV9++SV8fHwQEhKCgwcPWnS/931qrKCgQHIxU3R0NABg2rRpWLRoEb7++msAwODBgyXb7d+/H6NHjwYArFq1CtbW1pg6dSrq6uoQEhKClJQUWFlZifXbt29HVFSUeHfZlClTJOcZrayssHv3bsyaNQsjRoyAnZ0dIiIikJiYKNY0384/e/ZsBAYGwtnZGdHR0WLPRERE1Dn4+PiIkx3ArbM6FRUVSExMxKhRoyy23/sOQqNHj27zycz38tTm7t27Y/Xq1Vi9evUda1xcXLBt27Y2v6dPnz745ptv2qzx9/e3eJokIiIi8xs2bNhds8AvxXeNERERUadUVFQEDw8Pi+6Db58nIiIis6upqcFPP/0kLjdfU+zi4oI+ffogPj4e586dwxdffAEASEpKgpeXFwYNGoSGhgZs27YNaWlpSEtLs2ifDEJERERkdm1dU5ySkgK9Xo/y8nJxfUNDA2JjY3Hu3DnY2dlh0KBB2L17NyZOnGjRPhmEiIiIupoHeNJze7vbNcUpKSmS5bi4OMTFxVm4q5Z4jRARERHJFoMQERERyRaDEBEREckWgxARERHJFoMQERERyRaDEBEREckWgxARERHJFoMQERERyRaDEBEREckWgxARERHJFl+xQURE1MX4b/Fv1/0dm3bsvuoTEhLw5Zdf4scff4SdnR2GDx+Ojz/+GD4+Pm1ul52djejoaBw/fhwajQZxcXGYOXPmL2n9rjgjRERERGaVnZ2N2bNnIy8vD1lZWbhx4wZCQ0NRW1t7x23KysowceJEjBw5EkVFRViwYAGioqL49nkiIiLqWjIyMiTLmzdvhpubGwoLCzFq1KhWt1m7di369OmDpKQkAICvry8KCgqQmJiIl156yWK9ckaIiIiILMpoNAIAXFxc7liTm5uL0NBQyVhYWBgKCgrQ2Nhosd4YhIiIiMhiBEFAdHQ0nnnmGfj5+d2xzmAwwN3dXTLm7u6OGzdu4NKlSxbrj6fGiIiIyGLmzJmDH374ATk5OXetVSgUkmVBEFodNycGISIiIrKIuXPn4uuvv8bBgwfRu3fvNmvVajUMBoNkrLKyEtbW1nB1dbVYjzw1RkRERGYlCALmzJmDL7/8Et999x28vb3vuk1QUBCysrIkY5mZmQgMDISNjY2lWmUQIiIiIvOaPXs2tm3bhh07dsDR0REGgwEGgwF1dXViTXx8PF5//XVxeebMmThz5gyio6NRUlKCTZs2YePGjYiNjbVorwxCREREZFZr1qyB0WjE6NGj4eHhIX527dol1uj1epSXl4vL3t7e2LNnDw4cOIDBgwfjv//7v/Hpp59a9NZ5gNcIERERdTn3+6Tn9tZ8kXNbUlJSWowFBwfj6NGjFujozjgjRERERLLFIERERESyxSBEREREssUgRERERLLFIERERESyxSBEREREssUgRERERLLFIERERESyxSBEREREssUgRERERLLFV2wQERF1MSUDfNt1f74/ltxXfUJCAr788kv8+OOPsLOzw/Dhw/Hxxx/Dx8fnjtscOHAAY8aMaTFeUlKCAQMG3HfP94ozQkRERGRW2dnZmD17NvLy8pCVlYUbN24gNDQUtbW1d922tLQUer1e/PTv39+ivXJGiIiIiMwqIyNDsrx582a4ubmhsLAQo0aNanNbNzc39OjRw4LdSXFGiIiIiCzKaDQCAFxcXO5aO2TIEHh4eCAkJAT79++3dGsMQkRERGQ5giAgOjoazzzzDPz8/O5Y5+HhgfXr1yMtLQ1ffvklfHx8EBISgoMHD1q0P54aIyIiIouZM2cOfvjhB+Tk5LRZ5+PjI7mYOigoCBUVFUhMTLzr6bRf4r5nhA4ePIjJkydDo9FAoVDgq6++kqwXBAGLFi2CRqOBnZ0dRo8ejePHj0tqTCYT5s6di549e8LBwQFTpkzB2bNnJTVVVVXQarVQqVRQqVTQarW4evWqpKa8vByTJ0+Gg4MDevbsiaioKDQ0NEhqjh07huDgYNjZ2eHRRx/FRx99BEEQ7vewiYiI6D7NnTsXX3/9Nfbv34/evXvf9/bDhg3DqVOnLNDZ/7nvIFRbW4snn3wSycnJra5ftmwZVq5cieTkZOTn50OtVmPcuHG4du2aWDNv3jykp6cjNTUVOTk5qKmpQXh4OJqamsSaiIgI6HQ6ZGRkICMjAzqdDlqtVlzf1NSESZMmoba2Fjk5OUhNTUVaWhpiYmLEmurqaowbNw4ajQb5+flYvXo1EhMTsXLlyvs9bCIiIrpHgiBgzpw5+PLLL/Hdd9/B29v7gb6nqKgIHh4eZu5O6r5PjU2YMAETJkxodZ0gCEhKSsLChQvx4osvAgC2bNkCd3d37NixA2+99RaMRiM2btyIrVu3YuzYsQCAbdu2wdPTE3v37kVYWBhKSkqQkZGBvLw8DB06FACwYcMGBAUFobS0FD4+PsjMzMSJEydQUVEBjUYDAFixYgWmT5+OJUuWwMnJCdu3b0d9fT1SUlKgVCrh5+eHkydPYuXKlYiOjoZCoXigHxoRERHd2ezZs7Fjxw789a9/haOjIwwGAwBApVLBzs4OABAfH49z587hiy++AAAkJSXBy8sLgwYNQkNDA7Zt24a0tDSkpaVZtFezXixdVlYGg8GA0NBQcUypVCI4OBiHDh0CABQWFqKxsVFSo9Fo4OfnJ9bk5uZCpVKJIQi4NT2mUqkkNX5+fmIIAoCwsDCYTCYUFhaKNcHBwVAqlZKa8+fP4/Tp0+Y8dCIiIvqPNWvWwGg0YvTo0fDw8BA/u3btEmv0ej3Ky8vF5YaGBsTGxuKJJ57AyJEjkZOTg927d4sTK5Zi1oulmxOfu7u7ZNzd3R1nzpwRa2xtbeHs7Nyipnl7g8EANze3Ft/v5uYmqbl9P87OzrC1tZXUeHl5tdhP87rWpupMJhNMJpO4XF1d3fZBExERtbP7fdJze7uXa3FTUlIky3FxcYiLi7NQR3dmkdvnbz/lJAjCXU9D3V7TWr05apr/cO7UT0JCgniBtkqlgqenZ5t9ExERUddl1iCkVqsB/N/MULPKykpxJkatVqOhoQFVVVVt1ly4cKHF91+8eFFSc/t+qqqq0NjY2GZNZWUlgJazVs3i4+NhNBrFT0VFxd0PnIiIiLoks54a8/b2hlqtRlZWFoYMGQLg1jm/7OxsfPzxxwCAgIAA2NjYICsrC1OnTgVw6zxhcXExli1bBuDWswOMRiOOHDmCp59+GgBw+PBhGI1GDB8+XKxZsmQJ9Hq9eEV5ZmYmlEolAgICxJoFCxagoaEBtra2Yo1Go2lxyqyZUqmUXFMkZ2/Uh3R0C0RERBZ13zNCNTU10Ol00Ol0AG5dIK3T6VBeXg6FQoF58+Zh6dKlSE9PR3FxMaZPnw57e3tEREQAuHXF+IwZMxATE4N9+/ahqKgIr732Gvz9/cW7yHx9fTF+/HhERkYiLy8PeXl5iIyMRHh4uPiwpdDQUAwcOBBarRZFRUXYt28fYmNjERkZCScnJwC3bsFXKpWYPn06iouLkZ6ejqVLl/KOMSIiIgLwADNCBQUFGDNmjLgcHR0NAJg2bRpSUlIQFxeHuro6zJo1C1VVVRg6dCgyMzPh6OgobrNq1SpYW1tj6tSpqKurQ0hICFJSUmBlZSXWbN++HVFRUeLdZVOmTJE8u8jKygq7d+/GrFmzMGLECNjZ2SEiIgKJiYlijUqlQlZWFmbPno3AwEA4OzsjOjpa7JmIiIjkTSHwMcttqq6uhkqlgtFoFGea5OLse993dAvUjnr/aWRHt0BEt6mvr0dZWRm8vb3RvXv3jm6n02nr53Ovv7/50lUiIiKSLQYhIiIiki0GISIiIpItBiEiIiKSLbM+R4iIiIgs77OZ37Xr/mavffa+6tesWYM1a9aI7/UcNGgQPvjggzu+tB0AsrOzER0djePHj0Oj0SAuLg4zZ878JW3fE84IERERkVn17t0bf/rTn1BQUICCggI8++yzeO6553D8+PFW68vKyjBx4kSMHDkSRUVFWLBgAaKioiz+5nmAM0JERERkZpMnT5YsL1myBGvWrEFeXh4GDRrUon7t2rXo06cPkpKSANx6sHJBQQESExPx0ksvWbRXzggRERGRxTQ1NSE1NRW1tbUICgpqtSY3N1d8gHKzsLAwFBQUoLGx0aL9cUaIiIiIzO7YsWMICgpCfX09HnnkEaSnp2PgwIGt1hoMhhYvQ3d3d8eNGzdw6dIl8Z2ilsAZISIiIjI7Hx8f6HQ65OXl4f/9v/+HadOm4cSJE3esv/0doM0vvrD0u0E5I0RERERmZ2tri379+gEAAgMDkZ+fj08++QTr1q1rUatWq2EwGCRjlZWVsLa2hqurq0X75IwQERERWZwgCDCZTK2uCwoKQlZWlmQsMzMTgYGBsLGxsWhfDEJERERkVgsWLMD333+P06dP49ixY1i4cCEOHDiAV199FQAQHx+P119/XayfOXMmzpw5g+joaJSUlGDTpk3YuHEjYmNjLd4rT40RERF1Mff7gMP2duHCBWi1Wuj1eqhUKjzxxBPIyMjAuHHjAAB6vR7l5eVivbe3N/bs2YP58+fjs88+g0ajwaeffmrxW+cBBiEiIiIys40bN7a5PiUlpcVYcHAwjh49aqGO7oynxoiIiEi2GISIiIhIthiEiIiISLYYhIiIiEi2GISIiIhIthiEiIiISLYYhIiIiEi2GISIiIhIthiEiIiISLYYhIiIiEi2+IoNIiKiLmbFK+Htur+YXd/cV/2aNWuwZs0anD59GgAwaNAgfPDBB5gwYUKr9QcOHMCYMWNajJeUlGDAgAH33e/9YBAiIiIis+rduzf+9Kc/oV+/fgCALVu24LnnnkNRUREGDRp0x+1KS0vh5OQkLvfq1cvivTIIERERkVlNnjxZsrxkyRKsWbMGeXl5bQYhNzc39OjRw8LdSfEaISIiIrKYpqYmpKamora2FkFBQW3WDhkyBB4eHggJCcH+/fvbpT/OCBEREZHZHTt2DEFBQaivr8cjjzyC9PR0DBw4sNVaDw8PrF+/HgEBATCZTNi6dStCQkJw4MABjBo1yqJ9MggRERGR2fn4+ECn0+Hq1atIS0vDtGnTkJ2d3WoY8vHxgY+Pj7gcFBSEiooKJCYmWjwI8dQYERERmZ2trS369euHwMBAJCQk4Mknn8Qnn3xyz9sPGzYMp06dsmCHtzAIERERkcUJggCTyXTP9UVFRfDw8LBgR7fw1BgRERGZ1YIFCzBhwgR4enri2rVrSE1NxYEDB5CRkQEAiI+Px7lz5/DFF18AAJKSkuDl5YVBgwahoaEB27ZtQ1paGtLS0izeK4MQERFRF3O/DzhsbxcuXIBWq4Ver4dKpcITTzyBjIwMjBs3DgCg1+tRXl4u1jc0NCA2Nhbnzp2DnZ0dBg0ahN27d2PixIkW71UhCIJg8b10YdXV1VCpVDAajZKHPMnB2fe+7+gWqB31/tPIjm6BiG5TX1+PsrIyeHt7o3v37h3dTqfT1s/nXn9/8xohIiIiki0GISIiIpItBiEiIiKSLQYhIiIiki0GISIiIpItBiEiIiKSLbMHoRs3buAPf/gDvL29YWdnh8ceewwfffQRbt68KdYIgoBFixZBo9HAzs4Oo0ePxvHjxyXfYzKZMHfuXPTs2RMODg6YMmUKzp49K6mpqqqCVquFSqWCSqWCVqvF1atXJTXl5eWYPHkyHBwc0LNnT0RFRaGhocHch01ERERdkNmD0Mcff4y1a9ciOTkZJSUlWLZsGZYvX47Vq1eLNcuWLcPKlSuRnJyM/Px8qNVqjBs3DteuXRNr5s2bh/T0dKSmpiInJwc1NTUIDw9HU1OTWBMREQGdToeMjAxkZGRAp9NBq9WK65uamjBp0iTU1tYiJycHqampSEtLQ0xMjLkPm4iIiLogsz9ZOjc3F8899xwmTZoEAPDy8sLOnTtRUFAA4NZsUFJSEhYuXIgXX3wRALBlyxa4u7tjx44deOutt2A0GrFx40Zs3boVY8eOBQBs27YNnp6e2Lt3L8LCwlBSUoKMjAzk5eVh6NChAIANGzYgKCgIpaWl8PHxQWZmJk6cOIGKigpoNBoAwIoVKzB9+nQsWbJEdg9IJCIiIimzzwg988wz2LdvH06ePAkA+Oc//4mcnBzxMdllZWUwGAwIDQ0Vt1EqlQgODsahQ4cAAIWFhWhsbJTUaDQa+Pn5iTW5ublQqVRiCAJuvalWpVJJavz8/MQQBABhYWEwmUwoLCxstX+TyYTq6mrJh4iIiB5OZp8Revfdd2E0GjFgwABYWVmhqakJS5YswW9/+1sAgMFgAAC4u7tLtnN3d8eZM2fEGltbWzg7O7eoad7eYDDAzc2txf7d3NwkNbfvx9nZGba2tmLN7RISErB48eL7PWwiIqJ2096vQPqlr+BJSEjAggUL8PbbbyMpKemOddnZ2YiOjsbx48eh0WgQFxeHmTNn/qJ9343ZZ4R27dqFbdu2YceOHTh69Ci2bNmCxMREbNmyRVKnUCgky4IgtBi73e01rdU/SM3PxcfHw2g0ip+Kioo2eyIiIqI7y8/Px/r16/HEE0+0WVdWVoaJEydi5MiRKCoqwoIFCxAVFWXxN9CbPQi98847eO+99/Cb3/wG/v7+0Gq1mD9/PhISEgAAarUaAFrMyFRWVoqzN2q1Gg0NDaiqqmqz5sKFCy32f/HiRUnN7fupqqpCY2Nji5miZkqlEk5OTpIPERER3b+amhq8+uqr2LBhQ4uzPLdbu3Yt+vTpg6SkJPj6+uKNN97A73//eyQmJlq0R7MHoevXr6NbN+nXWllZibfPe3t7Q61WIysrS1zf0NCA7OxsDB8+HAAQEBAAGxsbSY1er0dxcbFYExQUBKPRiCNHjog1hw8fhtFolNQUFxdDr9eLNZmZmVAqlQgICDDzkRMREdHPzZ49G5MmTRJvfGpLbm6u5Npg4NZ1vQUFBWhsbLRUi+a/Rmjy5MlYsmQJ+vTpg0GDBqGoqAgrV67E73//ewC3TlXNmzcPS5cuRf/+/dG/f38sXboU9vb2iIiIAACoVCrMmDEDMTExcHV1hYuLC2JjY+Hv7y/+MH19fTF+/HhERkZi3bp1AIA333wT4eHh8PHxAQCEhoZi4MCB0Gq1WL58Oa5cuYLY2FhERkZypoeIiMiCUlNTcfToUeTn599TfWvX9bq7u+PGjRu4dOkSPDw8LNGm+YPQ6tWr8f7772PWrFmorKyERqPBW2+9hQ8++ECsiYuLQ11dHWbNmoWqqioMHToUmZmZcHR0FGtWrVoFa2trTJ06FXV1dQgJCUFKSgqsrKzEmu3btyMqKkpMkFOmTEFycrK43srKCrt378asWbMwYsQI2NnZISIiwuLTbERERHJWUVGBt99+G5mZmejevfs9b9fa9cOtjZuTQmjeC7WquroaKpUKRqNRdrNI7X1XAnWsX3pXCBGZX319PcrKyuDt7S0JFJ39rrGvvvoKL7zwgmTyoqmpCQqFAt26dYPJZJKsA4BRo0ZhyJAh+OSTT8Sx9PR0TJ06FdevX4eNjU2L/dzp5wPc++9vs88IERERkbyFhITg2LFjkrHf/e53GDBgAN59990WIQi4dV3v3/72N8lYZmYmAgMDWw1B5sIgRERERGbl6OgIPz8/yZiDgwNcXV3F8fj4eJw7dw5ffPEFAGDmzJlITk5GdHQ0IiMjkZubi40bN2Lnzp0W7ZVBiIiIqIt5GE5l6/V6lJeXi8ve3t7Ys2cP5s+fj88++wwajQaffvopXnrpJYv2wSBEREREFnfgwAHJckpKSoua4OBgHD16tH0a+g+zP0eIiIiIqKtgECIiIiLZYhAiIiIi2WIQIiIiItliECIiIiLZYhAiIiIi2WIQIiIiItliECIiIiLZYhAiIiIi2WIQIiIiItniKzaIiIi6mEWLFnWp/SUkJGDBggV4++23kZSU1GrNgQMHMGbMmBbjJSUlGDBgwC/af1sYhIiIiMhi8vPzsX79ejzxxBP3VF9aWgonJydxuVevXpZqDQBPjREREZGF1NTU4NVXX8WGDRvg7Ox8T9u4ublBrVaLHysrK4v2yCBEREREFjF79mxMmjQJY8eOvedthgwZAg8PD4SEhGD//v0W7O4WnhqjO9pV9nFHt0DtKAYjO7oFInqIpKam4ujRo8jPz7+neg8PD6xfvx4BAQEwmUzYunUrQkJCcODAAYwaNcpifTIIERERkVlVVFTg7bffRmZmJrp3735P2/j4+MDHx0dcDgoKQkVFBRITEy0ahHhqjIiIiMyqsLAQlZWVCAgIgLW1NaytrZGdnY1PP/0U1tbWaGpquqfvGTZsGE6dOmXRXjkjRERERGYVEhKCY8eOScZ+97vfYcCAAXj33Xfv+QLooqIieHh4WKJFEYMQERERmZWjoyP8/PwkYw4ODnB1dRXH4+Pjce7cOXzxxRcAgKSkJHh5eWHQoEFoaGjAtm3bkJaWhrS0NIv2yiBERETUxbT3AxUtQa/Xo7y8XFxuaGhAbGwszp07Bzs7OwwaNAi7d+/GxIkTLdoHgxARERFZ3IEDByTLKSkpkuW4uDjExcW1X0P/wYuliYiISLYYhIiIiEi2GISIiIhIthiEiIiISLYYhIiIiEi2GISIiIhIthiEiIiISLYYhIiIiEi2GISIiIhIthiEiIiISLb4ig0iIqIuZt93j7fr/kKe/dd91S9atAiLFy+WjLm7u8NgMNxxm+zsbERHR+P48ePQaDSIi4vDzJkzH6jf+8EgRERERGY3aNAg7N27V1y2srK6Y21ZWRkmTpyIyMhIbNu2Df/4xz8wa9Ys9OrVCy+99JJF+2QQIiIiIrOztraGWq2+p9q1a9eiT58+SEpKAgD4+vqioKAAiYmJFg9CvEaIiIiIzO7UqVPQaDTw9vbGb37zG/z73/++Y21ubi5CQ0MlY2FhYSgoKEBjY6NF+2QQIiIiIrMaOnQovvjiC/z973/Hhg0bYDAYMHz4cFy+fLnVeoPBAHd3d8mYu7s7bty4gUuXLlm0V54aIyIiIrOaMGGC+M/+/v4ICgrC448/ji1btiA6OrrVbRQKhWRZEIRWx83NIjNC586dw2uvvQZXV1fY29tj8ODBKCwsFNcLgoBFixZBo9HAzs4Oo0ePxvHjxyXfYTKZMHfuXPTs2RMODg6YMmUKzp49K6mpqqqCVquFSqWCSqWCVqvF1atXJTXl5eWYPHkyHBwc0LNnT0RFRaGhocESh01EREStcHBwgL+/P06dOtXqerVa3eKOssrKSlhbW8PV1dWivZk9CFVVVWHEiBGwsbHBt99+ixMnTmDFihXo0aOHWLNs2TKsXLkSycnJyM/Ph1qtxrhx43Dt2jWxZt68eUhPT0dqaipycnJQU1OD8PBwNDU1iTURERHQ6XTIyMhARkYGdDodtFqtuL6pqQmTJk1CbW0tcnJykJqairS0NMTExJj7sImIiOgOTCYTSkpK4OHh0er6oKAgZGVlScYyMzMRGBgIGxsbi/Zm9lNjH3/8MTw9PbF582ZxzMvLS/xnQRCQlJSEhQsX4sUXXwQAbNmyBe7u7tixYwfeeustGI1GbNy4EVu3bsXYsWMBANu2bYOnpyf27t2LsLAwlJSUICMjA3l5eRg6dCgAYMOGDQgKCkJpaSl8fHyQmZmJEydOoKKiAhqNBgCwYsUKTJ8+HUuWLIGTk5O5D5+IiEj2YmNjMXnyZPTp0weVlZX44x//iOrqakybNg0AEB8fj3PnzuGLL74AAMycORPJycmIjo5GZGQkcnNzsXHjRuzcudPivZo9CH399dcICwvDyy+/jOzsbDz66KOYNWsWIiMjAdx6VoDBYJBcHa5UKhEcHIxDhw7hrbfeQmFhIRobGyU1Go0Gfn5+OHToEMLCwpCbmwuVSiWGIAAYNmwYVCoVDh06BB8fH+Tm5sLPz08MQcCtq9BNJhMKCwsxZsyYFv2bTCaYTCZxubq62qw/HyIiol/qfh9w2N7Onj2L3/72t7h06RJ69eqFYcOGIS8vD3379gUA6PV6lJeXi/Xe3t7Ys2cP5s+fj88++wwajQaffvqpxW+dBywQhP79739jzZo1iI6OxoIFC3DkyBFERUVBqVTi9ddfF88BtnZ1+JkzZwDcunrc1tYWzs7OLWqatzcYDHBzc2uxfzc3N0nN7ftxdnaGra3tHZ9umZCQ0OJpmERERHTvUlNT21yfkpLSYiw4OBhHjx61UEd3ZvZrhG7evIlf//rXWLp0KYYMGYK33noLkZGRWLNmjaSutavD73Zl+O01rdU/SM3PxcfHw2g0ip+Kioo2eyIiIqKuy+xByMPDAwMHDpSM+fr6ilNgzU+ZbO3q8ObZG7VajYaGBlRVVbVZc+HChRb7v3jxoqTm9v1UVVWhsbGxxUxRM6VSCScnJ8mHiIiIHk5mD0IjRoxAaWmpZOzkyZPieUFvb2+o1WrJ1eENDQ3Izs7G8OHDAQABAQGwsbGR1Oj1ehQXF4s1QUFBMBqNOHLkiFhz+PBhGI1GSU1xcTH0er1Yk5mZCaVSiYCAADMfOREREXU1Zr9GaP78+Rg+fDiWLl2KqVOn4siRI1i/fj3Wr18P4Napqnnz5mHp0qXo378/+vfvj6VLl8Le3h4REREAAJVKhRkzZiAmJgaurq5wcXFBbGws/P39xbvIfH19MX78eERGRmLdunUAgDfffBPh4eHw8fEBAISGhmLgwIHQarVYvnw5rly5gtjYWERGRnKmh4iIiMwfhJ566imkp6cjPj4eH330Eby9vZGUlIRXX31VrImLi0NdXR1mzZqFqqoqDB06FJmZmXB0dBRrVq1aBWtra0ydOhV1dXUICQlBSkqK5O2127dvR1RUlHh32ZQpU5CcnCyut7Kywu7duzFr1iyMGDECdnZ2iIiIQGJiorkPm4iIyGKan7JMUub4uSgE/nTbVF1dDZVKBaPRKLtZpBWvhHd0C9SOYnZ909EtENFtmpqacPLkSbi5uVn8Cctd0eXLl1FZWYlf/epXkokS4N5/f/NdY0RERJ2UlZUVevTogcrKSgCAvb29xd+91RUIgoDr16+jsrISPXr0aBGC7geDEBERUSfWfLd1cxii/9OjRw/x5/OgGISIiIg6MYVCAQ8PD7i5uaGxsbGj2+k0bGxsftFMUDMGISIioi7AysrKLL/4ScrszxEiIiIi6ioYhIiIiEi2GISIiIhIthiEiIiISLYYhIiIiEi2GISIiIhIthiEiIiISLYYhIiIiEi2GISIiIhIthiEiIiISLYYhIiIiEi2GISIiIhIthiEiIiISLYYhIiIiEi2GISIiIhIthiEiIiISLYYhIiIiEi2GISIiIhIthiEiIiISLYYhIiIiEi2GISIiIhIthiEiIiISLYYhIiIiEi2GISIiIhIthiEiIiISLYYhIiIiEi2GISIiIhItqw7ugHqvLo7R3d0C0RERBbFGSEiIiKSLQYhIiIiki0GISIiIpItBiEiIiKSLQYhIiIiki0GISIiIpItBiEiIiKSLQYhIiIiki0GISIiIpItiwehhIQEKBQKzJs3TxwTBAGLFi2CRqOBnZ0dRo8ejePHj0u2M5lMmDt3Lnr27AkHBwdMmTIFZ8+eldRUVVVBq9VCpVJBpVJBq9Xi6tWrkpry8nJMnjwZDg4O6NmzJ6KiotDQ0GCpwyUiIqIuxKJBKD8/H+vXr8cTTzwhGV+2bBlWrlyJ5ORk5OfnQ61WY9y4cbh27ZpYM2/ePKSnpyM1NRU5OTmoqalBeHg4mpqaxJqIiAjodDpkZGQgIyMDOp0OWq1WXN/U1IRJkyahtrYWOTk5SE1NRVpaGmJiYix52ERERNRFWCwI1dTU4NVXX8WGDRvg7OwsjguCgKSkJCxcuBAvvvgi/Pz8sGXLFly/fh07duwAABiNRmzcuBErVqzA2LFjMWTIEGzbtg3Hjh3D3r17AQAlJSXIyMjAn//8ZwQFBSEoKAgbNmzAN998g9LSUgBAZmYmTpw4gW3btmHIkCEYO3YsVqxYgQ0bNqC6utpSh05ERERdhMWC0OzZszFp0iSMHTtWMl5WVgaDwYDQ0FBxTKlUIjg4GIcOHQIAFBYWorGxUVKj0Wjg5+cn1uTm5kKlUmHo0KFizbBhw6BSqSQ1fn5+0Gg0Yk1YWBhMJhMKCwtb7dtkMqG6ulryISIiooeTRd4+n5qaiqNHjyI/P7/FOoPBAABwd3eXjLu7u+PMmTNija2trWQmqbmmeXuDwQA3N7cW3+/m5iapuX0/zs7OsLW1FWtul5CQgMWLF9/LYRIREVEXZ/YZoYqKCrz99tvYtm0bunfvfsc6hUIhWRYEocXY7W6vaa3+QWp+Lj4+HkajUfxUVFS02RMRERF1XWYPQoWFhaisrERAQACsra1hbW2N7OxsfPrpp7C2thZnaG6fkamsrBTXqdVqNDQ0oKqqqs2aCxcutNj/xYsXJTW376eqqgqNjY0tZoqaKZVKODk5ST5ERET0cDJ7EAoJCcGxY8eg0+nET2BgIF599VXodDo89thjUKvVyMrKErdpaGhAdnY2hg8fDgAICAiAjY2NpEav16O4uFisCQoKgtFoxJEjR8Saw4cPw2g0SmqKi4uh1+vFmszMTCiVSgQEBJj70ImIiKiLMfs1Qo6OjvDz85OMOTg4wNXVVRyfN28eli5div79+6N///5YunQp7O3tERERAQBQqVSYMWMGYmJi4OrqChcXF8TGxsLf31+8+NrX1xfjx49HZGQk1q1bBwB48803ER4eDh8fHwBAaGgoBg4cCK1Wi+XLl+PKlSuIjY1FZGQkZ3qIiIjIMhdL301cXBzq6uowa9YsVFVVYejQocjMzISjo6NYs2rVKlhbW2Pq1Kmoq6tDSEgIUlJSYGVlJdZs374dUVFR4t1lU6ZMQXJysrjeysoKu3fvxqxZszBixAjY2dkhIiICiYmJ7XewRERE1GkpBEEQOrqJzqy6uhoqlQpGo1F2s0ifzfyuo1ugdjR77bMd3QIRkdnc6+9vvmuMiIiIZItBiIiIiGSLQYiIiIhki0GIiIiIZItBiIiIiGSLQYiIiIhki0GIiIiIZItBiIiIiGSLQYiIiIhki0GIiIiIZItBiIiIiGSLQYiIiIhki0GIiIiIZItBiIiIiGSLQYiIiIhki0GIiIiIZItBiIiIiGSLQYiIiIhki0GIiIiIZItBiIiIiGSLQYiIiIhki0GIiIiIZItBiIiIiGSLQYiIiIhky7qjG6DO69kDszu6BWpXJR3dABFRu+OMEBEREckWgxARERHJFoMQERERyRaDEBEREckWgxARERHJFoMQERERyRaDEBEREckWgxARERHJFoMQERERyRaDEBEREckWgxARERHJFoMQERERyRaDEBEREckWgxARERHJFoMQERERyRaDEBEREcmW2YNQQkICnnrqKTg6OsLNzQ3PP/88SktLJTWCIGDRokXQaDSws7PD6NGjcfz4cUmNyWTC3Llz0bNnTzg4OGDKlCk4e/aspKaqqgparRYqlQoqlQparRZXr16V1JSXl2Py5MlwcHBAz549ERUVhYaGBnMfNhER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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Cross-tabulation: To compare the relationships between features\n",
    "pd.crosstab(EDA_dataset['ByAppointmentOnly'], EDA_dataset['stars']).plot(kind='bar', stacked=True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "qYPmb4okH3_d"
   },
   "source": [
    "#### Correlation for Numerical Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {
    "id": "Cj9WRb4NH3_e",
    "outputId": "db630495-9f5f-4b45-f87c-85481acb89a4"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Heatmap: To find correlations between numerical variables like stars, latitude, longitude and RestaurantsPriceRange2\n",
    "correlation_matrix = EDA_dataset[['stars', 'latitude', 'longitude', 'RestaurantsPriceRange2']].corr()\n",
    "sns.heatmap(correlation_matrix, annot=True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "mY5wB40XH3_e"
   },
   "source": [
    "#### Outlier Detection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {
    "id": "EIuNbYUmH3_e",
    "outputId": "3598b441-a1a2-4e29-dbad-82e315d3c0b3"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Boxplot: To detect outliers in numerical columns like stars or RestaurantsPriceRange2\n",
    "sns.boxplot(y='stars', data=EDA_dataset)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {
    "id": "ljZK1uXCH3_e",
    "outputId": "f4b262c2-ca9b-494c-eff2-be97a9f4d078"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(y='RestaurantsPriceRange2', data=EDA_dataset)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {
    "id": "oI4uZMjfH3_e",
    "outputId": "87d3169f-7f9d-40d4-9472-3ab022b2c8a7"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x='BikeParking', y='stars', data=EDA_dataset)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {
    "id": "XGCIE1BaH3_e",
    "outputId": "c286a859-5585-46ce-89ec-159008b44c3a"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(x='longitude', y='latitude', hue='stars', data=EDA_dataset)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "d47I3SEeH3_e"
   },
   "source": [
    "#### Distribution of Numerical Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {
    "id": "-JjKVn1xH3_e",
    "outputId": "bf6c2154-89ab-4bbd-8efa-f09328aeedfc"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Histograms: To visualize the distribution of continuous variables like stars and RestaurantsPriceRange2\n",
    "EDA_dataset['stars'].hist()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {
    "id": "tw8cjXrHH3_e",
    "outputId": "b11dc6b1-7519-4c2c-c5f5-36232f08d531"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x1000 with 20 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Multivariate Analysis\n",
    "#Pairplots: To explore more advanced relationships between multiple variables\n",
    "sns.pairplot(EDA_dataset[['stars', 'RestaurantsPriceRange2', 'latitude', 'longitude']])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {
    "id": "zSqDIZouH3_e",
    "outputId": "5ba5a848-19c6-4a66-a5bc-9afca1cbd81a"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Dimensionality Reduction (PCA)\n",
    "\n",
    "# Standardizing the numerical features\n",
    "numerical_features = ['stars', 'RestaurantsPriceRange2', 'latitude', 'longitude']\n",
    "scaled_data = StandardScaler().fit_transform(EDA_dataset[numerical_features])\n",
    "\n",
    "pca = PCA(n_components=2)\n",
    "principal_components = pca.fit_transform(scaled_data)\n",
    "\n",
    "# Visualizing the two principal components\n",
    "plt.scatter(principal_components[:, 0], principal_components[:, 1], c=EDA_dataset['stars'], cmap='viridis')\n",
    "plt.colorbar()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {
    "id": "OzN50JLKH3_e",
    "outputId": "7022cd9f-12b1-40e6-fd41-4eb539b8c0e2"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "kmeans = KMeans(n_clusters=3)\n",
    "clusters = kmeans.fit_predict(scaled_data)\n",
    "EDA_dataset['cluster'] = clusters\n",
    "\n",
    "# Visualizing clusters\n",
    "plt.scatter(EDA_dataset['latitude'], EDA_dataset['longitude'], c=clusters, cmap='rainbow')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {
    "id": "aMl-iCs9H3_e",
    "outputId": "7651fe1a-e54c-41ab-b601-57355bd7b2b5"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.pointplot(x='RestaurantsPriceRange2', y='stars', data=EDA_dataset)\n",
    "plt.title('Stars vs. Price Range')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "WpPHuXbvH3_f"
   },
   "source": [
    "#### Key Insights from the Visualizations\n",
    "\n",
    "**1. is_open Countplot:**\n",
    "A majority of the businesses are open (1), while a smaller proportion is closed (0). This indicates that most data relates to active businesses, which may suggest that the dataset is skewed towards currently operating entities.\n",
    "\n",
    "**2. ByAppointmentOnly Countplot:**\n",
    "Most businesses do not operate by appointment only (0), with only a small subset requiring appointments (1). This suggests that walk-in services are more common than appointment-based operations.\n",
    "\n",
    "**3. BusinessParking_garage Countplot:**\n",
    "A significant majority of businesses do not have garage parking (0), while only a small portion offers this amenity (1). Garage parking is relatively rare.\n",
    "\n",
    "**4. Stacked Bar Chart (ByAppointmentOnly vs stars):**\n",
    "Businesses that do not require appointments (0) have a wider distribution of ratings, with a noticeable portion receiving 4.0 stars or more. Appointment-only businesses (1) tend to have fewer total reviews, and most of them seem to have a rating close to 4 stars. This suggests that appointment-only businesses might operate in a smaller niche but receive consistent ratings.\n",
    "\n",
    "**5. Correlation Heatmap:**\n",
    "There is a low correlation between stars and other numerical variables such as latitude, longitude, and RestaurantsPriceRange2. The correlation values are close to 0, meaning no strong linear relationships exist between these variables and the business ratings (stars).\n",
    "\n",
    "**6. Boxplot of stars:**\n",
    "The distribution of stars is relatively concentrated, with most businesses receiving ratings between 3.5 and 4.5 stars. There are no extreme outliers, indicating that most businesses are similarly rated.\n",
    "\n",
    "**7. Boxplot of RestaurantsPriceRange2:**\n",
    "The boxplot shows a few outliers in the higher price ranges. This suggests that while most restaurants fall into a moderate price range, there are some that are more expensive, and those are represented as outliers.\n",
    "\n",
    "**8. Boxplot of BikeParking vs stars:**\n",
    "Businesses with bike parking tend to have slightly higher ratings on average than those without bike parking. This suggests that bike parking might be a valued amenity for certain customers.\n",
    "\n",
    "**9. Scatterplot of latitude vs longitude with stars:**\n",
    "The plot shows geographic locations of businesses based on latitude and longitude, with the color representing their ratings (stars). There doesn’t appear to be a strong geographic pattern in terms of business ratings.\n",
    "\n",
    "**10. Histogram of stars:**\n",
    "Most businesses have ratings between 3.0 and 4.5 stars, with the highest concentration around 4.0 stars. Few businesses have very low ratings, indicating that overall ratings skew towards the positive side.\n",
    "\n",
    "**11. Pairplot:**\n",
    "The pairplot shows relationships between different variables (stars, RestaurantsPriceRange2, latitude, and longitude). No clear patterns or strong relationships are evident from this plot, which aligns with the low correlations observed earlier.\n",
    "\n",
    "**12. PCA Visualization:**\n",
    "The PCA projection shows no clear separation of businesses based on their ratings (stars). The ratings are spread across the principal components, suggesting that the first two components do not capture most of the variance related to business ratings.\n",
    "\n",
    "**13. Clustering Visualization (Latitude vs Longitude):**\n",
    "The scatter plot shows geographically clustered businesses based on their latitude and longitude. Each cluster represents businesses located near each other, indicating that spatial proximity plays a role in clustering. Some clusters are more concentrated, while others are more spread out.\n",
    "\n",
    "**14. Pointplot (RestaurantsPriceRange2 vs stars):**\n",
    "Businesses with price range 3 tend to have the highest average ratings (stars), while those in the lowest (1) and highest (4) price ranges tend to have slightly lower ratings. This suggests that mid-range restaurants receive the highest customer satisfaction."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "wkth-djNH3_f"
   },
   "source": [
    "#### Next Steps to enhance each model:\n",
    "\n",
    "**1. SVM:**\n",
    "\n",
    "Scale features like latitude, longitude, and RestaurantsPriceRange2.\n",
    "\n",
    "Handle outliers in price range.\n",
    "\n",
    "Try non-linear kernels (e.g., RBF) for better performance.\n",
    "\n",
    "\n",
    "**2. Random Forest:**\n",
    "\n",
    "Focus on important features (e.g., parking-related features).\n",
    "\n",
    "Perform hyperparameter tuning (e.g., n_estimators, max_depth).\n",
    "\n",
    "Address class imbalance in categorical features.\n",
    "\n",
    "\n",
    "**3. XGBoost:**\n",
    "\n",
    "Engineer feature interactions (e.g., between latitude and longitude).\n",
    "\n",
    "Tune hyperparameters like learning_rate and max_depth.\n",
    "\n",
    "Adjust class imbalance using scale_pos_weight.\n",
    "\n",
    "**4. Hidden Layer ANN:**\n",
    "\n",
    "Normalize input features.\n",
    "\n",
    "Experiment with different activation functions.\n",
    "\n",
    "Tune the number of neurons and layers.\n",
    "\n",
    "**5. Multilayer ANN:**\n",
    "\n",
    "Scale input features.\n",
    "\n",
    "Use dropout regularization to prevent overfitting.\n",
    "\n",
    "Optimize layer depth and learning rate.\n",
    "\n",
    "**6. Naive Bayes:**\n",
    "\n",
    "Use Gaussian Naive Bayes for continuous features.\n",
    "\n",
    "Ensure feature independence assumptions or reduce feature correlation.\n",
    "\n",
    "Binarize categorical features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "m8m5w0AcH6Z3"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "-VD0f_QCIJvU"
   },
   "source": [
    "## Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 642
    },
    "id": "bNHgazflyegO",
    "outputId": "b446f089-5a7a-4f59-f843-0b5250322479"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 150346 entries, 0 to 150345\n",
      "Data columns (total 17 columns):\n",
      " #   Column                    Non-Null Count   Dtype  \n",
      "---  ------                    --------------   -----  \n",
      " 0   stars                     150346 non-null  float64\n",
      " 1   is_open                   150346 non-null  int64  \n",
      " 2   latitude                  150346 non-null  float64\n",
      " 3   longitude                 150346 non-null  float64\n",
      " 4   ByAppointmentOnly         150346 non-null  int64  \n",
      " 5   BikeParking               150346 non-null  int64  \n",
      " 6   RestaurantsPriceRange2    150346 non-null  float64\n",
      " 7   RestaurantsTakeOut        150346 non-null  int64  \n",
      " 8   WiFi                      150346 non-null  int64  \n",
      " 9   WheelchairAccessible      150346 non-null  int64  \n",
      " 10  RestaurantsGoodForGroups  150346 non-null  int64  \n",
      " 11  BusinessParking_garage    150346 non-null  int64  \n",
      " 12  BusinessParking_street    150346 non-null  int64  \n",
      " 13  BusinessParking_lot       150346 non-null  int64  \n",
      " 14  BusinessParking_valet     150346 non-null  int64  \n",
      " 15  parking_status            150346 non-null  int64  \n",
      " 16  city_encoded              150346 non-null  int64  \n",
      "dtypes: float64(4), int64(13)\n",
      "memory usage: 19.5 MB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stars</th>\n",
       "      <th>is_open</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>ByAppointmentOnly</th>\n",
       "      <th>BikeParking</th>\n",
       "      <th>RestaurantsPriceRange2</th>\n",
       "      <th>RestaurantsTakeOut</th>\n",
       "      <th>WiFi</th>\n",
       "      <th>WheelchairAccessible</th>\n",
       "      <th>RestaurantsGoodForGroups</th>\n",
       "      <th>BusinessParking_garage</th>\n",
       "      <th>BusinessParking_street</th>\n",
       "      <th>BusinessParking_lot</th>\n",
       "      <th>BusinessParking_valet</th>\n",
       "      <th>parking_status</th>\n",
       "      <th>city_encoded</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>34.426679</td>\n",
       "      <td>-119.711197</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>38.551126</td>\n",
       "      <td>-90.335695</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.5</td>\n",
       "      <td>0</td>\n",
       "      <td>32.223236</td>\n",
       "      <td>-110.880452</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>39.955505</td>\n",
       "      <td>-75.155564</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>14569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "      <td>40.338183</td>\n",
       "      <td>-75.471659</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   stars  is_open   latitude   longitude  ByAppointmentOnly  BikeParking  \\\n",
       "0    5.0        0  34.426679 -119.711197                  1            0   \n",
       "1    3.0        1  38.551126  -90.335695                  0            0   \n",
       "2    3.5        0  32.223236 -110.880452                  0            1   \n",
       "3    4.0        1  39.955505  -75.155564                  0            1   \n",
       "4    4.5        1  40.338183  -75.471659                  0            1   \n",
       "\n",
       "   RestaurantsPriceRange2  RestaurantsTakeOut  WiFi  WheelchairAccessible  \\\n",
       "0                     2.0                   0     0                     0   \n",
       "1                     2.0                   0     0                     0   \n",
       "2                     2.0                   0     0                     1   \n",
       "3                     1.0                   1     1                     0   \n",
       "4                     2.0                   1     0                     1   \n",
       "\n",
       "   RestaurantsGoodForGroups  BusinessParking_garage  BusinessParking_street  \\\n",
       "0                         0                       0                       0   \n",
       "1                         0                       0                       0   \n",
       "2                         0                       0                       0   \n",
       "3                         0                       0                       1   \n",
       "4                         0                       1                       1   \n",
       "\n",
       "   BusinessParking_lot  BusinessParking_valet  parking_status  city_encoded  \n",
       "0                    0                      0               0          3829  \n",
       "1                    0                      0               0            36  \n",
       "2                    1                      0               1          9250  \n",
       "3                    0                      0               1         14569  \n",
       "4                    1                      0               2            10  "
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split, RandomizedSearchCV\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "import time\n",
    "\n",
    "# Load the dataset\n",
    "data = pd.read_csv('Model_dataset.csv')\n",
    "\n",
    "# Display basic information about the dataset\n",
    "data.info()\n",
    "\n",
    "# Display the first five rows of the dataset\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "zqq7u09l9B1M",
    "outputId": "006c2aff-abc1-4c91-b983-119778475637"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of samples in test set (has parking): 30070\n",
      "Number of samples in test set (validated parking): 13851\n"
     ]
    }
   ],
   "source": [
    "# Prepare features and target variables\n",
    "X = data.drop(['parking_status', 'city_encoded'], axis=1)\n",
    "\n",
    "# Create binary target for parking availability (1 if any parking type is available, 0 otherwise)\n",
    "y_has_parking = (data['BusinessParking_garage'] | data['BusinessParking_street'] |\n",
    "                 data['BusinessParking_lot'] | data['BusinessParking_valet']).astype(int)\n",
    "\n",
    "# Target for validated parking status\n",
    "y_validated = data['parking_status']\n",
    "\n",
    "# Split the data for the first model (has parking)\n",
    "X_train_hp, X_test_hp, y_train_hp, y_test_hp = train_test_split(X, y_has_parking, test_size=0.2, random_state=42)\n",
    "\n",
    "# Filter data for businesses with parking\n",
    "businesses_with_parking = data[y_has_parking == 1]\n",
    "\n",
    "# Prepare features and target for parking validation model\n",
    "X_parking = businesses_with_parking.drop(['parking_status', 'city_encoded'], axis=1)\n",
    "y_validated = businesses_with_parking['parking_status']\n",
    "\n",
    "# Split the data for the second model (validated parking)\n",
    "X_train_v, X_test_v, y_train_v, y_test_v = train_test_split(X_parking, y_validated, test_size=0.2, random_state=42)\n",
    "\n",
    "# Print the size of test sets for both models\n",
    "print(f\"Number of samples in test set (has parking): {len(X_test_hp)}\")\n",
    "print(f\"Number of samples in test set (validated parking): {len(X_test_v)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {
    "id": "1otl-GEh9EGd"
   },
   "outputs": [],
   "source": [
    "def train_evaluate_rf(X_train, X_test, y_train, y_test, task):\n",
    "    rf = RandomForestClassifier(random_state=42)\n",
    "    start_time = time.time()\n",
    "    rf.fit(X_train, y_train)\n",
    "    train_time = time.time() - start_time\n",
    "\n",
    "    y_pred = rf.predict(X_test)\n",
    "    accuracy = accuracy_score(y_test, y_pred)\n",
    "\n",
    "    print(f\"\\nRandom Forest Model ({task}):\")\n",
    "    print(f\"Config: {rf.get_params()}\")\n",
    "    print(f\"Train Time: {train_time:.2f} seconds\")\n",
    "    print(f\"Accuracy: {accuracy:.4f}\")\n",
    "    print(classification_report(y_test, y_pred))\n",
    "\n",
    "    return rf, train_time\n",
    "\n",
    "def empirical_tuning(X_train, X_test, y_train, y_test, task):\n",
    "    # Define hyperparameter search space\n",
    "    param_grid = {\n",
    "        'n_estimators': [100, 200, 300, 400, 500],\n",
    "        'max_depth': [10, 20, 30, 40, 50, None],\n",
    "        'min_samples_split': [2, 5, 10],\n",
    "        'min_samples_leaf': [1, 2, 4],\n",
    "        'max_features': ['auto', 'sqrt', 'log2']\n",
    "    }\n",
    "\n",
    "    rf = RandomForestClassifier(random_state=42)\n",
    "    # Perform randomized search with 10 iterations and 3-fold cross-validation\n",
    "    rf_random = RandomizedSearchCV(estimator=rf, param_distributions=param_grid,\n",
    "                                   n_iter=10, cv=3, random_state=42, n_jobs=-1)\n",
    "\n",
    "    start_time = time.time()\n",
    "    rf_random.fit(X_train, y_train)\n",
    "    train_time = time.time() - start_time\n",
    "\n",
    "    y_pred = rf_random.predict(X_test)\n",
    "    accuracy = accuracy_score(y_test, y_pred)\n",
    "\n",
    "    print(f\"\\nTuned Random Forest Model ({task}):\")\n",
    "    print(f\"Best Config: {rf_random.best_params_}\")\n",
    "    print(f\"Train Time: {train_time:.2f} seconds\")\n",
    "    print(f\"Accuracy: {accuracy:.4f}\")\n",
    "    print(classification_report(y_test, y_pred))\n",
    "\n",
    "    return rf_random, train_time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "i2PfizMI9F9H",
    "outputId": "d4f4934d-2497-407d-89ac-28264de0bfc8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial Models:\n",
      "\n",
      "Random Forest Model (Has Parking):\n",
      "Config: {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': None, 'oob_score': False, 'random_state': 42, 'verbose': 0, 'warm_start': False}\n",
      "Train Time: 6.42 seconds\n",
      "Accuracy: 1.0000\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     16251\n",
      "           1       1.00      1.00      1.00     13819\n",
      "\n",
      "    accuracy                           1.00     30070\n",
      "   macro avg       1.00      1.00      1.00     30070\n",
      "weighted avg       1.00      1.00      1.00     30070\n",
      "\n",
      "\n",
      "Random Forest Model (Validated Parking):\n",
      "Config: {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': None, 'oob_score': False, 'random_state': 42, 'verbose': 0, 'warm_start': False}\n",
      "Train Time: 4.53 seconds\n",
      "Accuracy: 0.9643\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.97      0.99      0.98     12272\n",
      "           2       0.93      0.74      0.83      1579\n",
      "\n",
      "    accuracy                           0.96     13851\n",
      "   macro avg       0.95      0.87      0.90     13851\n",
      "weighted avg       0.96      0.96      0.96     13851\n",
      "\n",
      "\n",
      "Total initial training time: 10.95 seconds\n"
     ]
    }
   ],
   "source": [
    "print(\"Initial Models:\")\n",
    "# Train and evaluate Random Forest model for predicting parking availability\n",
    "rf_has_parking, hp_time = train_evaluate_rf(X_train_hp, X_test_hp, y_train_hp, y_test_hp, \"Has Parking\")\n",
    "\n",
    "# Train and evaluate Random Forest model for validating parking status\n",
    "rf_validated, val_time = train_evaluate_rf(X_train_v, X_test_v, y_train_v, y_test_v, \"Validated Parking\")\n",
    "\n",
    "print(f\"\\nTotal initial training time: {hp_time + val_time:.2f} seconds\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Sb6yrYdY9Gjh",
    "outputId": "ca8a8aee-07ba-4d75-f5bd-a8ef33c9c1f4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Tuning Round 1\n",
      "\n",
      "Tuned Random Forest Model (Has Parking):\n",
      "Best Config: {'n_estimators': 500, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_features': 'sqrt', 'max_depth': 30}\n",
      "Train Time: 171.35 seconds\n",
      "Accuracy: 1.0000\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     16251\n",
      "           1       1.00      1.00      1.00     13819\n",
      "\n",
      "    accuracy                           1.00     30070\n",
      "   macro avg       1.00      1.00      1.00     30070\n",
      "weighted avg       1.00      1.00      1.00     30070\n",
      "\n",
      "\n",
      "Tuned Random Forest Model (Validated Parking):\n",
      "Best Config: {'n_estimators': 100, 'min_samples_split': 10, 'min_samples_leaf': 4, 'max_features': 'log2', 'max_depth': 50}\n",
      "Train Time: 74.87 seconds\n",
      "Accuracy: 0.9648\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.97      1.00      0.98     12272\n",
      "           2       0.95      0.73      0.82      1579\n",
      "\n",
      "    accuracy                           0.96     13851\n",
      "   macro avg       0.96      0.86      0.90     13851\n",
      "weighted avg       0.96      0.96      0.96     13851\n",
      "\n",
      "Tuning time for round 1: 246.22 seconds\n",
      "\n",
      "Tuning Round 2\n",
      "\n",
      "Tuned Random Forest Model (Has Parking):\n",
      "Best Config: {'n_estimators': 500, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_features': 'sqrt', 'max_depth': 30}\n",
      "Train Time: 163.30 seconds\n",
      "Accuracy: 1.0000\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     16251\n",
      "           1       1.00      1.00      1.00     13819\n",
      "\n",
      "    accuracy                           1.00     30070\n",
      "   macro avg       1.00      1.00      1.00     30070\n",
      "weighted avg       1.00      1.00      1.00     30070\n",
      "\n",
      "\n",
      "Tuned Random Forest Model (Validated Parking):\n",
      "Best Config: {'n_estimators': 100, 'min_samples_split': 10, 'min_samples_leaf': 4, 'max_features': 'log2', 'max_depth': 50}\n",
      "Train Time: 77.99 seconds\n",
      "Accuracy: 0.9648\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.97      1.00      0.98     12272\n",
      "           2       0.95      0.73      0.82      1579\n",
      "\n",
      "    accuracy                           0.96     13851\n",
      "   macro avg       0.96      0.86      0.90     13851\n",
      "weighted avg       0.96      0.96      0.96     13851\n",
      "\n",
      "Tuning time for round 2: 241.28 seconds\n",
      "\n",
      "Tuning Round 3\n",
      "\n",
      "Tuned Random Forest Model (Has Parking):\n",
      "Best Config: {'n_estimators': 500, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_features': 'sqrt', 'max_depth': 30}\n",
      "Train Time: 155.20 seconds\n",
      "Accuracy: 1.0000\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     16251\n",
      "           1       1.00      1.00      1.00     13819\n",
      "\n",
      "    accuracy                           1.00     30070\n",
      "   macro avg       1.00      1.00      1.00     30070\n",
      "weighted avg       1.00      1.00      1.00     30070\n",
      "\n",
      "\n",
      "Tuned Random Forest Model (Validated Parking):\n",
      "Best Config: {'n_estimators': 100, 'min_samples_split': 10, 'min_samples_leaf': 4, 'max_features': 'log2', 'max_depth': 50}\n",
      "Train Time: 69.48 seconds\n",
      "Accuracy: 0.9648\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.97      1.00      0.98     12272\n",
      "           2       0.95      0.73      0.82      1579\n",
      "\n",
      "    accuracy                           0.96     13851\n",
      "   macro avg       0.96      0.86      0.90     13851\n",
      "weighted avg       0.96      0.96      0.96     13851\n",
      "\n",
      "Tuning time for round 3: 224.69 seconds\n",
      "\n",
      "Total tuning time: 712.19 seconds\n"
     ]
    }
   ],
   "source": [
    "total_tuning_time = 0\n",
    "\n",
    "# Perform multiple rounds of hyperparameter tuning for both models\n",
    "for i in range(3):\n",
    "    print(f\"\\nTuning Round {i+1}\")\n",
    "\n",
    "    # Tune the \"Has Parking\" model\n",
    "    rf_hp_tuned, hp_tune_time = empirical_tuning(X_train_hp, X_test_hp, y_train_hp, y_test_hp, \"Has Parking\")\n",
    "\n",
    "    # Tune the \"Validated Parking\" model\n",
    "    rf_val_tuned, val_tune_time = empirical_tuning(X_train_v, X_test_v, y_train_v, y_test_v, \"Validated Parking\")\n",
    "\n",
    "    round_time = hp_tune_time + val_tune_time\n",
    "    total_tuning_time += round_time\n",
    "    print(f\"Tuning time for round {i+1}: {round_time:.2f} seconds\")\n",
    "\n",
    "print(f\"\\nTotal tuning time: {total_tuning_time:.2f} seconds\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "owZUv-bD9IDY",
    "outputId": "108cc857-7c55-4d89-8b1c-fd23e9d86b33"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Final Evaluation:\n",
      "Has Parking Model:\n",
      "Final Accuracy: 1.0000\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     16251\n",
      "           1       1.00      1.00      1.00     13819\n",
      "\n",
      "    accuracy                           1.00     30070\n",
      "   macro avg       1.00      1.00      1.00     30070\n",
      "weighted avg       1.00      1.00      1.00     30070\n",
      "\n",
      "\n",
      "Validated Parking Model:\n",
      "Final Accuracy: 0.9648\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.97      1.00      0.98     12272\n",
      "           2       0.95      0.73      0.82      1579\n",
      "\n",
      "    accuracy                           0.96     13851\n",
      "   macro avg       0.96      0.86      0.90     13851\n",
      "weighted avg       0.96      0.96      0.96     13851\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nFinal Evaluation:\")\n",
    "\n",
    "# Evaluate final 'Has Parking' model\n",
    "y_pred_hp_final = rf_hp_tuned.best_estimator_.predict(X_test_hp)\n",
    "hp_final_accuracy = accuracy_score(y_test_hp, y_pred_hp_final)\n",
    "print(\"Has Parking Model:\")\n",
    "print(f\"Final Accuracy: {hp_final_accuracy:.4f}\")\n",
    "print(classification_report(y_test_hp, y_pred_hp_final))\n",
    "\n",
    "# Evaluate final 'Validated Parking' model\n",
    "y_pred_v_final = rf_val_tuned.best_estimator_.predict(X_test_v)\n",
    "val_final_accuracy = accuracy_score(y_test_v, y_pred_v_final)\n",
    "print(\"\\nValidated Parking Model:\")\n",
    "print(f\"Final Accuracy: {val_final_accuracy:.4f}\")\n",
    "print(classification_report(y_test_v, y_pred_v_final))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## XGBoost Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [],
   "source": [
    "#!pip install xgboost\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the necessary libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split, RandomizedSearchCV\n",
    "import xgboost as xgb\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the model dataset\n",
    "df = pd.read_csv('Model_dataset.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stars</th>\n",
       "      <th>is_open</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>ByAppointmentOnly</th>\n",
       "      <th>BikeParking</th>\n",
       "      <th>RestaurantsPriceRange2</th>\n",
       "      <th>RestaurantsTakeOut</th>\n",
       "      <th>WiFi</th>\n",
       "      <th>WheelchairAccessible</th>\n",
       "      <th>RestaurantsGoodForGroups</th>\n",
       "      <th>BusinessParking_garage</th>\n",
       "      <th>BusinessParking_street</th>\n",
       "      <th>BusinessParking_lot</th>\n",
       "      <th>BusinessParking_valet</th>\n",
       "      <th>parking_status</th>\n",
       "      <th>city_encoded</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>34.426679</td>\n",
       "      <td>-119.711197</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>38.551126</td>\n",
       "      <td>-90.335695</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.5</td>\n",
       "      <td>0</td>\n",
       "      <td>32.223236</td>\n",
       "      <td>-110.880452</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>39.955505</td>\n",
       "      <td>-75.155564</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>14569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "      <td>40.338183</td>\n",
       "      <td>-75.471659</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>36.269593</td>\n",
       "      <td>-87.058943</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2.5</td>\n",
       "      <td>1</td>\n",
       "      <td>38.627695</td>\n",
       "      <td>-90.340465</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>767</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   stars  is_open   latitude   longitude  ByAppointmentOnly  BikeParking  \\\n",
       "0    5.0        0  34.426679 -119.711197                  1            0   \n",
       "1    3.0        1  38.551126  -90.335695                  0            0   \n",
       "2    3.5        0  32.223236 -110.880452                  0            1   \n",
       "3    4.0        1  39.955505  -75.155564                  0            1   \n",
       "4    4.5        1  40.338183  -75.471659                  0            1   \n",
       "5    2.0        1  36.269593  -87.058943                  0            0   \n",
       "6    2.5        1  38.627695  -90.340465                  0            1   \n",
       "\n",
       "   RestaurantsPriceRange2  RestaurantsTakeOut  WiFi  WheelchairAccessible  \\\n",
       "0                     2.0                   0     0                     0   \n",
       "1                     2.0                   0     0                     0   \n",
       "2                     2.0                   0     0                     1   \n",
       "3                     1.0                   1     1                     0   \n",
       "4                     2.0                   1     0                     1   \n",
       "5                     1.0                   1     0                     1   \n",
       "6                     2.0                   0     0                     0   \n",
       "\n",
       "   RestaurantsGoodForGroups  BusinessParking_garage  BusinessParking_street  \\\n",
       "0                         0                       0                       0   \n",
       "1                         0                       0                       0   \n",
       "2                         0                       0                       0   \n",
       "3                         0                       0                       1   \n",
       "4                         0                       1                       1   \n",
       "5                         1                       1                       1   \n",
       "6                         0                       0                       0   \n",
       "\n",
       "   BusinessParking_lot  BusinessParking_valet  parking_status  city_encoded  \n",
       "0                    0                      0               0          3829  \n",
       "1                    0                      0               0            36  \n",
       "2                    1                      0               1          9250  \n",
       "3                    0                      0               1         14569  \n",
       "4                    1                      0               2            10  \n",
       "5                    1                      1               2            41  \n",
       "6                    1                      0               1           767  "
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(7) # Check the first 7 dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Features\n",
    "X = df.drop(['parking_status', 'city_encoded'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Sample = 30070\n"
     ]
    }
   ],
   "source": [
    "# Target Variable for parking identification\n",
    "y_parking_id = (df['BusinessParking_garage'] | df['BusinessParking_street'] |\n",
    "                 df['BusinessParking_lot'] | df['BusinessParking_valet']).astype(int)\n",
    "\n",
    "# Split Training and Test data for parking identification\n",
    "X_train_pi, X_test_pi, y_train_pi, y_test_pi = train_test_split(X, y_parking_id, test_size=0.2, random_state=42)\n",
    "\n",
    "# Check the size of the test data sample\n",
    "print('Test Sample =', len(X_test_pi))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Sample = 13851\n"
     ]
    }
   ],
   "source": [
    "# Target variable for parking validation\n",
    "businesses_with_parking = df[y_parking_id == 1]\n",
    "\n",
    "# Features and target variable for parking validation\n",
    "X_parking = businesses_with_parking.drop(['parking_status', 'city_encoded'], axis=1)\n",
    "y_parking_validated = businesses_with_parking['parking_status']\n",
    "\n",
    "# Split Training and Test data for parking validation\n",
    "X_train_v, X_test_v, y_train_v, y_test_v = train_test_split(X_parking, y_parking_validated, test_size=0.2, random_state=42)\n",
    "\n",
    "# Check the size of the test data sample\n",
    "print('Test Sample =', len(X_test_v))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_evaluate_xgb(X_train, X_test, y_train, y_test, task):\n",
    "    xgb_model = xgb.XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='logloss')\n",
    "    start_time = time.time()\n",
    "    xgb_model.fit(X_train, y_train)\n",
    "    train_time = time.time() - start_time\n",
    "\n",
    "    y_pred = xgb_model.predict(X_test)\n",
    "    accuracy = accuracy_score(y_test, y_pred)\n",
    "\n",
    "    print(f\"\\nXGBoost Model ({task}):\")\n",
    "    print(f\"Config: {xgb_model.get_params()}\")\n",
    "    print(f\"Train Time: {train_time:.2f} seconds\")\n",
    "    print(f\"Accuracy: {accuracy:.4f}\")\n",
    "    print(classification_report(y_test, y_pred))\n",
    "\n",
    "    return xgb_model, train_time\n",
    "\n",
    "def empirical_tuning_xgb(X_train, X_test, y_train, y_test, task):\n",
    "    # Define hyperparameter search space\n",
    "    param_grid = {\n",
    "        'n_estimators': [100, 200, 300, 400, 500],\n",
    "        'max_depth': [3, 4, 5, 6, 7, 8],\n",
    "        'learning_rate': [0.01, 0.1, 0.2, 0.3],\n",
    "        'subsample': [0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n",
    "        'colsample_bytree': [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n",
    "        'min_child_weight': [1, 2, 3, 4, 5],\n",
    "        'eval_metric': ['logloss']  # Add this line\n",
    "    }\n",
    "\n",
    "    xgb_model = xgb.XGBClassifier(random_state=42, use_label_encoder=False)\n",
    "    # Perform randomized search with 10 iterations and 3-fold cross-validation\n",
    "    xgb_random = RandomizedSearchCV(estimator=xgb_model, param_distributions=param_grid,\n",
    "                                    n_iter=10, cv=3, random_state=42, n_jobs=-1)\n",
    "\n",
    "    start_time = time.time()\n",
    "    xgb_random.fit(X_train, y_train)\n",
    "    train_time = time.time() - start_time\n",
    "\n",
    "    y_pred = xgb_random.predict(X_test)\n",
    "    accuracy = accuracy_score(y_test, y_pred)\n",
    "\n",
    "    print(f\"\\nTuned XGBoost Model ({task}):\")\n",
    "    print(f\"Best Config: {xgb_random.best_params_}\")\n",
    "    print(f\"Train Time: {train_time:.2f} seconds\")\n",
    "    print(f\"Accuracy: {accuracy:.4f}\")\n",
    "    print(classification_report(y_test, y_pred))\n",
    "\n",
    "    return xgb_random, train_time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Parking Identification Model:\n",
      "\n",
      "XGBoost Model (Parking Identification):\n",
      "Config: {'objective': 'binary:logistic', 'base_score': None, 'booster': None, 'callbacks': None, 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': None, 'device': None, 'early_stopping_rounds': None, 'enable_categorical': False, 'eval_metric': 'logloss', 'feature_types': None, 'gamma': None, 'grow_policy': None, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': None, 'max_bin': None, 'max_cat_threshold': None, 'max_cat_to_onehot': None, 'max_delta_step': None, 'max_depth': None, 'max_leaves': None, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'multi_strategy': None, 'n_estimators': None, 'n_jobs': None, 'num_parallel_tree': None, 'random_state': 42, 'reg_alpha': None, 'reg_lambda': None, 'sampling_method': None, 'scale_pos_weight': None, 'subsample': None, 'tree_method': None, 'validate_parameters': None, 'verbosity': None, 'use_label_encoder': False}\n",
      "Train Time: 0.99 seconds\n",
      "Accuracy: 1.0000\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     16251\n",
      "           1       1.00      1.00      1.00     13819\n",
      "\n",
      "    accuracy                           1.00     30070\n",
      "   macro avg       1.00      1.00      1.00     30070\n",
      "weighted avg       1.00      1.00      1.00     30070\n",
      "\n",
      "Parking Validation Model:\n",
      "\n",
      "XGBoost Model (Parking Validation):\n",
      "Config: {'objective': 'binary:logistic', 'base_score': None, 'booster': None, 'callbacks': None, 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': None, 'device': None, 'early_stopping_rounds': None, 'enable_categorical': False, 'eval_metric': 'logloss', 'feature_types': None, 'gamma': None, 'grow_policy': None, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': None, 'max_bin': None, 'max_cat_threshold': None, 'max_cat_to_onehot': None, 'max_delta_step': None, 'max_depth': None, 'max_leaves': None, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'multi_strategy': None, 'n_estimators': None, 'n_jobs': None, 'num_parallel_tree': None, 'random_state': 42, 'reg_alpha': None, 'reg_lambda': None, 'sampling_method': None, 'scale_pos_weight': None, 'subsample': None, 'tree_method': None, 'validate_parameters': None, 'verbosity': None, 'use_label_encoder': False}\n",
      "Train Time: 0.21 seconds\n",
      "Accuracy: 0.9635\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.99      0.98     12272\n",
      "           1       0.91      0.75      0.82      1579\n",
      "\n",
      "    accuracy                           0.96     13851\n",
      "   macro avg       0.94      0.87      0.90     13851\n",
      "weighted avg       0.96      0.96      0.96     13851\n",
      "\n",
      "Training time for Parking Identification 0.9929287433624268\n",
      "Training time for Parking Validation 0.2140486240386963\n"
     ]
    }
   ],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# Parking Identification\n",
    "print(\"Parking Identification Model:\")\n",
    "xgb_model_pi, train_time_pi = train_evaluate_xgb(X_train_pi, X_test_pi, y_train_pi, y_test_pi, \"Parking Identification\")\n",
    "\n",
    "# Parking Identification\n",
    "print(\"Parking Validation Model:\")\n",
    "xgb_model_v, train_time_v = train_evaluate_xgb(X_train_v, X_test_v, y_train_v-1, y_test_v-1, \"Parking Validation\")\n",
    "\n",
    "print('Training time for Parking Identification', train_time_pi)\n",
    "print('Training time for Parking Validation', train_time_v)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Tuning Round 1\n",
      "\n",
      "Tuned XGBoost Model (Parking Identification):\n",
      "Best Config: {'subsample': 0.7, 'n_estimators': 300, 'min_child_weight': 4, 'max_depth': 4, 'learning_rate': 0.2, 'eval_metric': 'logloss', 'colsample_bytree': 1.0}\n",
      "Train Time: 28.83 seconds\n",
      "Accuracy: 1.0000\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     16251\n",
      "           1       1.00      1.00      1.00     13819\n",
      "\n",
      "    accuracy                           1.00     30070\n",
      "   macro avg       1.00      1.00      1.00     30070\n",
      "weighted avg       1.00      1.00      1.00     30070\n",
      "\n",
      "\n",
      "Tuned XGBoost Model (Parking Validation):\n",
      "Best Config: {'subsample': 0.7, 'n_estimators': 200, 'min_child_weight': 3, 'max_depth': 6, 'learning_rate': 0.01, 'eval_metric': 'logloss', 'colsample_bytree': 1.0}\n",
      "Train Time: 17.69 seconds\n",
      "Accuracy: 0.9642\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      1.00      0.98     12272\n",
      "           1       0.97      0.71      0.82      1579\n",
      "\n",
      "    accuracy                           0.96     13851\n",
      "   macro avg       0.97      0.85      0.90     13851\n",
      "weighted avg       0.96      0.96      0.96     13851\n",
      "\n",
      "Tuning time for round 1: 46.52 seconds\n",
      "\n",
      "Tuning Round 2\n",
      "\n",
      "Tuned XGBoost Model (Parking Identification):\n",
      "Best Config: {'subsample': 0.7, 'n_estimators': 300, 'min_child_weight': 4, 'max_depth': 4, 'learning_rate': 0.2, 'eval_metric': 'logloss', 'colsample_bytree': 1.0}\n",
      "Train Time: 30.72 seconds\n",
      "Accuracy: 1.0000\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     16251\n",
      "           1       1.00      1.00      1.00     13819\n",
      "\n",
      "    accuracy                           1.00     30070\n",
      "   macro avg       1.00      1.00      1.00     30070\n",
      "weighted avg       1.00      1.00      1.00     30070\n",
      "\n",
      "\n",
      "Tuned XGBoost Model (Parking Validation):\n",
      "Best Config: {'subsample': 0.7, 'n_estimators': 200, 'min_child_weight': 3, 'max_depth': 6, 'learning_rate': 0.01, 'eval_metric': 'logloss', 'colsample_bytree': 1.0}\n",
      "Train Time: 17.15 seconds\n",
      "Accuracy: 0.9642\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      1.00      0.98     12272\n",
      "           1       0.97      0.71      0.82      1579\n",
      "\n",
      "    accuracy                           0.96     13851\n",
      "   macro avg       0.97      0.85      0.90     13851\n",
      "weighted avg       0.96      0.96      0.96     13851\n",
      "\n",
      "Tuning time for round 2: 47.87 seconds\n",
      "\n",
      "Tuning Round 3\n",
      "\n",
      "Tuned XGBoost Model (Parking Identification):\n",
      "Best Config: {'subsample': 0.7, 'n_estimators': 300, 'min_child_weight': 4, 'max_depth': 4, 'learning_rate': 0.2, 'eval_metric': 'logloss', 'colsample_bytree': 1.0}\n",
      "Train Time: 27.89 seconds\n",
      "Accuracy: 1.0000\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     16251\n",
      "           1       1.00      1.00      1.00     13819\n",
      "\n",
      "    accuracy                           1.00     30070\n",
      "   macro avg       1.00      1.00      1.00     30070\n",
      "weighted avg       1.00      1.00      1.00     30070\n",
      "\n",
      "\n",
      "Tuned XGBoost Model (Parking Validation):\n",
      "Best Config: {'subsample': 0.7, 'n_estimators': 200, 'min_child_weight': 3, 'max_depth': 6, 'learning_rate': 0.01, 'eval_metric': 'logloss', 'colsample_bytree': 1.0}\n",
      "Train Time: 16.97 seconds\n",
      "Accuracy: 0.9642\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      1.00      0.98     12272\n",
      "           1       0.97      0.71      0.82      1579\n",
      "\n",
      "    accuracy                           0.96     13851\n",
      "   macro avg       0.97      0.85      0.90     13851\n",
      "weighted avg       0.96      0.96      0.96     13851\n",
      "\n",
      "Tuning time for round 3: 44.86 seconds\n",
      "\n",
      "Total tuning time: 139.24 seconds\n"
     ]
    }
   ],
   "source": [
    "# Perform multiple rounds of hyperparameter tuning for both models\n",
    "total_tuning_time = 0\n",
    "\n",
    "for i in range(3):\n",
    "    print(f\"\\nTuning Round {i+1}\")\n",
    "\n",
    "    # Tune the \"Parking Identification\" model\n",
    "    xgb_pi_tuned, pi_tune_time = empirical_tuning_xgb(X_train_pi, X_test_pi, y_train_pi, y_test_pi, \"Parking Identification\")\n",
    "\n",
    "    # Tune the \"Parking Validation\" model\n",
    "    xgb_pv_tuned, pv_tune_time = empirical_tuning_xgb(X_train_v, X_test_v, y_train_v-1, y_test_v-1, \"Parking Validation\")\n",
    "\n",
    "    round_time = pi_tune_time + pv_tune_time\n",
    "    total_tuning_time += round_time\n",
    "    print(f\"Tuning time for round {i+1}: {round_time:.2f} seconds\")\n",
    "\n",
    "print(f\"\\nTotal tuning time: {total_tuning_time:.2f} seconds\")\n",
    "\n",
    "# Best of parking validation and identification:\n",
    "best_xgb_pi = xgb_pi_tuned.best_estimator_\n",
    "best_xgb_pv = xgb_pv_tuned.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Final Evaluation:\n",
      "Parking Identification Model:\n",
      "Final Accuracy: 1.0000\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     16251\n",
      "           1       1.00      1.00      1.00     13819\n",
      "\n",
      "    accuracy                           1.00     30070\n",
      "   macro avg       1.00      1.00      1.00     30070\n",
      "weighted avg       1.00      1.00      1.00     30070\n",
      "\n",
      "\n",
      "Parking Validation Model:\n",
      "Final Accuracy: 0.0026\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.00      0.00      0.00         0\n",
      "           1       0.03      0.00      0.01     12272\n",
      "           2       0.00      0.00      0.00      1579\n",
      "\n",
      "    accuracy                           0.00     13851\n",
      "   macro avg       0.01      0.00      0.00     13851\n",
      "weighted avg       0.03      0.00      0.00     13851\n",
      "\n",
      "\n",
      "Best Parameters:\n",
      "Parking Identification Model:\n",
      "{'subsample': 0.7, 'n_estimators': 300, 'min_child_weight': 4, 'max_depth': 4, 'learning_rate': 0.2, 'eval_metric': 'logloss', 'colsample_bytree': 1.0}\n",
      "\n",
      "Parking Validation Model:\n",
      "{'subsample': 0.7, 'n_estimators': 200, 'min_child_weight': 3, 'max_depth': 6, 'learning_rate': 0.01, 'eval_metric': 'logloss', 'colsample_bytree': 1.0}\n",
      "\n",
      "Feature Importance:\n",
      "Parking Identification Model:\n",
      "                     feature  importance\n",
      "13       BusinessParking_lot    0.571584\n",
      "12    BusinessParking_street    0.372351\n",
      "11    BusinessParking_garage    0.042352\n",
      "14     BusinessParking_valet    0.013441\n",
      "9       WheelchairAccessible    0.000102\n",
      "10  RestaurantsGoodForGroups    0.000057\n",
      "5                BikeParking    0.000031\n",
      "8                       WiFi    0.000028\n",
      "6     RestaurantsPriceRange2    0.000023\n",
      "1                    is_open    0.000011\n",
      "\n",
      "Parking Validation Model:\n",
      "                     feature  importance\n",
      "11    BusinessParking_garage    0.670494\n",
      "14     BusinessParking_valet    0.262298\n",
      "13       BusinessParking_lot    0.025204\n",
      "12    BusinessParking_street    0.012739\n",
      "7         RestaurantsTakeOut    0.004076\n",
      "0                      stars    0.003819\n",
      "5                BikeParking    0.003671\n",
      "9       WheelchairAccessible    0.003626\n",
      "1                    is_open    0.003018\n",
      "10  RestaurantsGoodForGroups    0.002986\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nFinal Evaluation:\")\n",
    "\n",
    "# Evaluate final 'Parking Identification' model\n",
    "y_pred_pi_final = xgb_pi_tuned.best_estimator_.predict(X_test_pi)\n",
    "pi_final_accuracy = accuracy_score(y_test_pi, y_pred_pi_final)\n",
    "print(\"Parking Identification Model:\")\n",
    "print(f\"Final Accuracy: {pi_final_accuracy:.4f}\")\n",
    "print(classification_report(y_test_pi, y_pred_pi_final))\n",
    "\n",
    "# Evaluate final 'Parking Validation' model\n",
    "y_pred_pv_final = xgb_pv_tuned.best_estimator_.predict(X_test_v)\n",
    "pv_final_accuracy = accuracy_score(y_test_v, y_pred_pv_final)\n",
    "print(\"\\nParking Validation Model:\")\n",
    "print(f\"Final Accuracy: {pv_final_accuracy:.4f}\")\n",
    "print(classification_report(y_test_v, y_pred_pv_final))\n",
    "\n",
    "# Print best parameters for both models\n",
    "print(\"\\nBest Parameters:\")\n",
    "print(\"Parking Identification Model:\")\n",
    "print(xgb_pi_tuned.best_params_)\n",
    "print(\"\\nParking Validation Model:\")\n",
    "print(xgb_pv_tuned.best_params_)\n",
    "\n",
    "# Feature Importance for both models\n",
    "print(\"\\nFeature Importance:\")\n",
    "print(\"Parking Identification Model:\")\n",
    "feature_importance_pi = xgb_pi_tuned.best_estimator_.feature_importances_\n",
    "feature_names = X_train_pi.columns\n",
    "feature_importance_df_pi = pd.DataFrame({'feature': feature_names, 'importance': feature_importance_pi})\n",
    "feature_importance_df_pi = feature_importance_df_pi.sort_values('importance', ascending=False)\n",
    "print(feature_importance_df_pi.head(10))  # Print top 10 features\n",
    "\n",
    "print(\"\\nParking Validation Model:\")\n",
    "feature_importance_pv = xgb_pv_tuned.best_estimator_.feature_importances_\n",
    "feature_names = X_train_v.columns\n",
    "feature_importance_df_pv = pd.DataFrame({'feature': feature_names, 'importance': feature_importance_pv})\n",
    "feature_importance_df_pv = feature_importance_df_pv.sort_values('importance', ascending=False)\n",
    "print(feature_importance_df_pv.head(10))  # Print top 10 features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ANN with 1 hidden layer by Amruth"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting scikeras\n",
      "  Downloading scikeras-0.13.0-py3-none-any.whl.metadata (3.1 kB)\n",
      "Requirement already satisfied: keras>=3.2.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from scikeras) (3.6.0)\n",
      "Requirement already satisfied: scikit-learn>=1.4.2 in c:\\programdata\\anaconda3\\lib\\site-packages (from scikeras) (1.4.2)\n",
      "Requirement already satisfied: absl-py in c:\\programdata\\anaconda3\\lib\\site-packages (from keras>=3.2.0->scikeras) (2.1.0)\n",
      "Requirement already satisfied: numpy in c:\\programdata\\anaconda3\\lib\\site-packages (from keras>=3.2.0->scikeras) (1.26.4)\n",
      "Requirement already satisfied: rich in c:\\programdata\\anaconda3\\lib\\site-packages (from keras>=3.2.0->scikeras) (13.3.5)\n",
      "Requirement already satisfied: namex in c:\\programdata\\anaconda3\\lib\\site-packages (from keras>=3.2.0->scikeras) (0.0.8)\n",
      "Requirement already satisfied: h5py in c:\\programdata\\anaconda3\\lib\\site-packages (from keras>=3.2.0->scikeras) (3.11.0)\n",
      "Requirement already satisfied: optree in c:\\programdata\\anaconda3\\lib\\site-packages (from keras>=3.2.0->scikeras) (0.13.0)\n",
      "Requirement already satisfied: ml-dtypes in c:\\programdata\\anaconda3\\lib\\site-packages (from keras>=3.2.0->scikeras) (0.4.1)\n",
      "Requirement already satisfied: packaging in c:\\programdata\\anaconda3\\lib\\site-packages (from keras>=3.2.0->scikeras) (23.2)\n",
      "Requirement already satisfied: scipy>=1.6.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from scikit-learn>=1.4.2->scikeras) (1.14.1)\n",
      "Requirement already satisfied: joblib>=1.2.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from scikit-learn>=1.4.2->scikeras) (1.4.2)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from scikit-learn>=1.4.2->scikeras) (2.2.0)\n",
      "Requirement already satisfied: typing-extensions>=4.5.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from optree->keras>=3.2.0->scikeras) (4.11.0)\n",
      "Requirement already satisfied: markdown-it-py<3.0.0,>=2.2.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from rich->keras>=3.2.0->scikeras) (2.2.0)\n",
      "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from rich->keras>=3.2.0->scikeras) (2.15.1)\n",
      "Requirement already satisfied: mdurl~=0.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from markdown-it-py<3.0.0,>=2.2.0->rich->keras>=3.2.0->scikeras) (0.1.0)\n",
      "Downloading scikeras-0.13.0-py3-none-any.whl (26 kB)\n",
      "Installing collected packages: scikeras\n",
      "Successfully installed scikeras-0.13.0\n"
     ]
    }
   ],
   "source": [
    "#!pip uninstall tensorflow\n",
    "#!pip install tensorflow\n",
    "!pip install scikeras"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.17.0\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "print(tf.__version__)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Dropout\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "from sklearn.model_selection import RandomizedSearchCV, train_test_split\n",
    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_auc_score, roc_curve, auc\n",
    "from sklearn.impute import SimpleImputer\n",
    "from imblearn.over_sampling import SMOTE\n",
    "from sklearn.utils import shuffle\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import time\n",
    "#from keras.wrappers.scikit_learn import KerasClassifier  # Importing directly from Keras\n",
    "from scikeras.wrappers import KerasClassifier, KerasRegressor\n",
    "\n",
    "# Ensure dataset is loaded\n",
    "data = pd.read_csv('Model_dataset.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Handle missing values\n",
    "imputer = SimpleImputer(strategy='mean')\n",
    "data_imputed = pd.DataFrame(imputer.fit_transform(data), columns=data.columns)\n",
    "\n",
    "# Convert relevant columns to integers for bitwise operation\n",
    "columns_to_convert = ['BusinessParking_garage', 'BusinessParking_street', \n",
    "                      'BusinessParking_lot', 'BusinessParking_valet']\n",
    "data_imputed[columns_to_convert] = data_imputed[columns_to_convert].astype(int)\n",
    "\n",
    "X = data_imputed.drop(['parking_status', 'city_encoded'], axis=1)\n",
    "y_has_parking = (data_imputed['BusinessParking_garage'] | data_imputed['BusinessParking_street'] | \n",
    "                 data_imputed['BusinessParking_lot'] | data_imputed['BusinessParking_valet']).astype(int)\n",
    "y_validated = data_imputed['parking_status']\n",
    "\n",
    "X_train_hp, X_test_hp, y_train_hp, y_test_hp = train_test_split(X, y_has_parking, test_size=0.2, random_state=42)\n",
    "\n",
    "# Apply SMOTE to \"Has Parking\" model\n",
    "smote = SMOTE(random_state=42)\n",
    "X_train_hp_resampled, y_train_hp_resampled = smote.fit_resample(X_train_hp, y_train_hp)\n",
    "\n",
    "businesses_with_parking = data_imputed[y_has_parking == 1]\n",
    "X_parking = businesses_with_parking.drop(['parking_status', 'city_encoded'], axis=1)\n",
    "y_validated = businesses_with_parking['parking_status']\n",
    "\n",
    "X_train_v, X_test_v, y_train_v, y_test_v = train_test_split(X_parking, y_validated, test_size=0.2, random_state=42)\n",
    "\n",
    "# Apply SMOTE to \"Validated Parking\" model\n",
    "X_train_v_resampled, y_train_v_resampled = smote.fit_resample(X_train_v, y_train_v)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [],
   "source": [
    "def build_ann(optimizer='adam', neurons=32, dropout_rate=0.0, activation='relu'):\n",
    "    model = Sequential()\n",
    "    model.add(Dense(neurons, input_dim=X_train_hp.shape[1], activation=activation))\n",
    "    model.add(Dropout(dropout_rate))\n",
    "    model.add(Dense(1, activation='sigmoid'))\n",
    "    \n",
    "    model.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n",
    "    return model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m940/940\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 830us/step\n",
      "Has Parking Model completed\n"
     ]
    }
   ],
   "source": [
    "# For Has Parking Model\n",
    "model_hp = build_ann()\n",
    "history_hp = model_hp.fit(X_train_hp_resampled, y_train_hp_resampled, validation_split=0.2, epochs=50, batch_size=32, verbose=0)\n",
    "\n",
    "y_pred_hp = model_hp.predict(X_test_hp).flatten()\n",
    "y_pred_hp_binary = (y_pred_hp > 0.5).astype(int)\n",
    "print(\"Has Parking Model completed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Has Parking Model:\n",
      "Accuracy: 1.0000\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     16251\n",
      "           1       1.00      1.00      1.00     13819\n",
      "\n",
      "    accuracy                           1.00     30070\n",
      "   macro avg       1.00      1.00      1.00     30070\n",
      "weighted avg       1.00      1.00      1.00     30070\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"Has Parking Model:\")\n",
    "print(f\"Accuracy: {accuracy_score(y_test_hp, y_pred_hp_binary):.4f}\")\n",
    "print(classification_report(y_test_hp, y_pred_hp_binary))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m433/433\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step\n",
      "Validating Parking Model completed\n"
     ]
    }
   ],
   "source": [
    "# For Validated Parking Model\n",
    "model_v = build_ann()\n",
    "history_v = model_v.fit(X_train_v_resampled, y_train_v_resampled, validation_split=0.2, epochs=50, batch_size=32, verbose=0)\n",
    "\n",
    "y_pred_v = model_v.predict(X_test_v).flatten()\n",
    "y_pred_v_binary = (y_pred_v > 0.5).astype(int)\n",
    "print(\"Validating Parking Model completed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Validated Parking Model:\n",
      "Accuracy: 0.8860\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         1.0       0.89      1.00      0.94     12272\n",
      "         2.0       0.00      0.00      0.00      1579\n",
      "\n",
      "    accuracy                           0.89     13851\n",
      "   macro avg       0.44      0.50      0.47     13851\n",
      "weighted avg       0.78      0.89      0.83     13851\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nValidated Parking Model:\")\n",
    "print(f\"Accuracy: {accuracy_score(y_test_v, y_pred_v_binary):.4f}\")\n",
    "print(classification_report(y_test_v, y_pred_v_binary))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [],
   "source": [
    "def tune_hyperparameters(X_train, y_train, X_val, y_val, param_grid, n_iter=3):\n",
    "    best_acc = 0\n",
    "    best_params = {}\n",
    "    \n",
    "    for i in range(n_iter):\n",
    "        optimizer = param_grid['optimizer'][i]\n",
    "        neurons = param_grid['neurons'][i]\n",
    "        dropout_rate = param_grid['dropout_rate'][i]\n",
    "        activation = param_grid['activation'][i]\n",
    "        batch_size = param_grid['batch_size'][i]\n",
    "        epochs = param_grid['epochs'][i]\n",
    "        \n",
    "        model = build_ann(optimizer, neurons, dropout_rate, activation)\n",
    "        history = model.fit(X_train, y_train, validation_data=(X_val, y_val), \n",
    "                            epochs=epochs, batch_size=batch_size, verbose=0)\n",
    "        \n",
    "        y_pred = model.predict(X_val).flatten()\n",
    "        y_pred_binary = (y_pred > 0.5).astype(int)\n",
    "        acc = accuracy_score(y_val, y_pred_binary)\n",
    "        \n",
    "        if acc > best_acc:\n",
    "            best_acc = acc\n",
    "            best_params = {\n",
    "                'optimizer': optimizer,\n",
    "                'neurons': neurons,\n",
    "                'dropout_rate': dropout_rate,\n",
    "                'activation': activation,\n",
    "                'batch_size': batch_size,\n",
    "                'epochs': epochs\n",
    "            }\n",
    "        print(f\"Params: {optimizer}, {neurons}, {dropout_rate}, {activation}, {batch_size}, {epochs} - Acc: {acc:.4f}\")\n",
    "\n",
    "    return best_params, best_acc\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m811/811\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 804us/step\n",
      "Params: adam, 16, 0.0, relu, 32, 50 - Acc: 0.9997\n",
      "\u001b[1m811/811\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 909us/step\n",
      "Params: rmsprop, 32, 0.2, tanh, 64, 100 - Acc: 0.9997\n",
      "\u001b[1m811/811\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 764us/step\n",
      "Params: adam, 64, 0.4, relu, 32, 50 - Acc: 0.9997\n",
      "Best params for Has Parking model: {'optimizer': 'adam', 'neurons': 16, 'dropout_rate': 0.0, 'activation': 'relu', 'batch_size': 32, 'epochs': 50} with Acc: 0.9996915722106562\n",
      "\u001b[1m616/616\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 897us/step\n",
      "Params: adam, 16, 0.0, relu, 32, 50 - Acc: 0.5042\n",
      "\u001b[1m616/616\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 801us/step\n",
      "Params: rmsprop, 32, 0.2, tanh, 64, 100 - Acc: 0.5042\n",
      "\u001b[1m616/616\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 814us/step\n",
      "Params: adam, 64, 0.4, relu, 32, 50 - Acc: 0.5042\n",
      "Best params for Validated Parking model: {'optimizer': 'adam', 'neurons': 16, 'dropout_rate': 0.0, 'activation': 'relu', 'batch_size': 32, 'epochs': 50} with Acc: 0.5042127702771292\n"
     ]
    }
   ],
   "source": [
    "param_grid = {\n",
    "    'optimizer': ['adam', 'rmsprop', 'adam'],\n",
    "    'neurons': [16, 32, 64],\n",
    "    'dropout_rate': [0.0, 0.2, 0.4],\n",
    "    'activation': ['relu', 'tanh', 'relu'],\n",
    "    'batch_size': [32, 64, 32],\n",
    "    'epochs': [50, 100, 50]\n",
    "}\n",
    "\n",
    "# Split training data for validation\n",
    "X_train_hp_tune, X_val_hp_tune, y_train_hp_tune, y_val_hp_tune = train_test_split(X_train_hp_resampled, y_train_hp_resampled, test_size=0.2, random_state=42)\n",
    "\n",
    "best_params_hp, best_acc_hp = tune_hyperparameters(X_train_hp_tune, y_train_hp_tune, X_val_hp_tune, y_val_hp_tune, param_grid)\n",
    "print(f\"Best params for Has Parking model: {best_params_hp} with Acc: {best_acc_hp}\")\n",
    "\n",
    "# Split training data for validation\n",
    "X_train_v_tune, X_val_v_tune, y_train_v_tune, y_val_v_tune = train_test_split(X_train_v_resampled, y_train_v_resampled, test_size=0.2, random_state=42)\n",
    "\n",
    "best_params_v, best_acc_v = tune_hyperparameters(X_train_v_tune, y_train_v_tune, X_val_v_tune, y_val_v_tune, param_grid)\n",
    "print(f\"Best params for Validated Parking model: {best_params_v} with Acc: {best_acc_v}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Dropout\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "from sklearn.model_selection import RandomizedSearchCV, train_test_split\n",
    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_auc_score, roc_curve, auc\n",
    "from sklearn.impute import SimpleImputer\n",
    "from imblearn.over_sampling import SMOTE\n",
    "from sklearn.utils import shuffle\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import time\n",
    "#from keras.wrappers.scikit_learn import KerasClassifier  # Importing directly from Keras\n",
    "from scikeras.wrappers import KerasClassifier, KerasRegressor\n",
    "\n",
    "# Ensure dataset is loaded\n",
    "data = pd.read_csv('Model_dataset.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Handle missing values\n",
    "imputer = SimpleImputer(strategy='mean')\n",
    "data_imputed = pd.DataFrame(imputer.fit_transform(data), columns=data.columns)\n",
    "\n",
    "# Convert relevant columns to integers for bitwise operation\n",
    "columns_to_convert = ['BusinessParking_garage', 'BusinessParking_street', \n",
    "                      'BusinessParking_lot', 'BusinessParking_valet']\n",
    "data_imputed[columns_to_convert] = data_imputed[columns_to_convert].astype(int)\n",
    "\n",
    "X = data_imputed.drop(['parking_status', 'city_encoded'], axis=1)\n",
    "y_has_parking = (data_imputed['BusinessParking_garage'] | data_imputed['BusinessParking_street'] | \n",
    "                 data_imputed['BusinessParking_lot'] | data_imputed['BusinessParking_valet']).astype(int)\n",
    "y_validated = data_imputed['parking_status']\n",
    "\n",
    "X_train_hp, X_test_hp, y_train_hp, y_test_hp = train_test_split(X, y_has_parking, test_size=0.2, random_state=42)\n",
    "\n",
    "# Apply SMOTE to \"Has Parking\" model\n",
    "smote = SMOTE(random_state=42)\n",
    "X_train_hp_resampled, y_train_hp_resampled = smote.fit_resample(X_train_hp, y_train_hp)\n",
    "\n",
    "businesses_with_parking = data_imputed[y_has_parking == 1]\n",
    "X_parking = businesses_with_parking.drop(['parking_status', 'city_encoded'], axis=1)\n",
    "y_validated = businesses_with_parking['parking_status']\n",
    "\n",
    "X_train_v, X_test_v, y_train_v, y_test_v = train_test_split(X_parking, y_validated, test_size=0.2, random_state=42)\n",
    "\n",
    "# Apply SMOTE to \"Validated Parking\" model\n",
    "X_train_v_resampled, y_train_v_resampled = smote.fit_resample(X_train_v, y_train_v)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {},
   "outputs": [],
   "source": [
    "def build_multi_layer_ann(optimizer='adam', neurons=32, dropout_rate=0.0, activation='relu'):\n",
    "    \n",
    "    # Define the model\n",
    "    model = Sequential()\n",
    "    # Input Layer and First Hidden Layer (e.g., 64 neurons, ReLU activation)\n",
    "    model.add(Dense(64, input_dim=X_train_hp.shape[1], activation=activation))\n",
    "    # Second Hidden Layer (e.g., 32 neurons, ReLU activation)\n",
    "    model.add(Dense(32, activation=activation))\n",
    "    # Third Hidden Layer (e.g., 16 neurons, ReLU activation)\n",
    "    model.add(Dense(16, activation=activation))\n",
    "    # Output Layer (for binary classification, 1 neuron with sigmoid)\n",
    "    # For multi-class classification, you can use 'softmax' instead of 'sigmoid'\n",
    "    model.add(Dense(1, activation='sigmoid'))\n",
    "    # Compile the model (using binary cross-entropy for binary classification)\n",
    "    model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])\n",
    "    return model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m940/940\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step\n",
      "Has Parking Model completed\n"
     ]
    }
   ],
   "source": [
    "# For Has Parking Model\n",
    "model_hp_ml_ann = build_multi_layer_ann()\n",
    "history_hp_ml_ann = model_hp_ml_ann.fit(X_train_hp_resampled, y_train_hp_resampled, validation_split=0.2, epochs=50, batch_size=32, verbose=0)\n",
    "\n",
    "y_pred_hp_ml_ann = model_hp_ml_ann.predict(X_test_hp).flatten()\n",
    "y_pred_hp_binary_ml_ann = (y_pred_hp_ml_ann > 0.5).astype(int)\n",
    "print(\"Has Parking Model completed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Has Parking Model:\n",
      "Accuracy: 1.0000\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     16251\n",
      "           1       1.00      1.00      1.00     13819\n",
      "\n",
      "    accuracy                           1.00     30070\n",
      "   macro avg       1.00      1.00      1.00     30070\n",
      "weighted avg       1.00      1.00      1.00     30070\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"Has Parking Model:\")\n",
    "print(f\"Accuracy: {accuracy_score(y_test_hp, y_pred_hp_binary_ml_ann):.4f}\")\n",
    "print(classification_report(y_test_hp, y_pred_hp_binary_ml_ann))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m433/433\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 966us/step\n",
      "Validating Parking Model completed\n"
     ]
    }
   ],
   "source": [
    "# For Validated Parking Model\n",
    "model_v_ml_ann = build_multi_layer_ann()\n",
    "history_v_ml_ann = model_v_ml_ann.fit(X_train_v_resampled, y_train_v_resampled, validation_split=0.2, epochs=50, batch_size=32, verbose=0)\n",
    "\n",
    "y_pred_v_ml_ann = model_v.predict(X_test_v).flatten()\n",
    "y_pred_v_binary_ml_ann = (y_pred_v_ml_ann > 0.5).astype(int)\n",
    "print(\"Validating Parking Model completed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Validated Parking Model:\n",
      "Accuracy: 0.8860\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         1.0       0.89      1.00      0.94     12272\n",
      "         2.0       0.00      0.00      0.00      1579\n",
      "\n",
      "    accuracy                           0.89     13851\n",
      "   macro avg       0.44      0.50      0.47     13851\n",
      "weighted avg       0.78      0.89      0.83     13851\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nValidated Parking Model:\")\n",
    "print(f\"Accuracy: {accuracy_score(y_test_v, y_pred_v_binary_ml_ann):.4f}\")\n",
    "print(classification_report(y_test_v, y_pred_v_binary_ml_ann))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {},
   "outputs": [],
   "source": [
    "def tune_hyperparameters_ml_ann(X_train, y_train, X_val, y_val, param_grid, n_iter=3):\n",
    "    best_acc = 0\n",
    "    best_params = {}\n",
    "    \n",
    "    for i in range(n_iter):\n",
    "        optimizer = param_grid['optimizer'][i]\n",
    "        neurons = param_grid['neurons'][i]\n",
    "        dropout_rate = param_grid['dropout_rate'][i]\n",
    "        activation = param_grid['activation'][i]\n",
    "        batch_size = param_grid['batch_size'][i]\n",
    "        epochs = param_grid['epochs'][i]\n",
    "        \n",
    "        model = build_multi_layer_ann(optimizer, neurons, dropout_rate, activation)\n",
    "        history = model.fit(X_train, y_train, validation_data=(X_val, y_val), \n",
    "                            epochs=epochs, batch_size=batch_size, verbose=0)\n",
    "        \n",
    "        y_pred_ml_ann = model.predict(X_val).flatten()\n",
    "        y_pred_binary_ml_ann = (y_pred_ml_ann > 0.5).astype(int)\n",
    "        acc = accuracy_score(y_val, y_pred_binary_ml_ann)\n",
    "        \n",
    "        if acc > best_acc:\n",
    "            best_acc = acc\n",
    "            best_params = {\n",
    "                'optimizer': optimizer,\n",
    "                'neurons': neurons,\n",
    "                'dropout_rate': dropout_rate,\n",
    "                'activation': activation,\n",
    "                'batch_size': batch_size,\n",
    "                'epochs': epochs\n",
    "            }\n",
    "        print(f\"Params: {optimizer}, {neurons}, {dropout_rate}, {activation}, {batch_size}, {epochs} - Acc: {acc:.4f}\")\n",
    "\n",
    "    return best_params, best_acc\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m811/811\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 801us/step\n",
      "Params: adam, 16, 0.0, relu, 32, 50 - Acc: 0.9997\n",
      "\u001b[1m811/811\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 837us/step\n",
      "Params: rmsprop, 32, 0.2, tanh, 64, 100 - Acc: 0.9997\n",
      "\u001b[1m811/811\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 933us/step\n",
      "Params: adam, 64, 0.4, relu, 32, 50 - Acc: 0.9997\n",
      "Best params for Has Parking model: {'optimizer': 'adam', 'neurons': 16, 'dropout_rate': 0.0, 'activation': 'relu', 'batch_size': 32, 'epochs': 50} with Acc: 0.9996915722106562\n",
      "\u001b[1m616/616\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step\n",
      "Params: adam, 16, 0.0, relu, 32, 50 - Acc: 0.5042\n",
      "\u001b[1m616/616\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 838us/step\n",
      "Params: rmsprop, 32, 0.2, tanh, 64, 100 - Acc: 0.5042\n",
      "\u001b[1m616/616\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 806us/step\n",
      "Params: adam, 64, 0.4, relu, 32, 50 - Acc: 0.5042\n",
      "Best params for Validated Parking model: {'optimizer': 'adam', 'neurons': 16, 'dropout_rate': 0.0, 'activation': 'relu', 'batch_size': 32, 'epochs': 50} with Acc: 0.5042127702771292\n"
     ]
    }
   ],
   "source": [
    "param_grid = {\n",
    "    'optimizer': ['adam', 'rmsprop', 'adam'],\n",
    "    'neurons': [16, 32, 64],\n",
    "    'dropout_rate': [0.0, 0.2, 0.4],\n",
    "    'activation': ['relu', 'tanh', 'relu'],\n",
    "    'batch_size': [32, 64, 32],\n",
    "    'epochs': [50, 100, 50]\n",
    "}\n",
    "\n",
    "# Split training data for validation\n",
    "X_train_hp_tune, X_val_hp_tune, y_train_hp_tune, y_val_hp_tune = train_test_split(X_train_hp_resampled, y_train_hp_resampled, test_size=0.2, random_state=42)\n",
    "\n",
    "best_params_hp, best_acc_hp = tune_hyperparameters(X_train_hp_tune, y_train_hp_tune, X_val_hp_tune, y_val_hp_tune, param_grid)\n",
    "print(f\"Best params for Has Parking model: {best_params_hp} with Acc: {best_acc_hp}\")\n",
    "\n",
    "# Split training data for validation\n",
    "X_train_v_tune, X_val_v_tune, y_train_v_tune, y_val_v_tune = train_test_split(X_train_v_resampled, y_train_v_resampled, test_size=0.2, random_state=42)\n",
    "\n",
    "best_params_v, best_acc_v = tune_hyperparameters(X_train_v_tune, y_train_v_tune, X_val_v_tune, y_val_v_tune, param_grid)\n",
    "print(f\"Best params for Validated Parking model: {best_params_v} with Acc: {best_acc_v}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "accelerator": "TPU",
  "colab": {
   "gpuType": "V28",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
